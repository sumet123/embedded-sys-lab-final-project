
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008de0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008f68  08008f68  00018f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f84  08008f84  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008f84  08008f84  00018f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f8c  08008f8c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f8c  08008f8c  00018f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f90  08008f90  00018f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000844  20000090  08009024  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008d4  08009024  000208d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c7fc  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a68  00000000  00000000  0003c8bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001630  00000000  00000000  00040328  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014a8  00000000  00000000  00041958  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025280  00000000  00000000  00042e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013e86  00000000  00000000  00068080  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1f93  00000000  00000000  0007bf06  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014de99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006044  00000000  00000000  0014df14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008f50 	.word	0x08008f50

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008f50 	.word	0x08008f50

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_uldivmod>:
 8000964:	b953      	cbnz	r3, 800097c <__aeabi_uldivmod+0x18>
 8000966:	b94a      	cbnz	r2, 800097c <__aeabi_uldivmod+0x18>
 8000968:	2900      	cmp	r1, #0
 800096a:	bf08      	it	eq
 800096c:	2800      	cmpeq	r0, #0
 800096e:	bf1c      	itt	ne
 8000970:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000974:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000978:	f000 b972 	b.w	8000c60 <__aeabi_idiv0>
 800097c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000980:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000984:	f000 f806 	bl	8000994 <__udivmoddi4>
 8000988:	f8dd e004 	ldr.w	lr, [sp, #4]
 800098c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000990:	b004      	add	sp, #16
 8000992:	4770      	bx	lr

08000994 <__udivmoddi4>:
 8000994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000998:	9e08      	ldr	r6, [sp, #32]
 800099a:	4604      	mov	r4, r0
 800099c:	4688      	mov	r8, r1
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d14b      	bne.n	8000a3a <__udivmoddi4+0xa6>
 80009a2:	428a      	cmp	r2, r1
 80009a4:	4615      	mov	r5, r2
 80009a6:	d967      	bls.n	8000a78 <__udivmoddi4+0xe4>
 80009a8:	fab2 f282 	clz	r2, r2
 80009ac:	b14a      	cbz	r2, 80009c2 <__udivmoddi4+0x2e>
 80009ae:	f1c2 0720 	rsb	r7, r2, #32
 80009b2:	fa01 f302 	lsl.w	r3, r1, r2
 80009b6:	fa20 f707 	lsr.w	r7, r0, r7
 80009ba:	4095      	lsls	r5, r2
 80009bc:	ea47 0803 	orr.w	r8, r7, r3
 80009c0:	4094      	lsls	r4, r2
 80009c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80009c6:	0c23      	lsrs	r3, r4, #16
 80009c8:	fbb8 f7fe 	udiv	r7, r8, lr
 80009cc:	fa1f fc85 	uxth.w	ip, r5
 80009d0:	fb0e 8817 	mls	r8, lr, r7, r8
 80009d4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009d8:	fb07 f10c 	mul.w	r1, r7, ip
 80009dc:	4299      	cmp	r1, r3
 80009de:	d909      	bls.n	80009f4 <__udivmoddi4+0x60>
 80009e0:	18eb      	adds	r3, r5, r3
 80009e2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80009e6:	f080 811b 	bcs.w	8000c20 <__udivmoddi4+0x28c>
 80009ea:	4299      	cmp	r1, r3
 80009ec:	f240 8118 	bls.w	8000c20 <__udivmoddi4+0x28c>
 80009f0:	3f02      	subs	r7, #2
 80009f2:	442b      	add	r3, r5
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f0fe 	udiv	r0, r3, lr
 80009fc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a08:	45a4      	cmp	ip, r4
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x8c>
 8000a0c:	192c      	adds	r4, r5, r4
 8000a0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a12:	f080 8107 	bcs.w	8000c24 <__udivmoddi4+0x290>
 8000a16:	45a4      	cmp	ip, r4
 8000a18:	f240 8104 	bls.w	8000c24 <__udivmoddi4+0x290>
 8000a1c:	3802      	subs	r0, #2
 8000a1e:	442c      	add	r4, r5
 8000a20:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a24:	eba4 040c 	sub.w	r4, r4, ip
 8000a28:	2700      	movs	r7, #0
 8000a2a:	b11e      	cbz	r6, 8000a34 <__udivmoddi4+0xa0>
 8000a2c:	40d4      	lsrs	r4, r2
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e9c6 4300 	strd	r4, r3, [r6]
 8000a34:	4639      	mov	r1, r7
 8000a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3a:	428b      	cmp	r3, r1
 8000a3c:	d909      	bls.n	8000a52 <__udivmoddi4+0xbe>
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	f000 80eb 	beq.w	8000c1a <__udivmoddi4+0x286>
 8000a44:	2700      	movs	r7, #0
 8000a46:	e9c6 0100 	strd	r0, r1, [r6]
 8000a4a:	4638      	mov	r0, r7
 8000a4c:	4639      	mov	r1, r7
 8000a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a52:	fab3 f783 	clz	r7, r3
 8000a56:	2f00      	cmp	r7, #0
 8000a58:	d147      	bne.n	8000aea <__udivmoddi4+0x156>
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d302      	bcc.n	8000a64 <__udivmoddi4+0xd0>
 8000a5e:	4282      	cmp	r2, r0
 8000a60:	f200 80fa 	bhi.w	8000c58 <__udivmoddi4+0x2c4>
 8000a64:	1a84      	subs	r4, r0, r2
 8000a66:	eb61 0303 	sbc.w	r3, r1, r3
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	4698      	mov	r8, r3
 8000a6e:	2e00      	cmp	r6, #0
 8000a70:	d0e0      	beq.n	8000a34 <__udivmoddi4+0xa0>
 8000a72:	e9c6 4800 	strd	r4, r8, [r6]
 8000a76:	e7dd      	b.n	8000a34 <__udivmoddi4+0xa0>
 8000a78:	b902      	cbnz	r2, 8000a7c <__udivmoddi4+0xe8>
 8000a7a:	deff      	udf	#255	; 0xff
 8000a7c:	fab2 f282 	clz	r2, r2
 8000a80:	2a00      	cmp	r2, #0
 8000a82:	f040 808f 	bne.w	8000ba4 <__udivmoddi4+0x210>
 8000a86:	1b49      	subs	r1, r1, r5
 8000a88:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a8c:	fa1f f885 	uxth.w	r8, r5
 8000a90:	2701      	movs	r7, #1
 8000a92:	fbb1 fcfe 	udiv	ip, r1, lr
 8000a96:	0c23      	lsrs	r3, r4, #16
 8000a98:	fb0e 111c 	mls	r1, lr, ip, r1
 8000a9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aa0:	fb08 f10c 	mul.w	r1, r8, ip
 8000aa4:	4299      	cmp	r1, r3
 8000aa6:	d907      	bls.n	8000ab8 <__udivmoddi4+0x124>
 8000aa8:	18eb      	adds	r3, r5, r3
 8000aaa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000aae:	d202      	bcs.n	8000ab6 <__udivmoddi4+0x122>
 8000ab0:	4299      	cmp	r1, r3
 8000ab2:	f200 80cd 	bhi.w	8000c50 <__udivmoddi4+0x2bc>
 8000ab6:	4684      	mov	ip, r0
 8000ab8:	1a59      	subs	r1, r3, r1
 8000aba:	b2a3      	uxth	r3, r4
 8000abc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ac0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ac4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ac8:	fb08 f800 	mul.w	r8, r8, r0
 8000acc:	45a0      	cmp	r8, r4
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0x14c>
 8000ad0:	192c      	adds	r4, r5, r4
 8000ad2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ad6:	d202      	bcs.n	8000ade <__udivmoddi4+0x14a>
 8000ad8:	45a0      	cmp	r8, r4
 8000ada:	f200 80b6 	bhi.w	8000c4a <__udivmoddi4+0x2b6>
 8000ade:	4618      	mov	r0, r3
 8000ae0:	eba4 0408 	sub.w	r4, r4, r8
 8000ae4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ae8:	e79f      	b.n	8000a2a <__udivmoddi4+0x96>
 8000aea:	f1c7 0c20 	rsb	ip, r7, #32
 8000aee:	40bb      	lsls	r3, r7
 8000af0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000af4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000af8:	fa01 f407 	lsl.w	r4, r1, r7
 8000afc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b00:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b04:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b08:	4325      	orrs	r5, r4
 8000b0a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b0e:	0c2c      	lsrs	r4, r5, #16
 8000b10:	fb08 3319 	mls	r3, r8, r9, r3
 8000b14:	fa1f fa8e 	uxth.w	sl, lr
 8000b18:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b1c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b20:	429c      	cmp	r4, r3
 8000b22:	fa02 f207 	lsl.w	r2, r2, r7
 8000b26:	fa00 f107 	lsl.w	r1, r0, r7
 8000b2a:	d90b      	bls.n	8000b44 <__udivmoddi4+0x1b0>
 8000b2c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b30:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000b34:	f080 8087 	bcs.w	8000c46 <__udivmoddi4+0x2b2>
 8000b38:	429c      	cmp	r4, r3
 8000b3a:	f240 8084 	bls.w	8000c46 <__udivmoddi4+0x2b2>
 8000b3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b42:	4473      	add	r3, lr
 8000b44:	1b1b      	subs	r3, r3, r4
 8000b46:	b2ad      	uxth	r5, r5
 8000b48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b50:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000b54:	fb00 fa0a 	mul.w	sl, r0, sl
 8000b58:	45a2      	cmp	sl, r4
 8000b5a:	d908      	bls.n	8000b6e <__udivmoddi4+0x1da>
 8000b5c:	eb1e 0404 	adds.w	r4, lr, r4
 8000b60:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b64:	d26b      	bcs.n	8000c3e <__udivmoddi4+0x2aa>
 8000b66:	45a2      	cmp	sl, r4
 8000b68:	d969      	bls.n	8000c3e <__udivmoddi4+0x2aa>
 8000b6a:	3802      	subs	r0, #2
 8000b6c:	4474      	add	r4, lr
 8000b6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b72:	fba0 8902 	umull	r8, r9, r0, r2
 8000b76:	eba4 040a 	sub.w	r4, r4, sl
 8000b7a:	454c      	cmp	r4, r9
 8000b7c:	46c2      	mov	sl, r8
 8000b7e:	464b      	mov	r3, r9
 8000b80:	d354      	bcc.n	8000c2c <__udivmoddi4+0x298>
 8000b82:	d051      	beq.n	8000c28 <__udivmoddi4+0x294>
 8000b84:	2e00      	cmp	r6, #0
 8000b86:	d069      	beq.n	8000c5c <__udivmoddi4+0x2c8>
 8000b88:	ebb1 050a 	subs.w	r5, r1, sl
 8000b8c:	eb64 0403 	sbc.w	r4, r4, r3
 8000b90:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000b94:	40fd      	lsrs	r5, r7
 8000b96:	40fc      	lsrs	r4, r7
 8000b98:	ea4c 0505 	orr.w	r5, ip, r5
 8000b9c:	e9c6 5400 	strd	r5, r4, [r6]
 8000ba0:	2700      	movs	r7, #0
 8000ba2:	e747      	b.n	8000a34 <__udivmoddi4+0xa0>
 8000ba4:	f1c2 0320 	rsb	r3, r2, #32
 8000ba8:	fa20 f703 	lsr.w	r7, r0, r3
 8000bac:	4095      	lsls	r5, r2
 8000bae:	fa01 f002 	lsl.w	r0, r1, r2
 8000bb2:	fa21 f303 	lsr.w	r3, r1, r3
 8000bb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bba:	4338      	orrs	r0, r7
 8000bbc:	0c01      	lsrs	r1, r0, #16
 8000bbe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000bc2:	fa1f f885 	uxth.w	r8, r5
 8000bc6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000bca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bce:	fb07 f308 	mul.w	r3, r7, r8
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000bd8:	d907      	bls.n	8000bea <__udivmoddi4+0x256>
 8000bda:	1869      	adds	r1, r5, r1
 8000bdc:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000be0:	d22f      	bcs.n	8000c42 <__udivmoddi4+0x2ae>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d92d      	bls.n	8000c42 <__udivmoddi4+0x2ae>
 8000be6:	3f02      	subs	r7, #2
 8000be8:	4429      	add	r1, r5
 8000bea:	1acb      	subs	r3, r1, r3
 8000bec:	b281      	uxth	r1, r0
 8000bee:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bf2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bf6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bfa:	fb00 f308 	mul.w	r3, r0, r8
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d907      	bls.n	8000c12 <__udivmoddi4+0x27e>
 8000c02:	1869      	adds	r1, r5, r1
 8000c04:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c08:	d217      	bcs.n	8000c3a <__udivmoddi4+0x2a6>
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	d915      	bls.n	8000c3a <__udivmoddi4+0x2a6>
 8000c0e:	3802      	subs	r0, #2
 8000c10:	4429      	add	r1, r5
 8000c12:	1ac9      	subs	r1, r1, r3
 8000c14:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c18:	e73b      	b.n	8000a92 <__udivmoddi4+0xfe>
 8000c1a:	4637      	mov	r7, r6
 8000c1c:	4630      	mov	r0, r6
 8000c1e:	e709      	b.n	8000a34 <__udivmoddi4+0xa0>
 8000c20:	4607      	mov	r7, r0
 8000c22:	e6e7      	b.n	80009f4 <__udivmoddi4+0x60>
 8000c24:	4618      	mov	r0, r3
 8000c26:	e6fb      	b.n	8000a20 <__udivmoddi4+0x8c>
 8000c28:	4541      	cmp	r1, r8
 8000c2a:	d2ab      	bcs.n	8000b84 <__udivmoddi4+0x1f0>
 8000c2c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c30:	eb69 020e 	sbc.w	r2, r9, lr
 8000c34:	3801      	subs	r0, #1
 8000c36:	4613      	mov	r3, r2
 8000c38:	e7a4      	b.n	8000b84 <__udivmoddi4+0x1f0>
 8000c3a:	4660      	mov	r0, ip
 8000c3c:	e7e9      	b.n	8000c12 <__udivmoddi4+0x27e>
 8000c3e:	4618      	mov	r0, r3
 8000c40:	e795      	b.n	8000b6e <__udivmoddi4+0x1da>
 8000c42:	4667      	mov	r7, ip
 8000c44:	e7d1      	b.n	8000bea <__udivmoddi4+0x256>
 8000c46:	4681      	mov	r9, r0
 8000c48:	e77c      	b.n	8000b44 <__udivmoddi4+0x1b0>
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	442c      	add	r4, r5
 8000c4e:	e747      	b.n	8000ae0 <__udivmoddi4+0x14c>
 8000c50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c54:	442b      	add	r3, r5
 8000c56:	e72f      	b.n	8000ab8 <__udivmoddi4+0x124>
 8000c58:	4638      	mov	r0, r7
 8000c5a:	e708      	b.n	8000a6e <__udivmoddi4+0xda>
 8000c5c:	4637      	mov	r7, r6
 8000c5e:	e6e9      	b.n	8000a34 <__udivmoddi4+0xa0>

08000c60 <__aeabi_idiv0>:
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c68:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ca4 <HAL_Init+0x40>)
 8000c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <HAL_Init+0x40>)
 8000c7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <HAL_Init+0x40>)
 8000c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f000 f94d 	bl	8000f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f000 f808 	bl	8000ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c98:	f007 fb10 	bl	80082bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023c00 	.word	0x40023c00

08000ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_InitTick+0x54>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_InitTick+0x58>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f965 	bl	8000f96 <HAL_SYSTICK_Config>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e00e      	b.n	8000cf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b0f      	cmp	r3, #15
 8000cda:	d80a      	bhi.n	8000cf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ce4:	f000 f92d 	bl	8000f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce8:	4a06      	ldr	r2, [pc, #24]	; (8000d04 <HAL_InitTick+0x5c>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	e000      	b.n	8000cf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000028 	.word	0x20000028
 8000d00:	20000004 	.word	0x20000004
 8000d04:	20000000 	.word	0x20000000

08000d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x20>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_IncTick+0x24>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <HAL_IncTick+0x24>)
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000004 	.word	0x20000004
 8000d2c:	200000c8 	.word	0x200000c8

08000d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return uwTick;
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <HAL_GetTick+0x14>)
 8000d36:	681b      	ldr	r3, [r3, #0]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	200000c8 	.word	0x200000c8

08000d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d50:	f7ff ffee 	bl	8000d30 <HAL_GetTick>
 8000d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d60:	d005      	beq.n	8000d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_Delay+0x40>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	461a      	mov	r2, r3
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d6e:	bf00      	nop
 8000d70:	f7ff ffde 	bl	8000d30 <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d8f7      	bhi.n	8000d70 <HAL_Delay+0x28>
  {
  }
}
 8000d80:	bf00      	nop
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000004 	.word	0x20000004

08000d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da8:	4013      	ands	r3, r2
 8000daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dbe:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	60d3      	str	r3, [r2, #12]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <__NVIC_GetPriorityGrouping+0x18>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	f003 0307 	and.w	r3, r3, #7
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	db0b      	blt.n	8000e1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	f003 021f 	and.w	r2, r3, #31
 8000e08:	4907      	ldr	r1, [pc, #28]	; (8000e28 <__NVIC_EnableIRQ+0x38>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	095b      	lsrs	r3, r3, #5
 8000e10:	2001      	movs	r0, #1
 8000e12:	fa00 f202 	lsl.w	r2, r0, r2
 8000e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000e100 	.word	0xe000e100

08000e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	db0a      	blt.n	8000e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	490c      	ldr	r1, [pc, #48]	; (8000e78 <__NVIC_SetPriority+0x4c>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	0112      	lsls	r2, r2, #4
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	440b      	add	r3, r1
 8000e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e54:	e00a      	b.n	8000e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4908      	ldr	r1, [pc, #32]	; (8000e7c <__NVIC_SetPriority+0x50>)
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	3b04      	subs	r3, #4
 8000e64:	0112      	lsls	r2, r2, #4
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	440b      	add	r3, r1
 8000e6a:	761a      	strb	r2, [r3, #24]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000e100 	.word	0xe000e100
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b089      	sub	sp, #36	; 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f1c3 0307 	rsb	r3, r3, #7
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	bf28      	it	cs
 8000e9e:	2304      	movcs	r3, #4
 8000ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	2b06      	cmp	r3, #6
 8000ea8:	d902      	bls.n	8000eb0 <NVIC_EncodePriority+0x30>
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3b03      	subs	r3, #3
 8000eae:	e000      	b.n	8000eb2 <NVIC_EncodePriority+0x32>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed2:	43d9      	mvns	r1, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	4313      	orrs	r3, r2
         );
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3724      	adds	r7, #36	; 0x24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef8:	d301      	bcc.n	8000efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00f      	b.n	8000f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <SysTick_Config+0x40>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f06:	210f      	movs	r1, #15
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f0c:	f7ff ff8e 	bl	8000e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <SysTick_Config+0x40>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f16:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <SysTick_Config+0x40>)
 8000f18:	2207      	movs	r2, #7
 8000f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	e000e010 	.word	0xe000e010

08000f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff29 	bl	8000d8c <__NVIC_SetPriorityGrouping>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f54:	f7ff ff3e 	bl	8000dd4 <__NVIC_GetPriorityGrouping>
 8000f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	6978      	ldr	r0, [r7, #20]
 8000f60:	f7ff ff8e 	bl	8000e80 <NVIC_EncodePriority>
 8000f64:	4602      	mov	r2, r0
 8000f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff5d 	bl	8000e2c <__NVIC_SetPriority>
}
 8000f72:	bf00      	nop
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff31 	bl	8000df0 <__NVIC_EnableIRQ>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ffa2 	bl	8000ee8 <SysTick_Config>
 8000fa4:	4603      	mov	r3, r0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	e16b      	b.n	80012a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fcc:	2201      	movs	r2, #1
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	f040 815a 	bne.w	800129e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d00b      	beq.n	800100a <HAL_GPIO_Init+0x5a>
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d007      	beq.n	800100a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ffe:	2b11      	cmp	r3, #17
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	2b12      	cmp	r3, #18
 8001008:	d130      	bne.n	800106c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	2203      	movs	r2, #3
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001040:	2201      	movs	r2, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	091b      	lsrs	r3, r3, #4
 8001056:	f003 0201 	and.w	r2, r3, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0xfc>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b12      	cmp	r3, #18
 80010aa:	d123      	bne.n	80010f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	08da      	lsrs	r2, r3, #3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3208      	adds	r2, #8
 80010b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	220f      	movs	r2, #15
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	691a      	ldr	r2, [r3, #16]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	08da      	lsrs	r2, r3, #3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3208      	adds	r2, #8
 80010ee:	69b9      	ldr	r1, [r7, #24]
 80010f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	2203      	movs	r2, #3
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0203 	and.w	r2, r3, #3
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001130:	2b00      	cmp	r3, #0
 8001132:	f000 80b4 	beq.w	800129e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b5f      	ldr	r3, [pc, #380]	; (80012b8 <HAL_GPIO_Init+0x308>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	4a5e      	ldr	r2, [pc, #376]	; (80012b8 <HAL_GPIO_Init+0x308>)
 8001140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001144:	6453      	str	r3, [r2, #68]	; 0x44
 8001146:	4b5c      	ldr	r3, [pc, #368]	; (80012b8 <HAL_GPIO_Init+0x308>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001152:	4a5a      	ldr	r2, [pc, #360]	; (80012bc <HAL_GPIO_Init+0x30c>)
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	089b      	lsrs	r3, r3, #2
 8001158:	3302      	adds	r3, #2
 800115a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	220f      	movs	r2, #15
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a51      	ldr	r2, [pc, #324]	; (80012c0 <HAL_GPIO_Init+0x310>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d02b      	beq.n	80011d6 <HAL_GPIO_Init+0x226>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a50      	ldr	r2, [pc, #320]	; (80012c4 <HAL_GPIO_Init+0x314>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d025      	beq.n	80011d2 <HAL_GPIO_Init+0x222>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4f      	ldr	r2, [pc, #316]	; (80012c8 <HAL_GPIO_Init+0x318>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d01f      	beq.n	80011ce <HAL_GPIO_Init+0x21e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4e      	ldr	r2, [pc, #312]	; (80012cc <HAL_GPIO_Init+0x31c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d019      	beq.n	80011ca <HAL_GPIO_Init+0x21a>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4d      	ldr	r2, [pc, #308]	; (80012d0 <HAL_GPIO_Init+0x320>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d013      	beq.n	80011c6 <HAL_GPIO_Init+0x216>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4c      	ldr	r2, [pc, #304]	; (80012d4 <HAL_GPIO_Init+0x324>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d00d      	beq.n	80011c2 <HAL_GPIO_Init+0x212>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4b      	ldr	r2, [pc, #300]	; (80012d8 <HAL_GPIO_Init+0x328>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d007      	beq.n	80011be <HAL_GPIO_Init+0x20e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4a      	ldr	r2, [pc, #296]	; (80012dc <HAL_GPIO_Init+0x32c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d101      	bne.n	80011ba <HAL_GPIO_Init+0x20a>
 80011b6:	2307      	movs	r3, #7
 80011b8:	e00e      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011ba:	2308      	movs	r3, #8
 80011bc:	e00c      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011be:	2306      	movs	r3, #6
 80011c0:	e00a      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011c2:	2305      	movs	r3, #5
 80011c4:	e008      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011c6:	2304      	movs	r3, #4
 80011c8:	e006      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011ca:	2303      	movs	r3, #3
 80011cc:	e004      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e002      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011d6:	2300      	movs	r3, #0
 80011d8:	69fa      	ldr	r2, [r7, #28]
 80011da:	f002 0203 	and.w	r2, r2, #3
 80011de:	0092      	lsls	r2, r2, #2
 80011e0:	4093      	lsls	r3, r2
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e8:	4934      	ldr	r1, [pc, #208]	; (80012bc <HAL_GPIO_Init+0x30c>)
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	3302      	adds	r3, #2
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f6:	4b3a      	ldr	r3, [pc, #232]	; (80012e0 <HAL_GPIO_Init+0x330>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800121a:	4a31      	ldr	r2, [pc, #196]	; (80012e0 <HAL_GPIO_Init+0x330>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001220:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <HAL_GPIO_Init+0x330>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001244:	4a26      	ldr	r2, [pc, #152]	; (80012e0 <HAL_GPIO_Init+0x330>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124a:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <HAL_GPIO_Init+0x330>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800126e:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <HAL_GPIO_Init+0x330>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <HAL_GPIO_Init+0x330>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001298:	4a11      	ldr	r2, [pc, #68]	; (80012e0 <HAL_GPIO_Init+0x330>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3301      	adds	r3, #1
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	2b0f      	cmp	r3, #15
 80012a8:	f67f ae90 	bls.w	8000fcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012ac:	bf00      	nop
 80012ae:	3724      	adds	r7, #36	; 0x24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40013800 	.word	0x40013800
 80012c0:	40020000 	.word	0x40020000
 80012c4:	40020400 	.word	0x40020400
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020c00 	.word	0x40020c00
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40021400 	.word	0x40021400
 80012d8:	40021800 	.word	0x40021800
 80012dc:	40021c00 	.word	0x40021c00
 80012e0:	40013c00 	.word	0x40013c00

080012e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691a      	ldr	r2, [r3, #16]
 80012f4:	887b      	ldrh	r3, [r7, #2]
 80012f6:	4013      	ands	r3, r2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d002      	beq.n	8001302 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012fc:	2301      	movs	r3, #1
 80012fe:	73fb      	strb	r3, [r7, #15]
 8001300:	e001      	b.n	8001306 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001306:	7bfb      	ldrb	r3, [r7, #15]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	807b      	strh	r3, [r7, #2]
 8001320:	4613      	mov	r3, r2
 8001322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001324:	787b      	ldrb	r3, [r7, #1]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800132a:	887a      	ldrh	r2, [r7, #2]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001330:	e003      	b.n	800133a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001332:	887b      	ldrh	r3, [r7, #2]
 8001334:	041a      	lsls	r2, r3, #16
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	619a      	str	r2, [r3, #24]
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001346:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001348:	b08f      	sub	sp, #60	; 0x3c
 800134a:	af0a      	add	r7, sp, #40	; 0x28
 800134c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d101      	bne.n	8001358 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e054      	b.n	8001402 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d106      	bne.n	8001378 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f007 fa1c 	bl	80087b0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2203      	movs	r2, #3
 800137c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001388:	2b00      	cmp	r3, #0
 800138a:	d102      	bne.n	8001392 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f003 ff6c 	bl	8005274 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	687e      	ldr	r6, [r7, #4]
 80013a4:	466d      	mov	r5, sp
 80013a6:	f106 0410 	add.w	r4, r6, #16
 80013aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80013ba:	1d33      	adds	r3, r6, #4
 80013bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013be:	6838      	ldr	r0, [r7, #0]
 80013c0:	f003 fee6 	bl	8005190 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2101      	movs	r1, #1
 80013ca:	4618      	mov	r0, r3
 80013cc:	f003 ff63 	bl	8005296 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	603b      	str	r3, [r7, #0]
 80013d6:	687e      	ldr	r6, [r7, #4]
 80013d8:	466d      	mov	r5, sp
 80013da:	f106 0410 	add.w	r4, r6, #16
 80013de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80013ee:	1d33      	adds	r3, r6, #4
 80013f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013f2:	6838      	ldr	r0, [r7, #0]
 80013f4:	f004 f876 	bl	80054e4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800140a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800140a:	b590      	push	{r4, r7, lr}
 800140c:	b089      	sub	sp, #36	; 0x24
 800140e:	af04      	add	r7, sp, #16
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	4608      	mov	r0, r1
 8001414:	4611      	mov	r1, r2
 8001416:	461a      	mov	r2, r3
 8001418:	4603      	mov	r3, r0
 800141a:	70fb      	strb	r3, [r7, #3]
 800141c:	460b      	mov	r3, r1
 800141e:	70bb      	strb	r3, [r7, #2]
 8001420:	4613      	mov	r3, r2
 8001422:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800142a:	2b01      	cmp	r3, #1
 800142c:	d101      	bne.n	8001432 <HAL_HCD_HC_Init+0x28>
 800142e:	2302      	movs	r3, #2
 8001430:	e07f      	b.n	8001532 <HAL_HCD_HC_Init+0x128>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2201      	movs	r2, #1
 8001436:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800143a:	78fa      	ldrb	r2, [r7, #3]
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	440b      	add	r3, r1
 8001448:	333d      	adds	r3, #61	; 0x3d
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800144e:	78fa      	ldrb	r2, [r7, #3]
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	440b      	add	r3, r1
 800145c:	3338      	adds	r3, #56	; 0x38
 800145e:	787a      	ldrb	r2, [r7, #1]
 8001460:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001462:	78fa      	ldrb	r2, [r7, #3]
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	4613      	mov	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	440b      	add	r3, r1
 8001470:	3340      	adds	r3, #64	; 0x40
 8001472:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001474:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001476:	78fa      	ldrb	r2, [r7, #3]
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	440b      	add	r3, r1
 8001484:	3339      	adds	r3, #57	; 0x39
 8001486:	78fa      	ldrb	r2, [r7, #3]
 8001488:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800148a:	78fa      	ldrb	r2, [r7, #3]
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	440b      	add	r3, r1
 8001498:	333f      	adds	r3, #63	; 0x3f
 800149a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800149e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80014a0:	78fa      	ldrb	r2, [r7, #3]
 80014a2:	78bb      	ldrb	r3, [r7, #2]
 80014a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014a8:	b2d8      	uxtb	r0, r3
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	440b      	add	r3, r1
 80014b6:	333a      	adds	r3, #58	; 0x3a
 80014b8:	4602      	mov	r2, r0
 80014ba:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80014bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	da0a      	bge.n	80014da <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80014c4:	78fa      	ldrb	r2, [r7, #3]
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	440b      	add	r3, r1
 80014d2:	333b      	adds	r3, #59	; 0x3b
 80014d4:	2201      	movs	r2, #1
 80014d6:	701a      	strb	r2, [r3, #0]
 80014d8:	e009      	b.n	80014ee <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80014da:	78fa      	ldrb	r2, [r7, #3]
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	440b      	add	r3, r1
 80014e8:	333b      	adds	r3, #59	; 0x3b
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80014ee:	78fa      	ldrb	r2, [r7, #3]
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	440b      	add	r3, r1
 80014fc:	333c      	adds	r3, #60	; 0x3c
 80014fe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001502:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6818      	ldr	r0, [r3, #0]
 8001508:	787c      	ldrb	r4, [r7, #1]
 800150a:	78ba      	ldrb	r2, [r7, #2]
 800150c:	78f9      	ldrb	r1, [r7, #3]
 800150e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001510:	9302      	str	r3, [sp, #8]
 8001512:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	f897 3020 	ldrb.w	r3, [r7, #32]
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	4623      	mov	r3, r4
 8001520:	f004 f962 	bl	80057e8 <USB_HC_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001530:	7bfb      	ldrb	r3, [r7, #15]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	bd90      	pop	{r4, r7, pc}

0800153a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	460b      	mov	r3, r1
 8001544:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001550:	2b01      	cmp	r3, #1
 8001552:	d101      	bne.n	8001558 <HAL_HCD_HC_Halt+0x1e>
 8001554:	2302      	movs	r3, #2
 8001556:	e00f      	b.n	8001578 <HAL_HCD_HC_Halt+0x3e>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	78fa      	ldrb	r2, [r7, #3]
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f004 fb9c 	bl	8005ca6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001576:	7bfb      	ldrb	r3, [r7, #15]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	4608      	mov	r0, r1
 800158a:	4611      	mov	r1, r2
 800158c:	461a      	mov	r2, r3
 800158e:	4603      	mov	r3, r0
 8001590:	70fb      	strb	r3, [r7, #3]
 8001592:	460b      	mov	r3, r1
 8001594:	70bb      	strb	r3, [r7, #2]
 8001596:	4613      	mov	r3, r2
 8001598:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800159a:	78fa      	ldrb	r2, [r7, #3]
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	440b      	add	r3, r1
 80015a8:	333b      	adds	r3, #59	; 0x3b
 80015aa:	78ba      	ldrb	r2, [r7, #2]
 80015ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80015ae:	78fa      	ldrb	r2, [r7, #3]
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	440b      	add	r3, r1
 80015bc:	333f      	adds	r3, #63	; 0x3f
 80015be:	787a      	ldrb	r2, [r7, #1]
 80015c0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80015c2:	7c3b      	ldrb	r3, [r7, #16]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10a      	bne.n	80015de <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80015c8:	78fa      	ldrb	r2, [r7, #3]
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	440b      	add	r3, r1
 80015d6:	3342      	adds	r3, #66	; 0x42
 80015d8:	2203      	movs	r2, #3
 80015da:	701a      	strb	r2, [r3, #0]
 80015dc:	e009      	b.n	80015f2 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015de:	78fa      	ldrb	r2, [r7, #3]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	440b      	add	r3, r1
 80015ec:	3342      	adds	r3, #66	; 0x42
 80015ee:	2202      	movs	r2, #2
 80015f0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80015f2:	787b      	ldrb	r3, [r7, #1]
 80015f4:	2b03      	cmp	r3, #3
 80015f6:	f200 80d6 	bhi.w	80017a6 <HAL_HCD_HC_SubmitRequest+0x226>
 80015fa:	a201      	add	r2, pc, #4	; (adr r2, 8001600 <HAL_HCD_HC_SubmitRequest+0x80>)
 80015fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001600:	08001611 	.word	0x08001611
 8001604:	08001791 	.word	0x08001791
 8001608:	0800167d 	.word	0x0800167d
 800160c:	08001707 	.word	0x08001707
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001610:	7c3b      	ldrb	r3, [r7, #16]
 8001612:	2b01      	cmp	r3, #1
 8001614:	f040 80c9 	bne.w	80017aa <HAL_HCD_HC_SubmitRequest+0x22a>
 8001618:	78bb      	ldrb	r3, [r7, #2]
 800161a:	2b00      	cmp	r3, #0
 800161c:	f040 80c5 	bne.w	80017aa <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001620:	8b3b      	ldrh	r3, [r7, #24]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d109      	bne.n	800163a <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001626:	78fa      	ldrb	r2, [r7, #3]
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	440b      	add	r3, r1
 8001634:	3351      	adds	r3, #81	; 0x51
 8001636:	2201      	movs	r2, #1
 8001638:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800163a:	78fa      	ldrb	r2, [r7, #3]
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	440b      	add	r3, r1
 8001648:	3351      	adds	r3, #81	; 0x51
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10a      	bne.n	8001666 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001650:	78fa      	ldrb	r2, [r7, #3]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	440b      	add	r3, r1
 800165e:	3342      	adds	r3, #66	; 0x42
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001664:	e0a1      	b.n	80017aa <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001666:	78fa      	ldrb	r2, [r7, #3]
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	440b      	add	r3, r1
 8001674:	3342      	adds	r3, #66	; 0x42
 8001676:	2202      	movs	r2, #2
 8001678:	701a      	strb	r2, [r3, #0]
      break;
 800167a:	e096      	b.n	80017aa <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800167c:	78bb      	ldrb	r3, [r7, #2]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d120      	bne.n	80016c4 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001682:	78fa      	ldrb	r2, [r7, #3]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	440b      	add	r3, r1
 8001690:	3351      	adds	r3, #81	; 0x51
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d10a      	bne.n	80016ae <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001698:	78fa      	ldrb	r2, [r7, #3]
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	440b      	add	r3, r1
 80016a6:	3342      	adds	r3, #66	; 0x42
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80016ac:	e07e      	b.n	80017ac <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016ae:	78fa      	ldrb	r2, [r7, #3]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	440b      	add	r3, r1
 80016bc:	3342      	adds	r3, #66	; 0x42
 80016be:	2202      	movs	r2, #2
 80016c0:	701a      	strb	r2, [r3, #0]
      break;
 80016c2:	e073      	b.n	80017ac <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80016c4:	78fa      	ldrb	r2, [r7, #3]
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	440b      	add	r3, r1
 80016d2:	3350      	adds	r3, #80	; 0x50
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10a      	bne.n	80016f0 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016da:	78fa      	ldrb	r2, [r7, #3]
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	440b      	add	r3, r1
 80016e8:	3342      	adds	r3, #66	; 0x42
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
      break;
 80016ee:	e05d      	b.n	80017ac <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016f0:	78fa      	ldrb	r2, [r7, #3]
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	440b      	add	r3, r1
 80016fe:	3342      	adds	r3, #66	; 0x42
 8001700:	2202      	movs	r2, #2
 8001702:	701a      	strb	r2, [r3, #0]
      break;
 8001704:	e052      	b.n	80017ac <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001706:	78bb      	ldrb	r3, [r7, #2]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d120      	bne.n	800174e <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800170c:	78fa      	ldrb	r2, [r7, #3]
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	440b      	add	r3, r1
 800171a:	3351      	adds	r3, #81	; 0x51
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10a      	bne.n	8001738 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001722:	78fa      	ldrb	r2, [r7, #3]
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	440b      	add	r3, r1
 8001730:	3342      	adds	r3, #66	; 0x42
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001736:	e039      	b.n	80017ac <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001738:	78fa      	ldrb	r2, [r7, #3]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	440b      	add	r3, r1
 8001746:	3342      	adds	r3, #66	; 0x42
 8001748:	2202      	movs	r2, #2
 800174a:	701a      	strb	r2, [r3, #0]
      break;
 800174c:	e02e      	b.n	80017ac <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800174e:	78fa      	ldrb	r2, [r7, #3]
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	440b      	add	r3, r1
 800175c:	3350      	adds	r3, #80	; 0x50
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10a      	bne.n	800177a <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001764:	78fa      	ldrb	r2, [r7, #3]
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	440b      	add	r3, r1
 8001772:	3342      	adds	r3, #66	; 0x42
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
      break;
 8001778:	e018      	b.n	80017ac <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800177a:	78fa      	ldrb	r2, [r7, #3]
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	440b      	add	r3, r1
 8001788:	3342      	adds	r3, #66	; 0x42
 800178a:	2202      	movs	r2, #2
 800178c:	701a      	strb	r2, [r3, #0]
      break;
 800178e:	e00d      	b.n	80017ac <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001790:	78fa      	ldrb	r2, [r7, #3]
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	440b      	add	r3, r1
 800179e:	3342      	adds	r3, #66	; 0x42
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
      break;
 80017a4:	e002      	b.n	80017ac <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80017a6:	bf00      	nop
 80017a8:	e000      	b.n	80017ac <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80017aa:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80017ac:	78fa      	ldrb	r2, [r7, #3]
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	440b      	add	r3, r1
 80017ba:	3344      	adds	r3, #68	; 0x44
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80017c0:	78fa      	ldrb	r2, [r7, #3]
 80017c2:	8b39      	ldrh	r1, [r7, #24]
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	4403      	add	r3, r0
 80017d0:	3348      	adds	r3, #72	; 0x48
 80017d2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80017d4:	78fa      	ldrb	r2, [r7, #3]
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	440b      	add	r3, r1
 80017e2:	335c      	adds	r3, #92	; 0x5c
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80017e8:	78fa      	ldrb	r2, [r7, #3]
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	440b      	add	r3, r1
 80017f6:	334c      	adds	r3, #76	; 0x4c
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017fc:	78fa      	ldrb	r2, [r7, #3]
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	440b      	add	r3, r1
 800180a:	3339      	adds	r3, #57	; 0x39
 800180c:	78fa      	ldrb	r2, [r7, #3]
 800180e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001810:	78fa      	ldrb	r2, [r7, #3]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	440b      	add	r3, r1
 800181e:	335d      	adds	r3, #93	; 0x5d
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6818      	ldr	r0, [r3, #0]
 8001828:	78fa      	ldrb	r2, [r7, #3]
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	3338      	adds	r3, #56	; 0x38
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	18d1      	adds	r1, r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	461a      	mov	r2, r3
 8001840:	f004 f8dc 	bl	80059fc <USB_HC_StartXfer>
 8001844:	4603      	mov	r3, r0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop

08001850 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f003 fdf9 	bl	800545e <USB_GetMode>
 800186c:	4603      	mov	r3, r0
 800186e:	2b01      	cmp	r3, #1
 8001870:	f040 80f1 	bne.w	8001a56 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f003 fddd 	bl	8005438 <USB_ReadInterrupts>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 80e7 	beq.w	8001a54 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f003 fdd4 	bl	8005438 <USB_ReadInterrupts>
 8001890:	4603      	mov	r3, r0
 8001892:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001896:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800189a:	d104      	bne.n	80018a6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f003 fdc4 	bl	8005438 <USB_ReadInterrupts>
 80018b0:	4603      	mov	r3, r0
 80018b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018ba:	d104      	bne.n	80018c6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f003 fdb4 	bl	8005438 <USB_ReadInterrupts>
 80018d0:	4603      	mov	r3, r0
 80018d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80018da:	d104      	bne.n	80018e6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f003 fda4 	bl	8005438 <USB_ReadInterrupts>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d103      	bne.n	8001902 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2202      	movs	r2, #2
 8001900:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f003 fd96 	bl	8005438 <USB_ReadInterrupts>
 800190c:	4603      	mov	r3, r0
 800190e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001916:	d117      	bne.n	8001948 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001926:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800192a:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f006 ffbd 	bl	80088ac <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2101      	movs	r1, #1
 8001938:	4618      	mov	r0, r3
 800193a:	f003 fe8f 	bl	800565c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001946:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f003 fd73 	bl	8005438 <USB_ReadInterrupts>
 8001952:	4603      	mov	r3, r0
 8001954:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800195c:	d102      	bne.n	8001964 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f001 f8c8 	bl	8002af4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f003 fd65 	bl	8005438 <USB_ReadInterrupts>
 800196e:	4603      	mov	r3, r0
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b08      	cmp	r3, #8
 8001976:	d106      	bne.n	8001986 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f006 ff7b 	bl	8008874 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2208      	movs	r2, #8
 8001984:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f003 fd54 	bl	8005438 <USB_ReadInterrupts>
 8001990:	4603      	mov	r3, r0
 8001992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001996:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800199a:	d138      	bne.n	8001a0e <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f004 f96f 	bl	8005c84 <USB_HC_ReadInterrupt>
 80019a6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	e025      	b.n	80019fa <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	68ba      	ldr	r2, [r7, #8]
 80019b6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d018      	beq.n	80019f4 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	015a      	lsls	r2, r3, #5
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4413      	add	r3, r2
 80019ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019d8:	d106      	bne.n	80019e8 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	4619      	mov	r1, r3
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 f8cf 	bl	8001b84 <HCD_HC_IN_IRQHandler>
 80019e6:	e005      	b.n	80019f4 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	4619      	mov	r1, r3
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 fc5f 	bl	80022b2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	3301      	adds	r3, #1
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d3d4      	bcc.n	80019ae <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f003 fd10 	bl	8005438 <USB_ReadInterrupts>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	2b10      	cmp	r3, #16
 8001a20:	d101      	bne.n	8001a26 <HAL_HCD_IRQHandler+0x1d6>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <HAL_HCD_IRQHandler+0x1d8>
 8001a26:	2300      	movs	r3, #0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d014      	beq.n	8001a56 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	699a      	ldr	r2, [r3, #24]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0210 	bic.w	r2, r2, #16
 8001a3a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 ffad 	bl	800299c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699a      	ldr	r2, [r3, #24]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f042 0210 	orr.w	r2, r2, #16
 8001a50:	619a      	str	r2, [r3, #24]
 8001a52:	e000      	b.n	8001a56 <HAL_HCD_IRQHandler+0x206>
      return;
 8001a54:	bf00      	nop
    }
  }
}
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d101      	bne.n	8001a72 <HAL_HCD_Start+0x16>
 8001a6e:	2302      	movs	r3, #2
 8001a70:	e013      	b.n	8001a9a <HAL_HCD_Start+0x3e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f003 fbe7 	bl	8005252 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2101      	movs	r1, #1
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f003 fe4a 	bl	8005724 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d101      	bne.n	8001ab8 <HAL_HCD_Stop+0x16>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	e00d      	b.n	8001ad4 <HAL_HCD_Stop+0x32>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f004 fa29 	bl	8005f1c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f003 fdf1 	bl	80056d0 <USB_ResetPort>
 8001aee:	4603      	mov	r3, r0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b04:	78fa      	ldrb	r2, [r7, #3]
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	440b      	add	r3, r1
 8001b12:	335c      	adds	r3, #92	; 0x5c
 8001b14:	781b      	ldrb	r3, [r3, #0]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b2e:	78fa      	ldrb	r2, [r7, #3]
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	440b      	add	r3, r1
 8001b3c:	334c      	adds	r3, #76	; 0x4c
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f003 fe33 	bl	80057c4 <USB_GetCurrentFrame>
 8001b5e:	4603      	mov	r3, r0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f003 fe0e 	bl	8005796 <USB_GetHostSpeed>
 8001b7a:	4603      	mov	r3, r0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	015a      	lsls	r2, r3, #5
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d119      	bne.n	8001be8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	015a      	lsls	r2, r3, #5
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4413      	add	r3, r2
 8001bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	015a      	lsls	r2, r3, #5
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4413      	add	r3, r2
 8001bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	0151      	lsls	r1, r2, #5
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	440a      	add	r2, r1
 8001bdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001be0:	f043 0302 	orr.w	r3, r3, #2
 8001be4:	60d3      	str	r3, [r2, #12]
 8001be6:	e095      	b.n	8001d14 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	015a      	lsls	r2, r3, #5
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4413      	add	r3, r2
 8001bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 0320 	and.w	r3, r3, #32
 8001bfa:	2b20      	cmp	r3, #32
 8001bfc:	d109      	bne.n	8001c12 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	015a      	lsls	r2, r3, #5
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	2320      	movs	r3, #32
 8001c0e:	6093      	str	r3, [r2, #8]
 8001c10:	e080      	b.n	8001d14 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	015a      	lsls	r2, r3, #5
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4413      	add	r3, r2
 8001c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d134      	bne.n	8001c92 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	015a      	lsls	r2, r3, #5
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4413      	add	r3, r2
 8001c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	0151      	lsls	r1, r2, #5
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	440a      	add	r2, r1
 8001c3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c42:	f043 0302 	orr.w	r3, r3, #2
 8001c46:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	440b      	add	r3, r1
 8001c56:	335d      	adds	r3, #93	; 0x5d
 8001c58:	2205      	movs	r2, #5
 8001c5a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	015a      	lsls	r2, r3, #5
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4413      	add	r3, r2
 8001c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c68:	461a      	mov	r2, r3
 8001c6a:	2310      	movs	r3, #16
 8001c6c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	015a      	lsls	r2, r3, #5
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4413      	add	r3, r2
 8001c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	2308      	movs	r3, #8
 8001c7e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	4611      	mov	r1, r2
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f004 f80b 	bl	8005ca6 <USB_HC_Halt>
 8001c90:	e040      	b.n	8001d14 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	015a      	lsls	r2, r3, #5
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4413      	add	r3, r2
 8001c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ca8:	d134      	bne.n	8001d14 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	015a      	lsls	r2, r3, #5
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	0151      	lsls	r1, r2, #5
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	440a      	add	r2, r1
 8001cc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cc4:	f043 0302 	orr.w	r3, r3, #2
 8001cc8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f003 ffe6 	bl	8005ca6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	015a      	lsls	r2, r3, #5
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	2310      	movs	r3, #16
 8001cea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	440b      	add	r3, r1
 8001cfa:	335d      	adds	r3, #93	; 0x5d
 8001cfc:	2208      	movs	r2, #8
 8001cfe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	015a      	lsls	r2, r3, #5
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4413      	add	r3, r2
 8001d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d12:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	015a      	lsls	r2, r3, #5
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d2a:	d122      	bne.n	8001d72 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	015a      	lsls	r2, r3, #5
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4413      	add	r3, r2
 8001d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	0151      	lsls	r1, r2, #5
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	440a      	add	r2, r1
 8001d42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d46:	f043 0302 	orr.w	r3, r3, #2
 8001d4a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	4611      	mov	r1, r2
 8001d56:	4618      	mov	r0, r3
 8001d58:	f003 ffa5 	bl	8005ca6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	015a      	lsls	r2, r3, #5
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4413      	add	r3, r2
 8001d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d68:	461a      	mov	r2, r3
 8001d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d6e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001d70:	e29b      	b.n	80022aa <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	015a      	lsls	r2, r3, #5
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	f040 80c1 	bne.w	8001f0c <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d01b      	beq.n	8001dca <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	440b      	add	r3, r1
 8001da0:	3348      	adds	r3, #72	; 0x48
 8001da2:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	0159      	lsls	r1, r3, #5
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	440b      	add	r3, r1
 8001dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001db6:	1ad1      	subs	r1, r2, r3
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4403      	add	r3, r0
 8001dc6:	334c      	adds	r3, #76	; 0x4c
 8001dc8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	440b      	add	r3, r1
 8001dd8:	335d      	adds	r3, #93	; 0x5d
 8001dda:	2201      	movs	r2, #1
 8001ddc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	440b      	add	r3, r1
 8001dec:	3358      	adds	r3, #88	; 0x58
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	015a      	lsls	r2, r3, #5
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4413      	add	r3, r2
 8001dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dfe:	461a      	mov	r2, r3
 8001e00:	2301      	movs	r3, #1
 8001e02:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	440b      	add	r3, r1
 8001e12:	333f      	adds	r3, #63	; 0x3f
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00a      	beq.n	8001e30 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	440b      	add	r3, r1
 8001e28:	333f      	adds	r3, #63	; 0x3f
 8001e2a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d121      	bne.n	8001e74 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	015a      	lsls	r2, r3, #5
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4413      	add	r3, r2
 8001e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	0151      	lsls	r1, r2, #5
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	440a      	add	r2, r1
 8001e46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e4a:	f043 0302 	orr.w	r3, r3, #2
 8001e4e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	4611      	mov	r1, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f003 ff23 	bl	8005ca6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	015a      	lsls	r2, r3, #5
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	2310      	movs	r3, #16
 8001e70:	6093      	str	r3, [r2, #8]
 8001e72:	e034      	b.n	8001ede <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	440b      	add	r3, r1
 8001e82:	333f      	adds	r3, #63	; 0x3f
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d129      	bne.n	8001ede <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	015a      	lsls	r2, r3, #5
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4413      	add	r3, r2
 8001e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	0151      	lsls	r1, r2, #5
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	440a      	add	r2, r1
 8001ea0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ea4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ea8:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	440b      	add	r3, r1
 8001eb8:	335c      	adds	r3, #92	; 0x5c
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	b2d8      	uxtb	r0, r3
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	440b      	add	r3, r1
 8001ed0:	335c      	adds	r3, #92	; 0x5c
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4601      	mov	r1, r0
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f006 fcf5 	bl	80088c8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	440b      	add	r3, r1
 8001eec:	3350      	adds	r3, #80	; 0x50
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	f083 0301 	eor.w	r3, r3, #1
 8001ef4:	b2d8      	uxtb	r0, r3
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	440b      	add	r3, r1
 8001f04:	3350      	adds	r3, #80	; 0x50
 8001f06:	4602      	mov	r2, r0
 8001f08:	701a      	strb	r2, [r3, #0]
}
 8001f0a:	e1ce      	b.n	80022aa <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	015a      	lsls	r2, r3, #5
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4413      	add	r3, r2
 8001f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	f040 80f1 	bne.w	8002106 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	015a      	lsls	r2, r3, #5
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	0151      	lsls	r1, r2, #5
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	440a      	add	r2, r1
 8001f3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f3e:	f023 0302 	bic.w	r3, r3, #2
 8001f42:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	440b      	add	r3, r1
 8001f52:	335d      	adds	r3, #93	; 0x5d
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d10a      	bne.n	8001f70 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	440b      	add	r3, r1
 8001f68:	335c      	adds	r3, #92	; 0x5c
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
 8001f6e:	e0b0      	b.n	80020d2 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4613      	mov	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	440b      	add	r3, r1
 8001f7e:	335d      	adds	r3, #93	; 0x5d
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b05      	cmp	r3, #5
 8001f84:	d10a      	bne.n	8001f9c <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	440b      	add	r3, r1
 8001f94:	335c      	adds	r3, #92	; 0x5c
 8001f96:	2205      	movs	r2, #5
 8001f98:	701a      	strb	r2, [r3, #0]
 8001f9a:	e09a      	b.n	80020d2 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	440b      	add	r3, r1
 8001faa:	335d      	adds	r3, #93	; 0x5d
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b06      	cmp	r3, #6
 8001fb0:	d00a      	beq.n	8001fc8 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	440b      	add	r3, r1
 8001fc0:	335d      	adds	r3, #93	; 0x5d
 8001fc2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d156      	bne.n	8002076 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	440b      	add	r3, r1
 8001fd6:	3358      	adds	r3, #88	; 0x58
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	1c59      	adds	r1, r3, #1
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4403      	add	r3, r0
 8001fea:	3358      	adds	r3, #88	; 0x58
 8001fec:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	440b      	add	r3, r1
 8001ffc:	3358      	adds	r3, #88	; 0x58
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b03      	cmp	r3, #3
 8002002:	d914      	bls.n	800202e <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	440b      	add	r3, r1
 8002012:	3358      	adds	r3, #88	; 0x58
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	440b      	add	r3, r1
 8002026:	335c      	adds	r3, #92	; 0x5c
 8002028:	2204      	movs	r2, #4
 800202a:	701a      	strb	r2, [r3, #0]
 800202c:	e009      	b.n	8002042 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	440b      	add	r3, r1
 800203c:	335c      	adds	r3, #92	; 0x5c
 800203e:	2202      	movs	r2, #2
 8002040:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	015a      	lsls	r2, r3, #5
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4413      	add	r3, r2
 800204a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002058:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002060:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4413      	add	r3, r2
 800206a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206e:	461a      	mov	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	e02d      	b.n	80020d2 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	440b      	add	r3, r1
 8002084:	335d      	adds	r3, #93	; 0x5d
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b03      	cmp	r3, #3
 800208a:	d122      	bne.n	80020d2 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	440b      	add	r3, r1
 800209a:	335c      	adds	r3, #92	; 0x5c
 800209c:	2202      	movs	r2, #2
 800209e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	015a      	lsls	r2, r3, #5
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020b6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020be:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	015a      	lsls	r2, r3, #5
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4413      	add	r3, r2
 80020c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020cc:	461a      	mov	r2, r3
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	015a      	lsls	r2, r3, #5
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4413      	add	r3, r2
 80020da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020de:	461a      	mov	r2, r3
 80020e0:	2302      	movs	r3, #2
 80020e2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	b2d8      	uxtb	r0, r3
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	440b      	add	r3, r1
 80020f6:	335c      	adds	r3, #92	; 0x5c
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	4601      	mov	r1, r0
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f006 fbe2 	bl	80088c8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002104:	e0d1      	b.n	80022aa <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	015a      	lsls	r2, r3, #5
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4413      	add	r3, r2
 800210e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002118:	2b80      	cmp	r3, #128	; 0x80
 800211a:	d13e      	bne.n	800219a <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	015a      	lsls	r2, r3, #5
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4413      	add	r3, r2
 8002124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	0151      	lsls	r1, r2, #5
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	440a      	add	r2, r1
 8002132:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002136:	f043 0302 	orr.w	r3, r3, #2
 800213a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	440b      	add	r3, r1
 800214a:	3358      	adds	r3, #88	; 0x58
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	1c59      	adds	r1, r3, #1
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4403      	add	r3, r0
 800215e:	3358      	adds	r3, #88	; 0x58
 8002160:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	440b      	add	r3, r1
 8002170:	335d      	adds	r3, #93	; 0x5d
 8002172:	2206      	movs	r2, #6
 8002174:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f003 fd90 	bl	8005ca6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4413      	add	r3, r2
 800218e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002192:	461a      	mov	r2, r3
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	6093      	str	r3, [r2, #8]
}
 8002198:	e087      	b.n	80022aa <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	2b10      	cmp	r3, #16
 80021ae:	d17c      	bne.n	80022aa <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	440b      	add	r3, r1
 80021be:	333f      	adds	r3, #63	; 0x3f
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	d122      	bne.n	800220c <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	440b      	add	r3, r1
 80021d4:	3358      	adds	r3, #88	; 0x58
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	0151      	lsls	r1, r2, #5
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	440a      	add	r2, r1
 80021f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021f4:	f043 0302 	orr.w	r3, r3, #2
 80021f8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	4611      	mov	r1, r2
 8002204:	4618      	mov	r0, r3
 8002206:	f003 fd4e 	bl	8005ca6 <USB_HC_Halt>
 800220a:	e045      	b.n	8002298 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	440b      	add	r3, r1
 800221a:	333f      	adds	r3, #63	; 0x3f
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00a      	beq.n	8002238 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	440b      	add	r3, r1
 8002230:	333f      	adds	r3, #63	; 0x3f
 8002232:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002234:	2b02      	cmp	r3, #2
 8002236:	d12f      	bne.n	8002298 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	440b      	add	r3, r1
 8002246:	3358      	adds	r3, #88	; 0x58
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d121      	bne.n	8002298 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	440b      	add	r3, r1
 8002262:	335d      	adds	r3, #93	; 0x5d
 8002264:	2203      	movs	r2, #3
 8002266:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4413      	add	r3, r2
 8002270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	0151      	lsls	r1, r2, #5
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	440a      	add	r2, r1
 800227e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002282:	f043 0302 	orr.w	r3, r3, #2
 8002286:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	4611      	mov	r1, r2
 8002292:	4618      	mov	r0, r3
 8002294:	f003 fd07 	bl	8005ca6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a4:	461a      	mov	r2, r3
 80022a6:	2310      	movs	r3, #16
 80022a8:	6093      	str	r3, [r2, #8]
}
 80022aa:	bf00      	nop
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b086      	sub	sp, #24
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	460b      	mov	r3, r1
 80022bc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	015a      	lsls	r2, r3, #5
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d119      	bne.n	8002316 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ee:	461a      	mov	r2, r3
 80022f0:	2304      	movs	r3, #4
 80022f2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	0151      	lsls	r1, r2, #5
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	440a      	add	r2, r1
 800230a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800230e:	f043 0302 	orr.w	r3, r3, #2
 8002312:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002314:	e33e      	b.n	8002994 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 0320 	and.w	r3, r3, #32
 8002328:	2b20      	cmp	r3, #32
 800232a:	d141      	bne.n	80023b0 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4413      	add	r3, r2
 8002334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002338:	461a      	mov	r2, r3
 800233a:	2320      	movs	r3, #32
 800233c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	440b      	add	r3, r1
 800234c:	333d      	adds	r3, #61	; 0x3d
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b01      	cmp	r3, #1
 8002352:	f040 831f 	bne.w	8002994 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	4613      	mov	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	440b      	add	r3, r1
 8002364:	333d      	adds	r3, #61	; 0x3d
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	440b      	add	r3, r1
 8002378:	335c      	adds	r3, #92	; 0x5c
 800237a:	2202      	movs	r2, #2
 800237c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	015a      	lsls	r2, r3, #5
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4413      	add	r3, r2
 8002386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	0151      	lsls	r1, r2, #5
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	440a      	add	r2, r1
 8002394:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002398:	f043 0302 	orr.w	r3, r3, #2
 800239c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f003 fc7c 	bl	8005ca6 <USB_HC_Halt>
}
 80023ae:	e2f1      	b.n	8002994 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c2:	2b40      	cmp	r3, #64	; 0x40
 80023c4:	d13f      	bne.n	8002446 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	440b      	add	r3, r1
 80023d4:	335d      	adds	r3, #93	; 0x5d
 80023d6:	2204      	movs	r2, #4
 80023d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	4613      	mov	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	440b      	add	r3, r1
 80023e8:	333d      	adds	r3, #61	; 0x3d
 80023ea:	2201      	movs	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	440b      	add	r3, r1
 80023fc:	3358      	adds	r3, #88	; 0x58
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	015a      	lsls	r2, r3, #5
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4413      	add	r3, r2
 800240a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	0151      	lsls	r1, r2, #5
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	440a      	add	r2, r1
 8002418:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800241c:	f043 0302 	orr.w	r3, r3, #2
 8002420:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f003 fc3a 	bl	8005ca6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4413      	add	r3, r2
 800243a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243e:	461a      	mov	r2, r3
 8002440:	2340      	movs	r3, #64	; 0x40
 8002442:	6093      	str	r3, [r2, #8]
}
 8002444:	e2a6      	b.n	8002994 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	015a      	lsls	r2, r3, #5
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4413      	add	r3, r2
 800244e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800245c:	d122      	bne.n	80024a4 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	015a      	lsls	r2, r3, #5
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4413      	add	r3, r2
 8002466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	0151      	lsls	r1, r2, #5
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	440a      	add	r2, r1
 8002474:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002478:	f043 0302 	orr.w	r3, r3, #2
 800247c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f003 fc0c 	bl	8005ca6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	015a      	lsls	r2, r3, #5
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4413      	add	r3, r2
 8002496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249a:	461a      	mov	r2, r3
 800249c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024a0:	6093      	str	r3, [r2, #8]
}
 80024a2:	e277      	b.n	8002994 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d135      	bne.n	8002526 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	440b      	add	r3, r1
 80024c8:	3358      	adds	r3, #88	; 0x58
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	0151      	lsls	r1, r2, #5
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	440a      	add	r2, r1
 80024e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f003 fbd4 	bl	8005ca6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4413      	add	r3, r2
 8002506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250a:	461a      	mov	r2, r3
 800250c:	2301      	movs	r3, #1
 800250e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	440b      	add	r3, r1
 800251e:	335d      	adds	r3, #93	; 0x5d
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
}
 8002524:	e236      	b.n	8002994 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	015a      	lsls	r2, r3, #5
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4413      	add	r3, r2
 800252e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b08      	cmp	r3, #8
 800253a:	d12b      	bne.n	8002594 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4413      	add	r3, r2
 8002544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002548:	461a      	mov	r2, r3
 800254a:	2308      	movs	r3, #8
 800254c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	015a      	lsls	r2, r3, #5
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4413      	add	r3, r2
 8002556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	0151      	lsls	r1, r2, #5
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	440a      	add	r2, r1
 8002564:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002568:	f043 0302 	orr.w	r3, r3, #2
 800256c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	4611      	mov	r1, r2
 8002578:	4618      	mov	r0, r3
 800257a:	f003 fb94 	bl	8005ca6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	440b      	add	r3, r1
 800258c:	335d      	adds	r3, #93	; 0x5d
 800258e:	2205      	movs	r2, #5
 8002590:	701a      	strb	r2, [r3, #0]
}
 8002592:	e1ff      	b.n	8002994 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4413      	add	r3, r2
 800259c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	2b10      	cmp	r3, #16
 80025a8:	d155      	bne.n	8002656 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	440b      	add	r3, r1
 80025b8:	3358      	adds	r3, #88	; 0x58
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4613      	mov	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	440b      	add	r3, r1
 80025cc:	335d      	adds	r3, #93	; 0x5d
 80025ce:	2203      	movs	r2, #3
 80025d0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	440b      	add	r3, r1
 80025e0:	333d      	adds	r3, #61	; 0x3d
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d114      	bne.n	8002612 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	440b      	add	r3, r1
 80025f6:	333c      	adds	r3, #60	; 0x3c
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d109      	bne.n	8002612 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	4613      	mov	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	440b      	add	r3, r1
 800260c:	333d      	adds	r3, #61	; 0x3d
 800260e:	2201      	movs	r2, #1
 8002610:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	015a      	lsls	r2, r3, #5
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4413      	add	r3, r2
 800261a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	0151      	lsls	r1, r2, #5
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	440a      	add	r2, r1
 8002628:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800262c:	f043 0302 	orr.w	r3, r3, #2
 8002630:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	4611      	mov	r1, r2
 800263c:	4618      	mov	r0, r3
 800263e:	f003 fb32 	bl	8005ca6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4413      	add	r3, r2
 800264a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264e:	461a      	mov	r2, r3
 8002650:	2310      	movs	r3, #16
 8002652:	6093      	str	r3, [r2, #8]
}
 8002654:	e19e      	b.n	8002994 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	015a      	lsls	r2, r3, #5
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4413      	add	r3, r2
 800265e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002668:	2b80      	cmp	r3, #128	; 0x80
 800266a:	d12b      	bne.n	80026c4 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4413      	add	r3, r2
 8002674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	0151      	lsls	r1, r2, #5
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	440a      	add	r2, r1
 8002682:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002686:	f043 0302 	orr.w	r3, r3, #2
 800268a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f003 fb05 	bl	8005ca6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	440b      	add	r3, r1
 80026aa:	335d      	adds	r3, #93	; 0x5d
 80026ac:	2206      	movs	r2, #6
 80026ae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026bc:	461a      	mov	r2, r3
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	6093      	str	r3, [r2, #8]
}
 80026c2:	e167      	b.n	8002994 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	015a      	lsls	r2, r3, #5
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026da:	d135      	bne.n	8002748 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	0151      	lsls	r1, r2, #5
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	440a      	add	r2, r1
 80026f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026f6:	f043 0302 	orr.w	r3, r3, #2
 80026fa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	4611      	mov	r1, r2
 8002706:	4618      	mov	r0, r3
 8002708:	f003 facd 	bl	8005ca6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	4413      	add	r3, r2
 8002714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002718:	461a      	mov	r2, r3
 800271a:	2310      	movs	r3, #16
 800271c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	015a      	lsls	r2, r3, #5
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4413      	add	r3, r2
 8002726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272a:	461a      	mov	r2, r3
 800272c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002730:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	440b      	add	r3, r1
 8002740:	335d      	adds	r3, #93	; 0x5d
 8002742:	2208      	movs	r2, #8
 8002744:	701a      	strb	r2, [r3, #0]
}
 8002746:	e125      	b.n	8002994 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b02      	cmp	r3, #2
 800275c:	f040 811a 	bne.w	8002994 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	0151      	lsls	r1, r2, #5
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	440a      	add	r2, r1
 8002776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800277a:	f023 0302 	bic.w	r3, r3, #2
 800277e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	440b      	add	r3, r1
 800278e:	335d      	adds	r3, #93	; 0x5d
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d137      	bne.n	8002806 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	440b      	add	r3, r1
 80027a4:	335c      	adds	r3, #92	; 0x5c
 80027a6:	2201      	movs	r2, #1
 80027a8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	440b      	add	r3, r1
 80027b8:	333f      	adds	r3, #63	; 0x3f
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d00b      	beq.n	80027d8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	440b      	add	r3, r1
 80027ce:	333f      	adds	r3, #63	; 0x3f
 80027d0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	f040 80c5 	bne.w	8002962 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	440b      	add	r3, r1
 80027e6:	3351      	adds	r3, #81	; 0x51
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	f083 0301 	eor.w	r3, r3, #1
 80027ee:	b2d8      	uxtb	r0, r3
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	440b      	add	r3, r1
 80027fe:	3351      	adds	r3, #81	; 0x51
 8002800:	4602      	mov	r2, r0
 8002802:	701a      	strb	r2, [r3, #0]
 8002804:	e0ad      	b.n	8002962 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	440b      	add	r3, r1
 8002814:	335d      	adds	r3, #93	; 0x5d
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b03      	cmp	r3, #3
 800281a:	d10a      	bne.n	8002832 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	440b      	add	r3, r1
 800282a:	335c      	adds	r3, #92	; 0x5c
 800282c:	2202      	movs	r2, #2
 800282e:	701a      	strb	r2, [r3, #0]
 8002830:	e097      	b.n	8002962 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	440b      	add	r3, r1
 8002840:	335d      	adds	r3, #93	; 0x5d
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b04      	cmp	r3, #4
 8002846:	d10a      	bne.n	800285e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	440b      	add	r3, r1
 8002856:	335c      	adds	r3, #92	; 0x5c
 8002858:	2202      	movs	r2, #2
 800285a:	701a      	strb	r2, [r3, #0]
 800285c:	e081      	b.n	8002962 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	4613      	mov	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	440b      	add	r3, r1
 800286c:	335d      	adds	r3, #93	; 0x5d
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b05      	cmp	r3, #5
 8002872:	d10a      	bne.n	800288a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	440b      	add	r3, r1
 8002882:	335c      	adds	r3, #92	; 0x5c
 8002884:	2205      	movs	r2, #5
 8002886:	701a      	strb	r2, [r3, #0]
 8002888:	e06b      	b.n	8002962 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	440b      	add	r3, r1
 8002898:	335d      	adds	r3, #93	; 0x5d
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b06      	cmp	r3, #6
 800289e:	d00a      	beq.n	80028b6 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4613      	mov	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	440b      	add	r3, r1
 80028ae:	335d      	adds	r3, #93	; 0x5d
 80028b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d155      	bne.n	8002962 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	440b      	add	r3, r1
 80028c4:	3358      	adds	r3, #88	; 0x58
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	1c59      	adds	r1, r3, #1
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4403      	add	r3, r0
 80028d8:	3358      	adds	r3, #88	; 0x58
 80028da:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	440b      	add	r3, r1
 80028ea:	3358      	adds	r3, #88	; 0x58
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	d914      	bls.n	800291c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	440b      	add	r3, r1
 8002900:	3358      	adds	r3, #88	; 0x58
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	440b      	add	r3, r1
 8002914:	335c      	adds	r3, #92	; 0x5c
 8002916:	2204      	movs	r2, #4
 8002918:	701a      	strb	r2, [r3, #0]
 800291a:	e009      	b.n	8002930 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	440b      	add	r3, r1
 800292a:	335c      	adds	r3, #92	; 0x5c
 800292c:	2202      	movs	r2, #2
 800292e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	4413      	add	r3, r2
 8002938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002946:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800294e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4413      	add	r3, r2
 8002958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295c:	461a      	mov	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	015a      	lsls	r2, r3, #5
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	4413      	add	r3, r2
 800296a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296e:	461a      	mov	r2, r3
 8002970:	2302      	movs	r3, #2
 8002972:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	b2d8      	uxtb	r0, r3
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	440b      	add	r3, r1
 8002986:	335c      	adds	r3, #92	; 0x5c
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	4601      	mov	r1, r0
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f005 ff9a 	bl	80088c8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002994:	bf00      	nop
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08a      	sub	sp, #40	; 0x28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	f003 030f 	and.w	r3, r3, #15
 80029bc:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	0c5b      	lsrs	r3, r3, #17
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	091b      	lsrs	r3, r3, #4
 80029cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029d0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d003      	beq.n	80029e0 <HCD_RXQLVL_IRQHandler+0x44>
 80029d8:	2b05      	cmp	r3, #5
 80029da:	f000 8082 	beq.w	8002ae2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80029de:	e083      	b.n	8002ae8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d07f      	beq.n	8002ae6 <HCD_RXQLVL_IRQHandler+0x14a>
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	440b      	add	r3, r1
 80029f4:	3344      	adds	r3, #68	; 0x44
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d074      	beq.n	8002ae6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	440b      	add	r3, r1
 8002a0e:	3344      	adds	r3, #68	; 0x44
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	b292      	uxth	r2, r2
 8002a16:	4619      	mov	r1, r3
 8002a18:	f002 fce5 	bl	80053e6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	440b      	add	r3, r1
 8002a2a:	3344      	adds	r3, #68	; 0x44
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	18d1      	adds	r1, r2, r3
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4403      	add	r3, r0
 8002a40:	3344      	adds	r3, #68	; 0x44
 8002a42:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	440b      	add	r3, r1
 8002a52:	334c      	adds	r3, #76	; 0x4c
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	18d1      	adds	r1, r2, r3
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4403      	add	r3, r0
 8002a68:	334c      	adds	r3, #76	; 0x4c
 8002a6a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <HCD_RXQLVL_IRQHandler+0x154>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d031      	beq.n	8002ae6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a98:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002aa0:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	440b      	add	r3, r1
 8002ac2:	3350      	adds	r3, #80	; 0x50
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	f083 0301 	eor.w	r3, r3, #1
 8002aca:	b2d8      	uxtb	r0, r3
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	440b      	add	r3, r1
 8002ada:	3350      	adds	r3, #80	; 0x50
 8002adc:	4602      	mov	r2, r0
 8002ade:	701a      	strb	r2, [r3, #0]
      break;
 8002ae0:	e001      	b.n	8002ae6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002ae2:	bf00      	nop
 8002ae4:	e000      	b.n	8002ae8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002ae6:	bf00      	nop
  }
}
 8002ae8:	bf00      	nop
 8002aea:	3728      	adds	r7, #40	; 0x28
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	1ff80000 	.word	0x1ff80000

08002af4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b20:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d113      	bne.n	8002b54 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d10a      	bne.n	8002b4c <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699a      	ldr	r2, [r3, #24]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002b44:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f005 fea2 	bl	8008890 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f043 0302 	orr.w	r3, r3, #2
 8002b52:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d147      	bne.n	8002bee <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	f043 0308 	orr.w	r3, r3, #8
 8002b64:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d129      	bne.n	8002bc4 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d113      	bne.n	8002ba0 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002b7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b82:	d106      	bne.n	8002b92 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2102      	movs	r1, #2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f002 fd66 	bl	800565c <USB_InitFSLSPClkSel>
 8002b90:	e011      	b.n	8002bb6 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2101      	movs	r1, #1
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f002 fd5f 	bl	800565c <USB_InitFSLSPClkSel>
 8002b9e:	e00a      	b.n	8002bb6 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d106      	bne.n	8002bb6 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002bb4:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f005 fe94 	bl	80088e4 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f005 fe67 	bl	8008890 <HAL_HCD_Connect_Callback>
 8002bc2:	e014      	b.n	8002bee <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f005 fe9b 	bl	8008900 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002bd8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002bdc:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699a      	ldr	r2, [r3, #24]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002bec:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f003 0320 	and.w	r3, r3, #32
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	d103      	bne.n	8002c00 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f043 0320 	orr.w	r3, r3, #32
 8002bfe:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c06:	461a      	mov	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	6013      	str	r3, [r2, #0]
}
 8002c0c:	bf00      	nop
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e11f      	b.n	8002e66 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d106      	bne.n	8002c40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f005 fb66 	bl	800830c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2224      	movs	r2, #36	; 0x24
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0201 	bic.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c78:	f001 f9de 	bl	8004038 <HAL_RCC_GetPCLK1Freq>
 8002c7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	4a7b      	ldr	r2, [pc, #492]	; (8002e70 <HAL_I2C_Init+0x25c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d807      	bhi.n	8002c98 <HAL_I2C_Init+0x84>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4a7a      	ldr	r2, [pc, #488]	; (8002e74 <HAL_I2C_Init+0x260>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	bf94      	ite	ls
 8002c90:	2301      	movls	r3, #1
 8002c92:	2300      	movhi	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	e006      	b.n	8002ca6 <HAL_I2C_Init+0x92>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4a77      	ldr	r2, [pc, #476]	; (8002e78 <HAL_I2C_Init+0x264>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	bf94      	ite	ls
 8002ca0:	2301      	movls	r3, #1
 8002ca2:	2300      	movhi	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e0db      	b.n	8002e66 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4a72      	ldr	r2, [pc, #456]	; (8002e7c <HAL_I2C_Init+0x268>)
 8002cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb6:	0c9b      	lsrs	r3, r3, #18
 8002cb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	4a64      	ldr	r2, [pc, #400]	; (8002e70 <HAL_I2C_Init+0x25c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d802      	bhi.n	8002ce8 <HAL_I2C_Init+0xd4>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	e009      	b.n	8002cfc <HAL_I2C_Init+0xe8>
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cee:	fb02 f303 	mul.w	r3, r2, r3
 8002cf2:	4a63      	ldr	r2, [pc, #396]	; (8002e80 <HAL_I2C_Init+0x26c>)
 8002cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	430b      	orrs	r3, r1
 8002d02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	4956      	ldr	r1, [pc, #344]	; (8002e70 <HAL_I2C_Init+0x25c>)
 8002d18:	428b      	cmp	r3, r1
 8002d1a:	d80d      	bhi.n	8002d38 <HAL_I2C_Init+0x124>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	1e59      	subs	r1, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	bf38      	it	cc
 8002d34:	2304      	movcc	r3, #4
 8002d36:	e04f      	b.n	8002dd8 <HAL_I2C_Init+0x1c4>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d111      	bne.n	8002d64 <HAL_I2C_Init+0x150>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	1e58      	subs	r0, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6859      	ldr	r1, [r3, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	440b      	add	r3, r1
 8002d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d52:	3301      	adds	r3, #1
 8002d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	bf0c      	ite	eq
 8002d5c:	2301      	moveq	r3, #1
 8002d5e:	2300      	movne	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	e012      	b.n	8002d8a <HAL_I2C_Init+0x176>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1e58      	subs	r0, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6859      	ldr	r1, [r3, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	0099      	lsls	r1, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	bf0c      	ite	eq
 8002d84:	2301      	moveq	r3, #1
 8002d86:	2300      	movne	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_I2C_Init+0x17e>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e022      	b.n	8002dd8 <HAL_I2C_Init+0x1c4>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10e      	bne.n	8002db8 <HAL_I2C_Init+0x1a4>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	1e58      	subs	r0, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6859      	ldr	r1, [r3, #4]
 8002da2:	460b      	mov	r3, r1
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	440b      	add	r3, r1
 8002da8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dac:	3301      	adds	r3, #1
 8002dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002db6:	e00f      	b.n	8002dd8 <HAL_I2C_Init+0x1c4>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	1e58      	subs	r0, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6859      	ldr	r1, [r3, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	0099      	lsls	r1, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dce:	3301      	adds	r3, #1
 8002dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	6809      	ldr	r1, [r1, #0]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69da      	ldr	r2, [r3, #28]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6911      	ldr	r1, [r2, #16]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68d2      	ldr	r2, [r2, #12]
 8002e12:	4311      	orrs	r1, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	000186a0 	.word	0x000186a0
 8002e74:	001e847f 	.word	0x001e847f
 8002e78:	003d08ff 	.word	0x003d08ff
 8002e7c:	431bde83 	.word	0x431bde83
 8002e80:	10624dd3 	.word	0x10624dd3

08002e84 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e128      	b.n	80030e8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d109      	bne.n	8002eb6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a90      	ldr	r2, [pc, #576]	; (80030f0 <HAL_I2S_Init+0x26c>)
 8002eae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f005 fa73 	bl	800839c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2202      	movs	r2, #2
 8002eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002ecc:	f023 030f 	bic.w	r3, r3, #15
 8002ed0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d060      	beq.n	8002fa4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d102      	bne.n	8002ef0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002eea:	2310      	movs	r3, #16
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	e001      	b.n	8002ef4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002ef0:	2320      	movs	r3, #32
 8002ef2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d802      	bhi.n	8002f02 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002f02:	2001      	movs	r0, #1
 8002f04:	f001 f98e 	bl	8004224 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f08:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f12:	d125      	bne.n	8002f60 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d010      	beq.n	8002f3e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	461a      	mov	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f38:	3305      	adds	r3, #5
 8002f3a:	613b      	str	r3, [r7, #16]
 8002f3c:	e01f      	b.n	8002f7e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f48:	4613      	mov	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	461a      	mov	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5a:	3305      	adds	r3, #5
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	e00e      	b.n	8002f7e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	461a      	mov	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7a:	3305      	adds	r3, #5
 8002f7c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4a5c      	ldr	r2, [pc, #368]	; (80030f4 <HAL_I2S_Init+0x270>)
 8002f82:	fba2 2303 	umull	r2, r3, r2, r3
 8002f86:	08db      	lsrs	r3, r3, #3
 8002f88:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	085b      	lsrs	r3, r3, #1
 8002f9a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	021b      	lsls	r3, r3, #8
 8002fa0:	61bb      	str	r3, [r7, #24]
 8002fa2:	e003      	b.n	8002fac <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d902      	bls.n	8002fb8 <HAL_I2S_Init+0x134>
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	2bff      	cmp	r3, #255	; 0xff
 8002fb6:	d907      	bls.n	8002fc8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbc:	f043 0210 	orr.w	r2, r3, #16
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e08f      	b.n	80030e8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	ea42 0103 	orr.w	r1, r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	69fa      	ldr	r2, [r7, #28]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002fe6:	f023 030f 	bic.w	r3, r3, #15
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6851      	ldr	r1, [r2, #4]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6892      	ldr	r2, [r2, #8]
 8002ff2:	4311      	orrs	r1, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	68d2      	ldr	r2, [r2, #12]
 8002ff8:	4311      	orrs	r1, r2
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6992      	ldr	r2, [r2, #24]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800300a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d161      	bne.n	80030d8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a38      	ldr	r2, [pc, #224]	; (80030f8 <HAL_I2S_Init+0x274>)
 8003018:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a37      	ldr	r2, [pc, #220]	; (80030fc <HAL_I2S_Init+0x278>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d101      	bne.n	8003028 <HAL_I2S_Init+0x1a4>
 8003024:	4b36      	ldr	r3, [pc, #216]	; (8003100 <HAL_I2S_Init+0x27c>)
 8003026:	e001      	b.n	800302c <HAL_I2S_Init+0x1a8>
 8003028:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6812      	ldr	r2, [r2, #0]
 8003032:	4932      	ldr	r1, [pc, #200]	; (80030fc <HAL_I2S_Init+0x278>)
 8003034:	428a      	cmp	r2, r1
 8003036:	d101      	bne.n	800303c <HAL_I2S_Init+0x1b8>
 8003038:	4a31      	ldr	r2, [pc, #196]	; (8003100 <HAL_I2S_Init+0x27c>)
 800303a:	e001      	b.n	8003040 <HAL_I2S_Init+0x1bc>
 800303c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003040:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003044:	f023 030f 	bic.w	r3, r3, #15
 8003048:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a2b      	ldr	r2, [pc, #172]	; (80030fc <HAL_I2S_Init+0x278>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d101      	bne.n	8003058 <HAL_I2S_Init+0x1d4>
 8003054:	4b2a      	ldr	r3, [pc, #168]	; (8003100 <HAL_I2S_Init+0x27c>)
 8003056:	e001      	b.n	800305c <HAL_I2S_Init+0x1d8>
 8003058:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800305c:	2202      	movs	r2, #2
 800305e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a25      	ldr	r2, [pc, #148]	; (80030fc <HAL_I2S_Init+0x278>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d101      	bne.n	800306e <HAL_I2S_Init+0x1ea>
 800306a:	4b25      	ldr	r3, [pc, #148]	; (8003100 <HAL_I2S_Init+0x27c>)
 800306c:	e001      	b.n	8003072 <HAL_I2S_Init+0x1ee>
 800306e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800307e:	d003      	beq.n	8003088 <HAL_I2S_Init+0x204>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d103      	bne.n	8003090 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003088:	f44f 7380 	mov.w	r3, #256	; 0x100
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	e001      	b.n	8003094 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003090:	2300      	movs	r3, #0
 8003092:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	b299      	uxth	r1, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80030aa:	4303      	orrs	r3, r0
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	430b      	orrs	r3, r1
 80030b0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80030b2:	4313      	orrs	r3, r2
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	897b      	ldrh	r3, [r7, #10]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030c0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a0d      	ldr	r2, [pc, #52]	; (80030fc <HAL_I2S_Init+0x278>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d101      	bne.n	80030d0 <HAL_I2S_Init+0x24c>
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <HAL_I2S_Init+0x27c>)
 80030ce:	e001      	b.n	80030d4 <HAL_I2S_Init+0x250>
 80030d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030d4:	897a      	ldrh	r2, [r7, #10]
 80030d6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3720      	adds	r7, #32
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	080031fb 	.word	0x080031fb
 80030f4:	cccccccd 	.word	0xcccccccd
 80030f8:	08003311 	.word	0x08003311
 80030fc:	40003800 	.word	0x40003800
 8003100:	40003400 	.word	0x40003400

08003104 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	881a      	ldrh	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	1c9a      	adds	r2, r3, #2
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10e      	bne.n	8003194 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003184:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff ffb8 	bl	8003104 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	b292      	uxth	r2, r2
 80031b0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b6:	1c9a      	adds	r2, r3, #2
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10e      	bne.n	80031f2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031e2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7ff ff93 	bl	8003118 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b086      	sub	sp, #24
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b04      	cmp	r3, #4
 8003214:	d13a      	bne.n	800328c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b01      	cmp	r3, #1
 800321e:	d109      	bne.n	8003234 <I2S_IRQHandler+0x3a>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322a:	2b40      	cmp	r3, #64	; 0x40
 800322c:	d102      	bne.n	8003234 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7ff ffb4 	bl	800319c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323a:	2b40      	cmp	r3, #64	; 0x40
 800323c:	d126      	bne.n	800328c <I2S_IRQHandler+0x92>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b20      	cmp	r3, #32
 800324a:	d11f      	bne.n	800328c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800325a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800325c:	2300      	movs	r3, #0
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	f043 0202 	orr.w	r2, r3, #2
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff ff50 	bl	800312c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b03      	cmp	r3, #3
 8003296:	d136      	bne.n	8003306 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d109      	bne.n	80032b6 <I2S_IRQHandler+0xbc>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ac:	2b80      	cmp	r3, #128	; 0x80
 80032ae:	d102      	bne.n	80032b6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff ff45 	bl	8003140 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d122      	bne.n	8003306 <I2S_IRQHandler+0x10c>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b20      	cmp	r3, #32
 80032cc:	d11b      	bne.n	8003306 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032dc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f8:	f043 0204 	orr.w	r2, r3, #4
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff ff13 	bl	800312c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003306:	bf00      	nop
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4aa2      	ldr	r2, [pc, #648]	; (80035b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d101      	bne.n	800332e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800332a:	4ba2      	ldr	r3, [pc, #648]	; (80035b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800332c:	e001      	b.n	8003332 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800332e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a9b      	ldr	r2, [pc, #620]	; (80035b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d101      	bne.n	800334c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003348:	4b9a      	ldr	r3, [pc, #616]	; (80035b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800334a:	e001      	b.n	8003350 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800334c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800335c:	d004      	beq.n	8003368 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	f040 8099 	bne.w	800349a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b02      	cmp	r3, #2
 8003370:	d107      	bne.n	8003382 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f925 	bl	80035cc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b01      	cmp	r3, #1
 800338a:	d107      	bne.n	800339c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f9c8 	bl	800372c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a2:	2b40      	cmp	r3, #64	; 0x40
 80033a4:	d13a      	bne.n	800341c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d035      	beq.n	800341c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a7e      	ldr	r2, [pc, #504]	; (80035b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d101      	bne.n	80033be <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80033ba:	4b7e      	ldr	r3, [pc, #504]	; (80035b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033bc:	e001      	b.n	80033c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80033be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4979      	ldr	r1, [pc, #484]	; (80035b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033ca:	428b      	cmp	r3, r1
 80033cc:	d101      	bne.n	80033d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80033ce:	4b79      	ldr	r3, [pc, #484]	; (80035b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033d0:	e001      	b.n	80033d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80033d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033da:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	f043 0202 	orr.w	r2, r3, #2
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff fe88 	bl	800312c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b08      	cmp	r3, #8
 8003424:	f040 80be 	bne.w	80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 80b8 	beq.w	80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003442:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a59      	ldr	r2, [pc, #356]	; (80035b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d101      	bne.n	8003452 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800344e:	4b59      	ldr	r3, [pc, #356]	; (80035b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003450:	e001      	b.n	8003456 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003452:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4954      	ldr	r1, [pc, #336]	; (80035b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800345e:	428b      	cmp	r3, r1
 8003460:	d101      	bne.n	8003466 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003462:	4b54      	ldr	r3, [pc, #336]	; (80035b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003464:	e001      	b.n	800346a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003466:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800346a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800346e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003470:	2300      	movs	r3, #0
 8003472:	60bb      	str	r3, [r7, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348a:	f043 0204 	orr.w	r2, r3, #4
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7ff fe4a 	bl	800312c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003498:	e084      	b.n	80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d107      	bne.n	80034b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f8be 	bl	8003630 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d107      	bne.n	80034ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f8fd 	bl	80036c8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d4:	2b40      	cmp	r3, #64	; 0x40
 80034d6:	d12f      	bne.n	8003538 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d02a      	beq.n	8003538 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034f0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a2e      	ldr	r2, [pc, #184]	; (80035b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d101      	bne.n	8003500 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80034fc:	4b2d      	ldr	r3, [pc, #180]	; (80035b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034fe:	e001      	b.n	8003504 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003500:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4929      	ldr	r1, [pc, #164]	; (80035b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800350c:	428b      	cmp	r3, r1
 800350e:	d101      	bne.n	8003514 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003510:	4b28      	ldr	r3, [pc, #160]	; (80035b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003512:	e001      	b.n	8003518 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003514:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003518:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800351c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	f043 0202 	orr.w	r2, r3, #2
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff fdfa 	bl	800312c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b08      	cmp	r3, #8
 8003540:	d131      	bne.n	80035a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b00      	cmp	r3, #0
 800354a:	d02c      	beq.n	80035a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a17      	ldr	r2, [pc, #92]	; (80035b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d101      	bne.n	800355a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003556:	4b17      	ldr	r3, [pc, #92]	; (80035b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003558:	e001      	b.n	800355e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800355a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4912      	ldr	r1, [pc, #72]	; (80035b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003566:	428b      	cmp	r3, r1
 8003568:	d101      	bne.n	800356e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800356a:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800356c:	e001      	b.n	8003572 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800356e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003572:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003576:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003586:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003594:	f043 0204 	orr.w	r2, r3, #4
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff fdc5 	bl	800312c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035a2:	e000      	b.n	80035a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035a4:	bf00      	nop
}
 80035a6:	bf00      	nop
 80035a8:	3720      	adds	r7, #32
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40003800 	.word	0x40003800
 80035b4:	40003400 	.word	0x40003400

080035b8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	1c99      	adds	r1, r3, #2
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6251      	str	r1, [r2, #36]	; 0x24
 80035de:	881a      	ldrh	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d113      	bne.n	8003626 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800360c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d106      	bne.n	8003626 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7ff ffc9 	bl	80035b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	1c99      	adds	r1, r3, #2
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6251      	str	r1, [r2, #36]	; 0x24
 8003642:	8819      	ldrh	r1, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a1d      	ldr	r2, [pc, #116]	; (80036c0 <I2SEx_TxISR_I2SExt+0x90>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d101      	bne.n	8003652 <I2SEx_TxISR_I2SExt+0x22>
 800364e:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <I2SEx_TxISR_I2SExt+0x94>)
 8003650:	e001      	b.n	8003656 <I2SEx_TxISR_I2SExt+0x26>
 8003652:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003656:	460a      	mov	r2, r1
 8003658:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d121      	bne.n	80036b6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a12      	ldr	r2, [pc, #72]	; (80036c0 <I2SEx_TxISR_I2SExt+0x90>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d101      	bne.n	8003680 <I2SEx_TxISR_I2SExt+0x50>
 800367c:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <I2SEx_TxISR_I2SExt+0x94>)
 800367e:	e001      	b.n	8003684 <I2SEx_TxISR_I2SExt+0x54>
 8003680:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	490d      	ldr	r1, [pc, #52]	; (80036c0 <I2SEx_TxISR_I2SExt+0x90>)
 800368c:	428b      	cmp	r3, r1
 800368e:	d101      	bne.n	8003694 <I2SEx_TxISR_I2SExt+0x64>
 8003690:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <I2SEx_TxISR_I2SExt+0x94>)
 8003692:	e001      	b.n	8003698 <I2SEx_TxISR_I2SExt+0x68>
 8003694:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003698:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800369c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d106      	bne.n	80036b6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ff81 	bl	80035b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40003800 	.word	0x40003800
 80036c4:	40003400 	.word	0x40003400

080036c8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68d8      	ldr	r0, [r3, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036da:	1c99      	adds	r1, r3, #2
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	62d1      	str	r1, [r2, #44]	; 0x2c
 80036e0:	b282      	uxth	r2, r0
 80036e2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d113      	bne.n	8003724 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800370a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff ff4a 	bl	80035b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003724:	bf00      	nop
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a20      	ldr	r2, [pc, #128]	; (80037bc <I2SEx_RxISR_I2SExt+0x90>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d101      	bne.n	8003742 <I2SEx_RxISR_I2SExt+0x16>
 800373e:	4b20      	ldr	r3, [pc, #128]	; (80037c0 <I2SEx_RxISR_I2SExt+0x94>)
 8003740:	e001      	b.n	8003746 <I2SEx_RxISR_I2SExt+0x1a>
 8003742:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003746:	68d8      	ldr	r0, [r3, #12]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	1c99      	adds	r1, r3, #2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003752:	b282      	uxth	r2, r0
 8003754:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800375a:	b29b      	uxth	r3, r3
 800375c:	3b01      	subs	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003768:	b29b      	uxth	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d121      	bne.n	80037b2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a12      	ldr	r2, [pc, #72]	; (80037bc <I2SEx_RxISR_I2SExt+0x90>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d101      	bne.n	800377c <I2SEx_RxISR_I2SExt+0x50>
 8003778:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <I2SEx_RxISR_I2SExt+0x94>)
 800377a:	e001      	b.n	8003780 <I2SEx_RxISR_I2SExt+0x54>
 800377c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	490d      	ldr	r1, [pc, #52]	; (80037bc <I2SEx_RxISR_I2SExt+0x90>)
 8003788:	428b      	cmp	r3, r1
 800378a:	d101      	bne.n	8003790 <I2SEx_RxISR_I2SExt+0x64>
 800378c:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <I2SEx_RxISR_I2SExt+0x94>)
 800378e:	e001      	b.n	8003794 <I2SEx_RxISR_I2SExt+0x68>
 8003790:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003794:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003798:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379e:	b29b      	uxth	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d106      	bne.n	80037b2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7ff ff03 	bl	80035b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40003800 	.word	0x40003800
 80037c0:	40003400 	.word	0x40003400

080037c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e25b      	b.n	8003c8e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d075      	beq.n	80038ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037e2:	4ba3      	ldr	r3, [pc, #652]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d00c      	beq.n	8003808 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ee:	4ba0      	ldr	r3, [pc, #640]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d112      	bne.n	8003820 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037fa:	4b9d      	ldr	r3, [pc, #628]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003802:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003806:	d10b      	bne.n	8003820 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003808:	4b99      	ldr	r3, [pc, #612]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d05b      	beq.n	80038cc <HAL_RCC_OscConfig+0x108>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d157      	bne.n	80038cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e236      	b.n	8003c8e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003828:	d106      	bne.n	8003838 <HAL_RCC_OscConfig+0x74>
 800382a:	4b91      	ldr	r3, [pc, #580]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a90      	ldr	r2, [pc, #576]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 8003830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	e01d      	b.n	8003874 <HAL_RCC_OscConfig+0xb0>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003840:	d10c      	bne.n	800385c <HAL_RCC_OscConfig+0x98>
 8003842:	4b8b      	ldr	r3, [pc, #556]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a8a      	ldr	r2, [pc, #552]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 8003848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	4b88      	ldr	r3, [pc, #544]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a87      	ldr	r2, [pc, #540]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 8003854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	e00b      	b.n	8003874 <HAL_RCC_OscConfig+0xb0>
 800385c:	4b84      	ldr	r3, [pc, #528]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a83      	ldr	r2, [pc, #524]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 8003862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	4b81      	ldr	r3, [pc, #516]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a80      	ldr	r2, [pc, #512]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 800386e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d013      	beq.n	80038a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387c:	f7fd fa58 	bl	8000d30 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003884:	f7fd fa54 	bl	8000d30 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b64      	cmp	r3, #100	; 0x64
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e1fb      	b.n	8003c8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	4b76      	ldr	r3, [pc, #472]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f0      	beq.n	8003884 <HAL_RCC_OscConfig+0xc0>
 80038a2:	e014      	b.n	80038ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a4:	f7fd fa44 	bl	8000d30 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038ac:	f7fd fa40 	bl	8000d30 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b64      	cmp	r3, #100	; 0x64
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e1e7      	b.n	8003c8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038be:	4b6c      	ldr	r3, [pc, #432]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0xe8>
 80038ca:	e000      	b.n	80038ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d063      	beq.n	80039a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038da:	4b65      	ldr	r3, [pc, #404]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 030c 	and.w	r3, r3, #12
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00b      	beq.n	80038fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038e6:	4b62      	ldr	r3, [pc, #392]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d11c      	bne.n	800392c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038f2:	4b5f      	ldr	r3, [pc, #380]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d116      	bne.n	800392c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038fe:	4b5c      	ldr	r3, [pc, #368]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d005      	beq.n	8003916 <HAL_RCC_OscConfig+0x152>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d001      	beq.n	8003916 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e1bb      	b.n	8003c8e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003916:	4b56      	ldr	r3, [pc, #344]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4952      	ldr	r1, [pc, #328]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 8003926:	4313      	orrs	r3, r2
 8003928:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800392a:	e03a      	b.n	80039a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d020      	beq.n	8003976 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003934:	4b4f      	ldr	r3, [pc, #316]	; (8003a74 <HAL_RCC_OscConfig+0x2b0>)
 8003936:	2201      	movs	r2, #1
 8003938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393a:	f7fd f9f9 	bl	8000d30 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003942:	f7fd f9f5 	bl	8000d30 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e19c      	b.n	8003c8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003954:	4b46      	ldr	r3, [pc, #280]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f0      	beq.n	8003942 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003960:	4b43      	ldr	r3, [pc, #268]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	4940      	ldr	r1, [pc, #256]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 8003970:	4313      	orrs	r3, r2
 8003972:	600b      	str	r3, [r1, #0]
 8003974:	e015      	b.n	80039a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003976:	4b3f      	ldr	r3, [pc, #252]	; (8003a74 <HAL_RCC_OscConfig+0x2b0>)
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397c:	f7fd f9d8 	bl	8000d30 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003984:	f7fd f9d4 	bl	8000d30 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e17b      	b.n	8003c8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003996:	4b36      	ldr	r3, [pc, #216]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1f0      	bne.n	8003984 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d030      	beq.n	8003a10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d016      	beq.n	80039e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039b6:	4b30      	ldr	r3, [pc, #192]	; (8003a78 <HAL_RCC_OscConfig+0x2b4>)
 80039b8:	2201      	movs	r2, #1
 80039ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039bc:	f7fd f9b8 	bl	8000d30 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039c4:	f7fd f9b4 	bl	8000d30 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e15b      	b.n	8003c8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d6:	4b26      	ldr	r3, [pc, #152]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 80039d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0f0      	beq.n	80039c4 <HAL_RCC_OscConfig+0x200>
 80039e2:	e015      	b.n	8003a10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039e4:	4b24      	ldr	r3, [pc, #144]	; (8003a78 <HAL_RCC_OscConfig+0x2b4>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ea:	f7fd f9a1 	bl	8000d30 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039f2:	f7fd f99d 	bl	8000d30 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e144      	b.n	8003c8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a04:	4b1a      	ldr	r3, [pc, #104]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 8003a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1f0      	bne.n	80039f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80a0 	beq.w	8003b5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a22:	4b13      	ldr	r3, [pc, #76]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10f      	bne.n	8003a4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	4b0f      	ldr	r3, [pc, #60]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	4a0e      	ldr	r2, [pc, #56]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 8003a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a3e:	4b0c      	ldr	r3, [pc, #48]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a46:	60bb      	str	r3, [r7, #8]
 8003a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4e:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <HAL_RCC_OscConfig+0x2b8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d121      	bne.n	8003a9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a5a:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <HAL_RCC_OscConfig+0x2b8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a07      	ldr	r2, [pc, #28]	; (8003a7c <HAL_RCC_OscConfig+0x2b8>)
 8003a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a66:	f7fd f963 	bl	8000d30 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6c:	e011      	b.n	8003a92 <HAL_RCC_OscConfig+0x2ce>
 8003a6e:	bf00      	nop
 8003a70:	40023800 	.word	0x40023800
 8003a74:	42470000 	.word	0x42470000
 8003a78:	42470e80 	.word	0x42470e80
 8003a7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a80:	f7fd f956 	bl	8000d30 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e0fd      	b.n	8003c8e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a92:	4b81      	ldr	r3, [pc, #516]	; (8003c98 <HAL_RCC_OscConfig+0x4d4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0f0      	beq.n	8003a80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d106      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x2f0>
 8003aa6:	4b7d      	ldr	r3, [pc, #500]	; (8003c9c <HAL_RCC_OscConfig+0x4d8>)
 8003aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aaa:	4a7c      	ldr	r2, [pc, #496]	; (8003c9c <HAL_RCC_OscConfig+0x4d8>)
 8003aac:	f043 0301 	orr.w	r3, r3, #1
 8003ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab2:	e01c      	b.n	8003aee <HAL_RCC_OscConfig+0x32a>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b05      	cmp	r3, #5
 8003aba:	d10c      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x312>
 8003abc:	4b77      	ldr	r3, [pc, #476]	; (8003c9c <HAL_RCC_OscConfig+0x4d8>)
 8003abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac0:	4a76      	ldr	r2, [pc, #472]	; (8003c9c <HAL_RCC_OscConfig+0x4d8>)
 8003ac2:	f043 0304 	orr.w	r3, r3, #4
 8003ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac8:	4b74      	ldr	r3, [pc, #464]	; (8003c9c <HAL_RCC_OscConfig+0x4d8>)
 8003aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003acc:	4a73      	ldr	r2, [pc, #460]	; (8003c9c <HAL_RCC_OscConfig+0x4d8>)
 8003ace:	f043 0301 	orr.w	r3, r3, #1
 8003ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad4:	e00b      	b.n	8003aee <HAL_RCC_OscConfig+0x32a>
 8003ad6:	4b71      	ldr	r3, [pc, #452]	; (8003c9c <HAL_RCC_OscConfig+0x4d8>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ada:	4a70      	ldr	r2, [pc, #448]	; (8003c9c <HAL_RCC_OscConfig+0x4d8>)
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae2:	4b6e      	ldr	r3, [pc, #440]	; (8003c9c <HAL_RCC_OscConfig+0x4d8>)
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae6:	4a6d      	ldr	r2, [pc, #436]	; (8003c9c <HAL_RCC_OscConfig+0x4d8>)
 8003ae8:	f023 0304 	bic.w	r3, r3, #4
 8003aec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d015      	beq.n	8003b22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af6:	f7fd f91b 	bl	8000d30 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003afc:	e00a      	b.n	8003b14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003afe:	f7fd f917 	bl	8000d30 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e0bc      	b.n	8003c8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b14:	4b61      	ldr	r3, [pc, #388]	; (8003c9c <HAL_RCC_OscConfig+0x4d8>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0ee      	beq.n	8003afe <HAL_RCC_OscConfig+0x33a>
 8003b20:	e014      	b.n	8003b4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b22:	f7fd f905 	bl	8000d30 <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b28:	e00a      	b.n	8003b40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b2a:	f7fd f901 	bl	8000d30 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e0a6      	b.n	8003c8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b40:	4b56      	ldr	r3, [pc, #344]	; (8003c9c <HAL_RCC_OscConfig+0x4d8>)
 8003b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1ee      	bne.n	8003b2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b4c:	7dfb      	ldrb	r3, [r7, #23]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d105      	bne.n	8003b5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b52:	4b52      	ldr	r3, [pc, #328]	; (8003c9c <HAL_RCC_OscConfig+0x4d8>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	4a51      	ldr	r2, [pc, #324]	; (8003c9c <HAL_RCC_OscConfig+0x4d8>)
 8003b58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 8092 	beq.w	8003c8c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b68:	4b4c      	ldr	r3, [pc, #304]	; (8003c9c <HAL_RCC_OscConfig+0x4d8>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 030c 	and.w	r3, r3, #12
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d05c      	beq.n	8003c2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d141      	bne.n	8003c00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7c:	4b48      	ldr	r3, [pc, #288]	; (8003ca0 <HAL_RCC_OscConfig+0x4dc>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b82:	f7fd f8d5 	bl	8000d30 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b8a:	f7fd f8d1 	bl	8000d30 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e078      	b.n	8003c8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9c:	4b3f      	ldr	r3, [pc, #252]	; (8003c9c <HAL_RCC_OscConfig+0x4d8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f0      	bne.n	8003b8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	69da      	ldr	r2, [r3, #28]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	019b      	lsls	r3, r3, #6
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbe:	085b      	lsrs	r3, r3, #1
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	041b      	lsls	r3, r3, #16
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bca:	061b      	lsls	r3, r3, #24
 8003bcc:	4933      	ldr	r1, [pc, #204]	; (8003c9c <HAL_RCC_OscConfig+0x4d8>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bd2:	4b33      	ldr	r3, [pc, #204]	; (8003ca0 <HAL_RCC_OscConfig+0x4dc>)
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd8:	f7fd f8aa 	bl	8000d30 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be0:	f7fd f8a6 	bl	8000d30 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e04d      	b.n	8003c8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf2:	4b2a      	ldr	r3, [pc, #168]	; (8003c9c <HAL_RCC_OscConfig+0x4d8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0f0      	beq.n	8003be0 <HAL_RCC_OscConfig+0x41c>
 8003bfe:	e045      	b.n	8003c8c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c00:	4b27      	ldr	r3, [pc, #156]	; (8003ca0 <HAL_RCC_OscConfig+0x4dc>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c06:	f7fd f893 	bl	8000d30 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c0e:	f7fd f88f 	bl	8000d30 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e036      	b.n	8003c8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c20:	4b1e      	ldr	r3, [pc, #120]	; (8003c9c <HAL_RCC_OscConfig+0x4d8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1f0      	bne.n	8003c0e <HAL_RCC_OscConfig+0x44a>
 8003c2c:	e02e      	b.n	8003c8c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e029      	b.n	8003c8e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c3a:	4b18      	ldr	r3, [pc, #96]	; (8003c9c <HAL_RCC_OscConfig+0x4d8>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d11c      	bne.n	8003c88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d115      	bne.n	8003c88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c62:	4013      	ands	r3, r2
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d10d      	bne.n	8003c88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d106      	bne.n	8003c88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d001      	beq.n	8003c8c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e000      	b.n	8003c8e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40007000 	.word	0x40007000
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	42470060 	.word	0x42470060

08003ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0cc      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb8:	4b68      	ldr	r3, [pc, #416]	; (8003e5c <HAL_RCC_ClockConfig+0x1b8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d90c      	bls.n	8003ce0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc6:	4b65      	ldr	r3, [pc, #404]	; (8003e5c <HAL_RCC_ClockConfig+0x1b8>)
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cce:	4b63      	ldr	r3, [pc, #396]	; (8003e5c <HAL_RCC_ClockConfig+0x1b8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d001      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e0b8      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d020      	beq.n	8003d2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cf8:	4b59      	ldr	r3, [pc, #356]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	4a58      	ldr	r2, [pc, #352]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d005      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d10:	4b53      	ldr	r3, [pc, #332]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	4a52      	ldr	r2, [pc, #328]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d1c:	4b50      	ldr	r3, [pc, #320]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	494d      	ldr	r1, [pc, #308]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d044      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d107      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d42:	4b47      	ldr	r3, [pc, #284]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d119      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e07f      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d003      	beq.n	8003d62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d107      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d62:	4b3f      	ldr	r3, [pc, #252]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d109      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e06f      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d72:	4b3b      	ldr	r3, [pc, #236]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e067      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d82:	4b37      	ldr	r3, [pc, #220]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f023 0203 	bic.w	r2, r3, #3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	4934      	ldr	r1, [pc, #208]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d94:	f7fc ffcc 	bl	8000d30 <HAL_GetTick>
 8003d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9a:	e00a      	b.n	8003db2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d9c:	f7fc ffc8 	bl	8000d30 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e04f      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db2:	4b2b      	ldr	r3, [pc, #172]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 020c 	and.w	r2, r3, #12
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d1eb      	bne.n	8003d9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dc4:	4b25      	ldr	r3, [pc, #148]	; (8003e5c <HAL_RCC_ClockConfig+0x1b8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d20c      	bcs.n	8003dec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd2:	4b22      	ldr	r3, [pc, #136]	; (8003e5c <HAL_RCC_ClockConfig+0x1b8>)
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dda:	4b20      	ldr	r3, [pc, #128]	; (8003e5c <HAL_RCC_ClockConfig+0x1b8>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d001      	beq.n	8003dec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e032      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df8:	4b19      	ldr	r3, [pc, #100]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	4916      	ldr	r1, [pc, #88]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d009      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e16:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	490e      	ldr	r1, [pc, #56]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e2a:	f000 f821 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 8003e2e:	4601      	mov	r1, r0
 8003e30:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	091b      	lsrs	r3, r3, #4
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	4a0a      	ldr	r2, [pc, #40]	; (8003e64 <HAL_RCC_ClockConfig+0x1c0>)
 8003e3c:	5cd3      	ldrb	r3, [r2, r3]
 8003e3e:	fa21 f303 	lsr.w	r3, r1, r3
 8003e42:	4a09      	ldr	r2, [pc, #36]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e46:	4b09      	ldr	r3, [pc, #36]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fc ff2c 	bl	8000ca8 <HAL_InitTick>

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40023c00 	.word	0x40023c00
 8003e60:	40023800 	.word	0x40023800
 8003e64:	08008f6c 	.word	0x08008f6c
 8003e68:	20000028 	.word	0x20000028
 8003e6c:	20000000 	.word	0x20000000

08003e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	607b      	str	r3, [r7, #4]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e86:	4b63      	ldr	r3, [pc, #396]	; (8004014 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d007      	beq.n	8003ea2 <HAL_RCC_GetSysClockFreq+0x32>
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d008      	beq.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x38>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f040 80b4 	bne.w	8004004 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e9c:	4b5e      	ldr	r3, [pc, #376]	; (8004018 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003e9e:	60bb      	str	r3, [r7, #8]
       break;
 8003ea0:	e0b3      	b.n	800400a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ea2:	4b5e      	ldr	r3, [pc, #376]	; (800401c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003ea4:	60bb      	str	r3, [r7, #8]
      break;
 8003ea6:	e0b0      	b.n	800400a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ea8:	4b5a      	ldr	r3, [pc, #360]	; (8004014 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eb0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eb2:	4b58      	ldr	r3, [pc, #352]	; (8004014 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d04a      	beq.n	8003f54 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ebe:	4b55      	ldr	r3, [pc, #340]	; (8004014 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	099b      	lsrs	r3, r3, #6
 8003ec4:	f04f 0400 	mov.w	r4, #0
 8003ec8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	ea03 0501 	and.w	r5, r3, r1
 8003ed4:	ea04 0602 	and.w	r6, r4, r2
 8003ed8:	4629      	mov	r1, r5
 8003eda:	4632      	mov	r2, r6
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	f04f 0400 	mov.w	r4, #0
 8003ee4:	0154      	lsls	r4, r2, #5
 8003ee6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003eea:	014b      	lsls	r3, r1, #5
 8003eec:	4619      	mov	r1, r3
 8003eee:	4622      	mov	r2, r4
 8003ef0:	1b49      	subs	r1, r1, r5
 8003ef2:	eb62 0206 	sbc.w	r2, r2, r6
 8003ef6:	f04f 0300 	mov.w	r3, #0
 8003efa:	f04f 0400 	mov.w	r4, #0
 8003efe:	0194      	lsls	r4, r2, #6
 8003f00:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f04:	018b      	lsls	r3, r1, #6
 8003f06:	1a5b      	subs	r3, r3, r1
 8003f08:	eb64 0402 	sbc.w	r4, r4, r2
 8003f0c:	f04f 0100 	mov.w	r1, #0
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	00e2      	lsls	r2, r4, #3
 8003f16:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f1a:	00d9      	lsls	r1, r3, #3
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4614      	mov	r4, r2
 8003f20:	195b      	adds	r3, r3, r5
 8003f22:	eb44 0406 	adc.w	r4, r4, r6
 8003f26:	f04f 0100 	mov.w	r1, #0
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	0262      	lsls	r2, r4, #9
 8003f30:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003f34:	0259      	lsls	r1, r3, #9
 8003f36:	460b      	mov	r3, r1
 8003f38:	4614      	mov	r4, r2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	4621      	mov	r1, r4
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f04f 0400 	mov.w	r4, #0
 8003f44:	461a      	mov	r2, r3
 8003f46:	4623      	mov	r3, r4
 8003f48:	f7fc fd0c 	bl	8000964 <__aeabi_uldivmod>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	460c      	mov	r4, r1
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	e049      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f54:	4b2f      	ldr	r3, [pc, #188]	; (8004014 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	099b      	lsrs	r3, r3, #6
 8003f5a:	f04f 0400 	mov.w	r4, #0
 8003f5e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	ea03 0501 	and.w	r5, r3, r1
 8003f6a:	ea04 0602 	and.w	r6, r4, r2
 8003f6e:	4629      	mov	r1, r5
 8003f70:	4632      	mov	r2, r6
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	f04f 0400 	mov.w	r4, #0
 8003f7a:	0154      	lsls	r4, r2, #5
 8003f7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f80:	014b      	lsls	r3, r1, #5
 8003f82:	4619      	mov	r1, r3
 8003f84:	4622      	mov	r2, r4
 8003f86:	1b49      	subs	r1, r1, r5
 8003f88:	eb62 0206 	sbc.w	r2, r2, r6
 8003f8c:	f04f 0300 	mov.w	r3, #0
 8003f90:	f04f 0400 	mov.w	r4, #0
 8003f94:	0194      	lsls	r4, r2, #6
 8003f96:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f9a:	018b      	lsls	r3, r1, #6
 8003f9c:	1a5b      	subs	r3, r3, r1
 8003f9e:	eb64 0402 	sbc.w	r4, r4, r2
 8003fa2:	f04f 0100 	mov.w	r1, #0
 8003fa6:	f04f 0200 	mov.w	r2, #0
 8003faa:	00e2      	lsls	r2, r4, #3
 8003fac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003fb0:	00d9      	lsls	r1, r3, #3
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4614      	mov	r4, r2
 8003fb6:	195b      	adds	r3, r3, r5
 8003fb8:	eb44 0406 	adc.w	r4, r4, r6
 8003fbc:	f04f 0100 	mov.w	r1, #0
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	02a2      	lsls	r2, r4, #10
 8003fc6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003fca:	0299      	lsls	r1, r3, #10
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4614      	mov	r4, r2
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f04f 0400 	mov.w	r4, #0
 8003fda:	461a      	mov	r2, r3
 8003fdc:	4623      	mov	r3, r4
 8003fde:	f7fc fcc1 	bl	8000964 <__aeabi_uldivmod>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	460c      	mov	r4, r1
 8003fe6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fe8:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	0c1b      	lsrs	r3, r3, #16
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004000:	60bb      	str	r3, [r7, #8]
      break;
 8004002:	e002      	b.n	800400a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004004:	4b04      	ldr	r3, [pc, #16]	; (8004018 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004006:	60bb      	str	r3, [r7, #8]
      break;
 8004008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800400a:	68bb      	ldr	r3, [r7, #8]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004014:	40023800 	.word	0x40023800
 8004018:	00f42400 	.word	0x00f42400
 800401c:	007a1200 	.word	0x007a1200

08004020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004024:	4b03      	ldr	r3, [pc, #12]	; (8004034 <HAL_RCC_GetHCLKFreq+0x14>)
 8004026:	681b      	ldr	r3, [r3, #0]
}
 8004028:	4618      	mov	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	20000028 	.word	0x20000028

08004038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800403c:	f7ff fff0 	bl	8004020 <HAL_RCC_GetHCLKFreq>
 8004040:	4601      	mov	r1, r0
 8004042:	4b05      	ldr	r3, [pc, #20]	; (8004058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	0a9b      	lsrs	r3, r3, #10
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	4a03      	ldr	r2, [pc, #12]	; (800405c <HAL_RCC_GetPCLK1Freq+0x24>)
 800404e:	5cd3      	ldrb	r3, [r2, r3]
 8004050:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004054:	4618      	mov	r0, r3
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40023800 	.word	0x40023800
 800405c:	08008f7c 	.word	0x08008f7c

08004060 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b00      	cmp	r3, #0
 800407a:	d105      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004084:	2b00      	cmp	r3, #0
 8004086:	d035      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004088:	4b62      	ldr	r3, [pc, #392]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800408e:	f7fc fe4f 	bl	8000d30 <HAL_GetTick>
 8004092:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004094:	e008      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004096:	f7fc fe4b 	bl	8000d30 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e0b0      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040a8:	4b5b      	ldr	r3, [pc, #364]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1f0      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	019a      	lsls	r2, r3, #6
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	071b      	lsls	r3, r3, #28
 80040c0:	4955      	ldr	r1, [pc, #340]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040c8:	4b52      	ldr	r3, [pc, #328]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040ce:	f7fc fe2f 	bl	8000d30 <HAL_GetTick>
 80040d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040d4:	e008      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040d6:	f7fc fe2b 	bl	8000d30 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e090      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040e8:	4b4b      	ldr	r3, [pc, #300]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0f0      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 8083 	beq.w	8004208 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004102:	2300      	movs	r3, #0
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	4b44      	ldr	r3, [pc, #272]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	4a43      	ldr	r2, [pc, #268]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800410c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004110:	6413      	str	r3, [r2, #64]	; 0x40
 8004112:	4b41      	ldr	r3, [pc, #260]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800411e:	4b3f      	ldr	r3, [pc, #252]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a3e      	ldr	r2, [pc, #248]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004128:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800412a:	f7fc fe01 	bl	8000d30 <HAL_GetTick>
 800412e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004130:	e008      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004132:	f7fc fdfd 	bl	8000d30 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e062      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004144:	4b35      	ldr	r3, [pc, #212]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0f0      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004150:	4b31      	ldr	r3, [pc, #196]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004158:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d02f      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	429a      	cmp	r2, r3
 800416c:	d028      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800416e:	4b2a      	ldr	r3, [pc, #168]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004176:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004178:	4b29      	ldr	r3, [pc, #164]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800417a:	2201      	movs	r2, #1
 800417c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800417e:	4b28      	ldr	r3, [pc, #160]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004184:	4a24      	ldr	r2, [pc, #144]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800418a:	4b23      	ldr	r3, [pc, #140]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800418c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b01      	cmp	r3, #1
 8004194:	d114      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004196:	f7fc fdcb 	bl	8000d30 <HAL_GetTick>
 800419a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419c:	e00a      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800419e:	f7fc fdc7 	bl	8000d30 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e02a      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b4:	4b18      	ldr	r3, [pc, #96]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0ee      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041cc:	d10d      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80041ce:	4b12      	ldr	r3, [pc, #72]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80041de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e2:	490d      	ldr	r1, [pc, #52]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	608b      	str	r3, [r1, #8]
 80041e8:	e005      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80041ea:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	4a0a      	ldr	r2, [pc, #40]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041f0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80041f4:	6093      	str	r3, [r2, #8]
 80041f6:	4b08      	ldr	r3, [pc, #32]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004202:	4905      	ldr	r1, [pc, #20]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004204:	4313      	orrs	r3, r2
 8004206:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	42470068 	.word	0x42470068
 8004218:	40023800 	.word	0x40023800
 800421c:	40007000 	.word	0x40007000
 8004220:	42470e40 	.word	0x42470e40

08004224 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d13d      	bne.n	80042be <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004242:	4b22      	ldr	r3, [pc, #136]	; (80042cc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800424a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d004      	beq.n	800425c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004252:	2b01      	cmp	r3, #1
 8004254:	d12f      	bne.n	80042b6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004256:	4b1e      	ldr	r3, [pc, #120]	; (80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004258:	617b      	str	r3, [r7, #20]
          break;
 800425a:	e02f      	b.n	80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800425c:	4b1b      	ldr	r3, [pc, #108]	; (80042cc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004264:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004268:	d108      	bne.n	800427c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800426a:	4b18      	ldr	r3, [pc, #96]	; (80042cc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004272:	4a18      	ldr	r2, [pc, #96]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004274:	fbb2 f3f3 	udiv	r3, r2, r3
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	e007      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800427c:	4b13      	ldr	r3, [pc, #76]	; (80042cc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004284:	4a14      	ldr	r2, [pc, #80]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004286:	fbb2 f3f3 	udiv	r3, r2, r3
 800428a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800428c:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800428e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004292:	099b      	lsrs	r3, r3, #6
 8004294:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	fb02 f303 	mul.w	r3, r2, r3
 800429e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80042a0:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80042a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042a6:	0f1b      	lsrs	r3, r3, #28
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b2:	617b      	str	r3, [r7, #20]
          break;
 80042b4:	e002      	b.n	80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]
          break;
 80042ba:	bf00      	nop
        }
      }
      break;
 80042bc:	bf00      	nop
    }
  }
  return frequency;
 80042be:	697b      	ldr	r3, [r7, #20]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	371c      	adds	r7, #28
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	40023800 	.word	0x40023800
 80042d0:	00bb8000 	.word	0x00bb8000
 80042d4:	007a1200 	.word	0x007a1200
 80042d8:	00f42400 	.word	0x00f42400

080042dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e056      	b.n	800439c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d106      	bne.n	800430e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f004 f8af 	bl	800846c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2202      	movs	r2, #2
 8004312:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004324:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	431a      	orrs	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	ea42 0103 	orr.w	r1, r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	0c1b      	lsrs	r3, r3, #16
 800436c:	f003 0104 	and.w	r1, r3, #4
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	69da      	ldr	r2, [r3, #28]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800438a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e01d      	b.n	80043f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f004 f896 	bl	80084fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3304      	adds	r3, #4
 80043e0:	4619      	mov	r1, r3
 80043e2:	4610      	mov	r0, r2
 80043e4:	f000 fb34 	bl	8004a50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b082      	sub	sp, #8
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e01d      	b.n	8004448 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d106      	bne.n	8004426 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f815 	bl	8004450 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2202      	movs	r2, #2
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3304      	adds	r3, #4
 8004436:	4619      	mov	r1, r3
 8004438:	4610      	mov	r0, r2
 800443a:	f000 fb09 	bl	8004a50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2201      	movs	r2, #1
 8004474:	6839      	ldr	r1, [r7, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f000 fdd4 	bl	8005024 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a15      	ldr	r2, [pc, #84]	; (80044d8 <HAL_TIM_PWM_Start+0x74>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d004      	beq.n	8004490 <HAL_TIM_PWM_Start+0x2c>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a14      	ldr	r2, [pc, #80]	; (80044dc <HAL_TIM_PWM_Start+0x78>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d101      	bne.n	8004494 <HAL_TIM_PWM_Start+0x30>
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <HAL_TIM_PWM_Start+0x32>
 8004494:	2300      	movs	r3, #0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d007      	beq.n	80044aa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2b06      	cmp	r3, #6
 80044ba:	d007      	beq.n	80044cc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0201 	orr.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40010000 	.word	0x40010000
 80044dc:	40010400 	.word	0x40010400

080044e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d122      	bne.n	800453c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b02      	cmp	r3, #2
 8004502:	d11b      	bne.n	800453c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0202 	mvn.w	r2, #2
 800450c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fa75 	bl	8004a12 <HAL_TIM_IC_CaptureCallback>
 8004528:	e005      	b.n	8004536 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fa67 	bl	80049fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fa78 	bl	8004a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b04      	cmp	r3, #4
 8004548:	d122      	bne.n	8004590 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b04      	cmp	r3, #4
 8004556:	d11b      	bne.n	8004590 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0204 	mvn.w	r2, #4
 8004560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2202      	movs	r2, #2
 8004566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fa4b 	bl	8004a12 <HAL_TIM_IC_CaptureCallback>
 800457c:	e005      	b.n	800458a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fa3d 	bl	80049fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fa4e 	bl	8004a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b08      	cmp	r3, #8
 800459c:	d122      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d11b      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0208 	mvn.w	r2, #8
 80045b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2204      	movs	r2, #4
 80045ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fa21 	bl	8004a12 <HAL_TIM_IC_CaptureCallback>
 80045d0:	e005      	b.n	80045de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fa13 	bl	80049fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fa24 	bl	8004a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	2b10      	cmp	r3, #16
 80045f0:	d122      	bne.n	8004638 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b10      	cmp	r3, #16
 80045fe:	d11b      	bne.n	8004638 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0210 	mvn.w	r2, #16
 8004608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2208      	movs	r2, #8
 800460e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f9f7 	bl	8004a12 <HAL_TIM_IC_CaptureCallback>
 8004624:	e005      	b.n	8004632 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f9e9 	bl	80049fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f9fa 	bl	8004a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b01      	cmp	r3, #1
 8004644:	d10e      	bne.n	8004664 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b01      	cmp	r3, #1
 8004652:	d107      	bne.n	8004664 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0201 	mvn.w	r2, #1
 800465c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f9c3 	bl	80049ea <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466e:	2b80      	cmp	r3, #128	; 0x80
 8004670:	d10e      	bne.n	8004690 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467c:	2b80      	cmp	r3, #128	; 0x80
 800467e:	d107      	bne.n	8004690 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fd76 	bl	800517c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469a:	2b40      	cmp	r3, #64	; 0x40
 800469c:	d10e      	bne.n	80046bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a8:	2b40      	cmp	r3, #64	; 0x40
 80046aa:	d107      	bne.n	80046bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f9bf 	bl	8004a3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	2b20      	cmp	r3, #32
 80046c8:	d10e      	bne.n	80046e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d107      	bne.n	80046e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f06f 0220 	mvn.w	r2, #32
 80046e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fd40 	bl	8005168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046e8:	bf00      	nop
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004702:	2b01      	cmp	r3, #1
 8004704:	d101      	bne.n	800470a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004706:	2302      	movs	r3, #2
 8004708:	e0b4      	b.n	8004874 <HAL_TIM_PWM_ConfigChannel+0x184>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2202      	movs	r2, #2
 8004716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b0c      	cmp	r3, #12
 800471e:	f200 809f 	bhi.w	8004860 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004722:	a201      	add	r2, pc, #4	; (adr r2, 8004728 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004728:	0800475d 	.word	0x0800475d
 800472c:	08004861 	.word	0x08004861
 8004730:	08004861 	.word	0x08004861
 8004734:	08004861 	.word	0x08004861
 8004738:	0800479d 	.word	0x0800479d
 800473c:	08004861 	.word	0x08004861
 8004740:	08004861 	.word	0x08004861
 8004744:	08004861 	.word	0x08004861
 8004748:	080047df 	.word	0x080047df
 800474c:	08004861 	.word	0x08004861
 8004750:	08004861 	.word	0x08004861
 8004754:	08004861 	.word	0x08004861
 8004758:	0800481f 	.word	0x0800481f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68b9      	ldr	r1, [r7, #8]
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fa14 	bl	8004b90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699a      	ldr	r2, [r3, #24]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0208 	orr.w	r2, r2, #8
 8004776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0204 	bic.w	r2, r2, #4
 8004786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6999      	ldr	r1, [r3, #24]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	691a      	ldr	r2, [r3, #16]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	619a      	str	r2, [r3, #24]
      break;
 800479a:	e062      	b.n	8004862 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68b9      	ldr	r1, [r7, #8]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 fa64 	bl	8004c70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6999      	ldr	r1, [r3, #24]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	021a      	lsls	r2, r3, #8
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	619a      	str	r2, [r3, #24]
      break;
 80047dc:	e041      	b.n	8004862 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68b9      	ldr	r1, [r7, #8]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 fab9 	bl	8004d5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69da      	ldr	r2, [r3, #28]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f042 0208 	orr.w	r2, r2, #8
 80047f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69da      	ldr	r2, [r3, #28]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0204 	bic.w	r2, r2, #4
 8004808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69d9      	ldr	r1, [r3, #28]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	61da      	str	r2, [r3, #28]
      break;
 800481c:	e021      	b.n	8004862 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68b9      	ldr	r1, [r7, #8]
 8004824:	4618      	mov	r0, r3
 8004826:	f000 fb0d 	bl	8004e44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69da      	ldr	r2, [r3, #28]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	69da      	ldr	r2, [r3, #28]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69d9      	ldr	r1, [r3, #28]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	021a      	lsls	r2, r3, #8
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	61da      	str	r2, [r3, #28]
      break;
 800485e:	e000      	b.n	8004862 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004860:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_TIM_ConfigClockSource+0x18>
 8004890:	2302      	movs	r3, #2
 8004892:	e0a6      	b.n	80049e2 <HAL_TIM_ConfigClockSource+0x166>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b40      	cmp	r3, #64	; 0x40
 80048ca:	d067      	beq.n	800499c <HAL_TIM_ConfigClockSource+0x120>
 80048cc:	2b40      	cmp	r3, #64	; 0x40
 80048ce:	d80b      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x6c>
 80048d0:	2b10      	cmp	r3, #16
 80048d2:	d073      	beq.n	80049bc <HAL_TIM_ConfigClockSource+0x140>
 80048d4:	2b10      	cmp	r3, #16
 80048d6:	d802      	bhi.n	80048de <HAL_TIM_ConfigClockSource+0x62>
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d06f      	beq.n	80049bc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80048dc:	e078      	b.n	80049d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048de:	2b20      	cmp	r3, #32
 80048e0:	d06c      	beq.n	80049bc <HAL_TIM_ConfigClockSource+0x140>
 80048e2:	2b30      	cmp	r3, #48	; 0x30
 80048e4:	d06a      	beq.n	80049bc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80048e6:	e073      	b.n	80049d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048e8:	2b70      	cmp	r3, #112	; 0x70
 80048ea:	d00d      	beq.n	8004908 <HAL_TIM_ConfigClockSource+0x8c>
 80048ec:	2b70      	cmp	r3, #112	; 0x70
 80048ee:	d804      	bhi.n	80048fa <HAL_TIM_ConfigClockSource+0x7e>
 80048f0:	2b50      	cmp	r3, #80	; 0x50
 80048f2:	d033      	beq.n	800495c <HAL_TIM_ConfigClockSource+0xe0>
 80048f4:	2b60      	cmp	r3, #96	; 0x60
 80048f6:	d041      	beq.n	800497c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80048f8:	e06a      	b.n	80049d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048fe:	d066      	beq.n	80049ce <HAL_TIM_ConfigClockSource+0x152>
 8004900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004904:	d017      	beq.n	8004936 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004906:	e063      	b.n	80049d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6818      	ldr	r0, [r3, #0]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	6899      	ldr	r1, [r3, #8]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f000 fb64 	bl	8004fe4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800492a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	609a      	str	r2, [r3, #8]
      break;
 8004934:	e04c      	b.n	80049d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	6899      	ldr	r1, [r3, #8]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f000 fb4d 	bl	8004fe4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004958:	609a      	str	r2, [r3, #8]
      break;
 800495a:	e039      	b.n	80049d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6818      	ldr	r0, [r3, #0]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	6859      	ldr	r1, [r3, #4]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	461a      	mov	r2, r3
 800496a:	f000 fac1 	bl	8004ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2150      	movs	r1, #80	; 0x50
 8004974:	4618      	mov	r0, r3
 8004976:	f000 fb1a 	bl	8004fae <TIM_ITRx_SetConfig>
      break;
 800497a:	e029      	b.n	80049d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6818      	ldr	r0, [r3, #0]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	6859      	ldr	r1, [r3, #4]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	461a      	mov	r2, r3
 800498a:	f000 fae0 	bl	8004f4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2160      	movs	r1, #96	; 0x60
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fb0a 	bl	8004fae <TIM_ITRx_SetConfig>
      break;
 800499a:	e019      	b.n	80049d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6818      	ldr	r0, [r3, #0]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	6859      	ldr	r1, [r3, #4]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	461a      	mov	r2, r3
 80049aa:	f000 faa1 	bl	8004ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2140      	movs	r1, #64	; 0x40
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 fafa 	bl	8004fae <TIM_ITRx_SetConfig>
      break;
 80049ba:	e009      	b.n	80049d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4619      	mov	r1, r3
 80049c6:	4610      	mov	r0, r2
 80049c8:	f000 faf1 	bl	8004fae <TIM_ITRx_SetConfig>
      break;
 80049cc:	e000      	b.n	80049d0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80049ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b083      	sub	sp, #12
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
	...

08004a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a40      	ldr	r2, [pc, #256]	; (8004b64 <TIM_Base_SetConfig+0x114>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d013      	beq.n	8004a90 <TIM_Base_SetConfig+0x40>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a6e:	d00f      	beq.n	8004a90 <TIM_Base_SetConfig+0x40>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a3d      	ldr	r2, [pc, #244]	; (8004b68 <TIM_Base_SetConfig+0x118>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d00b      	beq.n	8004a90 <TIM_Base_SetConfig+0x40>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a3c      	ldr	r2, [pc, #240]	; (8004b6c <TIM_Base_SetConfig+0x11c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d007      	beq.n	8004a90 <TIM_Base_SetConfig+0x40>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a3b      	ldr	r2, [pc, #236]	; (8004b70 <TIM_Base_SetConfig+0x120>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d003      	beq.n	8004a90 <TIM_Base_SetConfig+0x40>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a3a      	ldr	r2, [pc, #232]	; (8004b74 <TIM_Base_SetConfig+0x124>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d108      	bne.n	8004aa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a2f      	ldr	r2, [pc, #188]	; (8004b64 <TIM_Base_SetConfig+0x114>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d02b      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab0:	d027      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a2c      	ldr	r2, [pc, #176]	; (8004b68 <TIM_Base_SetConfig+0x118>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d023      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a2b      	ldr	r2, [pc, #172]	; (8004b6c <TIM_Base_SetConfig+0x11c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d01f      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a2a      	ldr	r2, [pc, #168]	; (8004b70 <TIM_Base_SetConfig+0x120>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d01b      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a29      	ldr	r2, [pc, #164]	; (8004b74 <TIM_Base_SetConfig+0x124>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d017      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a28      	ldr	r2, [pc, #160]	; (8004b78 <TIM_Base_SetConfig+0x128>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d013      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a27      	ldr	r2, [pc, #156]	; (8004b7c <TIM_Base_SetConfig+0x12c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d00f      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a26      	ldr	r2, [pc, #152]	; (8004b80 <TIM_Base_SetConfig+0x130>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d00b      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a25      	ldr	r2, [pc, #148]	; (8004b84 <TIM_Base_SetConfig+0x134>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d007      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a24      	ldr	r2, [pc, #144]	; (8004b88 <TIM_Base_SetConfig+0x138>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d003      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a23      	ldr	r2, [pc, #140]	; (8004b8c <TIM_Base_SetConfig+0x13c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d108      	bne.n	8004b14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a0a      	ldr	r2, [pc, #40]	; (8004b64 <TIM_Base_SetConfig+0x114>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d003      	beq.n	8004b48 <TIM_Base_SetConfig+0xf8>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a0c      	ldr	r2, [pc, #48]	; (8004b74 <TIM_Base_SetConfig+0x124>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d103      	bne.n	8004b50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	691a      	ldr	r2, [r3, #16]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	615a      	str	r2, [r3, #20]
}
 8004b56:	bf00      	nop
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40010000 	.word	0x40010000
 8004b68:	40000400 	.word	0x40000400
 8004b6c:	40000800 	.word	0x40000800
 8004b70:	40000c00 	.word	0x40000c00
 8004b74:	40010400 	.word	0x40010400
 8004b78:	40014000 	.word	0x40014000
 8004b7c:	40014400 	.word	0x40014400
 8004b80:	40014800 	.word	0x40014800
 8004b84:	40001800 	.word	0x40001800
 8004b88:	40001c00 	.word	0x40001c00
 8004b8c:	40002000 	.word	0x40002000

08004b90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	f023 0201 	bic.w	r2, r3, #1
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0303 	bic.w	r3, r3, #3
 8004bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f023 0302 	bic.w	r3, r3, #2
 8004bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a20      	ldr	r2, [pc, #128]	; (8004c68 <TIM_OC1_SetConfig+0xd8>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d003      	beq.n	8004bf4 <TIM_OC1_SetConfig+0x64>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a1f      	ldr	r2, [pc, #124]	; (8004c6c <TIM_OC1_SetConfig+0xdc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d10c      	bne.n	8004c0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f023 0308 	bic.w	r3, r3, #8
 8004bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f023 0304 	bic.w	r3, r3, #4
 8004c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a15      	ldr	r2, [pc, #84]	; (8004c68 <TIM_OC1_SetConfig+0xd8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d003      	beq.n	8004c1e <TIM_OC1_SetConfig+0x8e>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a14      	ldr	r2, [pc, #80]	; (8004c6c <TIM_OC1_SetConfig+0xdc>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d111      	bne.n	8004c42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	621a      	str	r2, [r3, #32]
}
 8004c5c:	bf00      	nop
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	40010000 	.word	0x40010000
 8004c6c:	40010400 	.word	0x40010400

08004c70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	f023 0210 	bic.w	r2, r3, #16
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	021b      	lsls	r3, r3, #8
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f023 0320 	bic.w	r3, r3, #32
 8004cba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	011b      	lsls	r3, r3, #4
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a22      	ldr	r2, [pc, #136]	; (8004d54 <TIM_OC2_SetConfig+0xe4>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d003      	beq.n	8004cd8 <TIM_OC2_SetConfig+0x68>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a21      	ldr	r2, [pc, #132]	; (8004d58 <TIM_OC2_SetConfig+0xe8>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d10d      	bne.n	8004cf4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cf2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a17      	ldr	r2, [pc, #92]	; (8004d54 <TIM_OC2_SetConfig+0xe4>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d003      	beq.n	8004d04 <TIM_OC2_SetConfig+0x94>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a16      	ldr	r2, [pc, #88]	; (8004d58 <TIM_OC2_SetConfig+0xe8>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d113      	bne.n	8004d2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	621a      	str	r2, [r3, #32]
}
 8004d46:	bf00      	nop
 8004d48:	371c      	adds	r7, #28
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40010000 	.word	0x40010000
 8004d58:	40010400 	.word	0x40010400

08004d5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 0303 	bic.w	r3, r3, #3
 8004d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a21      	ldr	r2, [pc, #132]	; (8004e3c <TIM_OC3_SetConfig+0xe0>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d003      	beq.n	8004dc2 <TIM_OC3_SetConfig+0x66>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a20      	ldr	r2, [pc, #128]	; (8004e40 <TIM_OC3_SetConfig+0xe4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d10d      	bne.n	8004dde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	021b      	lsls	r3, r3, #8
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a16      	ldr	r2, [pc, #88]	; (8004e3c <TIM_OC3_SetConfig+0xe0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d003      	beq.n	8004dee <TIM_OC3_SetConfig+0x92>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a15      	ldr	r2, [pc, #84]	; (8004e40 <TIM_OC3_SetConfig+0xe4>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d113      	bne.n	8004e16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004df4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	621a      	str	r2, [r3, #32]
}
 8004e30:	bf00      	nop
 8004e32:	371c      	adds	r7, #28
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	40010000 	.word	0x40010000
 8004e40:	40010400 	.word	0x40010400

08004e44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	031b      	lsls	r3, r3, #12
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a12      	ldr	r2, [pc, #72]	; (8004ee8 <TIM_OC4_SetConfig+0xa4>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d003      	beq.n	8004eac <TIM_OC4_SetConfig+0x68>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a11      	ldr	r2, [pc, #68]	; (8004eec <TIM_OC4_SetConfig+0xa8>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d109      	bne.n	8004ec0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	019b      	lsls	r3, r3, #6
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	621a      	str	r2, [r3, #32]
}
 8004eda:	bf00      	nop
 8004edc:	371c      	adds	r7, #28
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	40010000 	.word	0x40010000
 8004eec:	40010400 	.word	0x40010400

08004ef0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	f023 0201 	bic.w	r2, r3, #1
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	011b      	lsls	r3, r3, #4
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f023 030a 	bic.w	r3, r3, #10
 8004f2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	621a      	str	r2, [r3, #32]
}
 8004f42:	bf00      	nop
 8004f44:	371c      	adds	r7, #28
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b087      	sub	sp, #28
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	60f8      	str	r0, [r7, #12]
 8004f56:	60b9      	str	r1, [r7, #8]
 8004f58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	f023 0210 	bic.w	r2, r3, #16
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	031b      	lsls	r3, r3, #12
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	621a      	str	r2, [r3, #32]
}
 8004fa2:	bf00      	nop
 8004fa4:	371c      	adds	r7, #28
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b085      	sub	sp, #20
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f043 0307 	orr.w	r3, r3, #7
 8004fd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	609a      	str	r2, [r3, #8]
}
 8004fd8:	bf00      	nop
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ffe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	021a      	lsls	r2, r3, #8
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	431a      	orrs	r2, r3
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4313      	orrs	r3, r2
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	609a      	str	r2, [r3, #8]
}
 8005018:	bf00      	nop
 800501a:	371c      	adds	r7, #28
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 031f 	and.w	r3, r3, #31
 8005036:	2201      	movs	r2, #1
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a1a      	ldr	r2, [r3, #32]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	43db      	mvns	r3, r3
 8005046:	401a      	ands	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a1a      	ldr	r2, [r3, #32]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f003 031f 	and.w	r3, r3, #31
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	fa01 f303 	lsl.w	r3, r1, r3
 800505c:	431a      	orrs	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	621a      	str	r2, [r3, #32]
}
 8005062:	bf00      	nop
 8005064:	371c      	adds	r7, #28
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
	...

08005070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005084:	2302      	movs	r3, #2
 8005086:	e05a      	b.n	800513e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a21      	ldr	r2, [pc, #132]	; (800514c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d022      	beq.n	8005112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d4:	d01d      	beq.n	8005112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a1d      	ldr	r2, [pc, #116]	; (8005150 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d018      	beq.n	8005112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a1b      	ldr	r2, [pc, #108]	; (8005154 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d013      	beq.n	8005112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a1a      	ldr	r2, [pc, #104]	; (8005158 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d00e      	beq.n	8005112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a18      	ldr	r2, [pc, #96]	; (800515c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d009      	beq.n	8005112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a17      	ldr	r2, [pc, #92]	; (8005160 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d004      	beq.n	8005112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a15      	ldr	r2, [pc, #84]	; (8005164 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d10c      	bne.n	800512c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005118:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	4313      	orrs	r3, r2
 8005122:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40010000 	.word	0x40010000
 8005150:	40000400 	.word	0x40000400
 8005154:	40000800 	.word	0x40000800
 8005158:	40000c00 	.word	0x40000c00
 800515c:	40010400 	.word	0x40010400
 8005160:	40014000 	.word	0x40014000
 8005164:	40001800 	.word	0x40001800

08005168 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005190:	b084      	sub	sp, #16
 8005192:	b580      	push	{r7, lr}
 8005194:	b084      	sub	sp, #16
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	f107 001c 	add.w	r0, r7, #28
 800519e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d122      	bne.n	80051ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80051bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d105      	bne.n	80051e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f94a 	bl	800547c <USB_CoreReset>
 80051e8:	4603      	mov	r3, r0
 80051ea:	73fb      	strb	r3, [r7, #15]
 80051ec:	e01a      	b.n	8005224 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f93e 	bl	800547c <USB_CoreReset>
 8005200:	4603      	mov	r3, r0
 8005202:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005206:	2b00      	cmp	r3, #0
 8005208:	d106      	bne.n	8005218 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	639a      	str	r2, [r3, #56]	; 0x38
 8005216:	e005      	b.n	8005224 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005226:	2b01      	cmp	r3, #1
 8005228:	d10b      	bne.n	8005242 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f043 0206 	orr.w	r2, r3, #6
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f043 0220 	orr.w	r2, r3, #32
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005242:	7bfb      	ldrb	r3, [r7, #15]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800524e:	b004      	add	sp, #16
 8005250:	4770      	bx	lr

08005252 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f043 0201 	orr.w	r2, r3, #1
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f023 0201 	bic.w	r2, r3, #1
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b082      	sub	sp, #8
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
 800529e:	460b      	mov	r3, r1
 80052a0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80052ae:	78fb      	ldrb	r3, [r7, #3]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d106      	bne.n	80052c2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	60da      	str	r2, [r3, #12]
 80052c0:	e00b      	b.n	80052da <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80052c2:	78fb      	ldrb	r3, [r7, #3]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d106      	bne.n	80052d6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	60da      	str	r2, [r3, #12]
 80052d4:	e001      	b.n	80052da <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e003      	b.n	80052e2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80052da:	2032      	movs	r0, #50	; 0x32
 80052dc:	f7fb fd34 	bl	8000d48 <HAL_Delay>

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	019b      	lsls	r3, r3, #6
 80052fe:	f043 0220 	orr.w	r2, r3, #32
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	3301      	adds	r3, #1
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4a09      	ldr	r2, [pc, #36]	; (8005334 <USB_FlushTxFifo+0x48>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d901      	bls.n	8005318 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e006      	b.n	8005326 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	f003 0320 	and.w	r3, r3, #32
 8005320:	2b20      	cmp	r3, #32
 8005322:	d0f0      	beq.n	8005306 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	00030d40 	.word	0x00030d40

08005338 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2210      	movs	r2, #16
 8005348:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	3301      	adds	r3, #1
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4a09      	ldr	r2, [pc, #36]	; (8005378 <USB_FlushRxFifo+0x40>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d901      	bls.n	800535c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e006      	b.n	800536a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	f003 0310 	and.w	r3, r3, #16
 8005364:	2b10      	cmp	r3, #16
 8005366:	d0f0      	beq.n	800534a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	00030d40 	.word	0x00030d40

0800537c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800537c:	b480      	push	{r7}
 800537e:	b089      	sub	sp, #36	; 0x24
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	4611      	mov	r1, r2
 8005388:	461a      	mov	r2, r3
 800538a:	460b      	mov	r3, r1
 800538c:	71fb      	strb	r3, [r7, #7]
 800538e:	4613      	mov	r3, r2
 8005390:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800539a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d11a      	bne.n	80053d8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80053a2:	88bb      	ldrh	r3, [r7, #4]
 80053a4:	3303      	adds	r3, #3
 80053a6:	089b      	lsrs	r3, r3, #2
 80053a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80053aa:	2300      	movs	r3, #0
 80053ac:	61bb      	str	r3, [r7, #24]
 80053ae:	e00f      	b.n	80053d0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80053b0:	79fb      	ldrb	r3, [r7, #7]
 80053b2:	031a      	lsls	r2, r3, #12
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053bc:	461a      	mov	r2, r3
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	3304      	adds	r3, #4
 80053c8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	3301      	adds	r3, #1
 80053ce:	61bb      	str	r3, [r7, #24]
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d3eb      	bcc.n	80053b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3724      	adds	r7, #36	; 0x24
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b089      	sub	sp, #36	; 0x24
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	60f8      	str	r0, [r7, #12]
 80053ee:	60b9      	str	r1, [r7, #8]
 80053f0:	4613      	mov	r3, r2
 80053f2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80053fc:	88fb      	ldrh	r3, [r7, #6]
 80053fe:	3303      	adds	r3, #3
 8005400:	089b      	lsrs	r3, r3, #2
 8005402:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005404:	2300      	movs	r3, #0
 8005406:	61bb      	str	r3, [r7, #24]
 8005408:	e00b      	b.n	8005422 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	601a      	str	r2, [r3, #0]
    pDest++;
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	3304      	adds	r3, #4
 800541a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	3301      	adds	r3, #1
 8005420:	61bb      	str	r3, [r7, #24]
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	429a      	cmp	r2, r3
 8005428:	d3ef      	bcc.n	800540a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800542a:	69fb      	ldr	r3, [r7, #28]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3724      	adds	r7, #36	; 0x24
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	4013      	ands	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005450:	68fb      	ldr	r3, [r7, #12]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	f003 0301 	and.w	r3, r3, #1
}
 800546e:	4618      	mov	r0, r3
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
	...

0800547c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	3301      	adds	r3, #1
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	4a13      	ldr	r2, [pc, #76]	; (80054e0 <USB_CoreReset+0x64>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d901      	bls.n	800549a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e01b      	b.n	80054d2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	daf2      	bge.n	8005488 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f043 0201 	orr.w	r2, r3, #1
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	3301      	adds	r3, #1
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4a09      	ldr	r2, [pc, #36]	; (80054e0 <USB_CoreReset+0x64>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d901      	bls.n	80054c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e006      	b.n	80054d2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d0f0      	beq.n	80054b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	00030d40 	.word	0x00030d40

080054e4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054e4:	b084      	sub	sp, #16
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	f107 001c 	add.w	r0, r7, #28
 80054f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005500:	461a      	mov	r2, r3
 8005502:	2300      	movs	r3, #0
 8005504:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005522:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005532:	2b00      	cmp	r3, #0
 8005534:	d018      	beq.n	8005568 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	2b03      	cmp	r3, #3
 800553a:	d10a      	bne.n	8005552 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800554a:	f043 0304 	orr.w	r3, r3, #4
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	e014      	b.n	800557c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005560:	f023 0304 	bic.w	r3, r3, #4
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	e009      	b.n	800557c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005576:	f023 0304 	bic.w	r3, r3, #4
 800557a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800557c:	2110      	movs	r1, #16
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7ff feb4 	bl	80052ec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff fed7 	bl	8005338 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800558a:	2300      	movs	r3, #0
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	e015      	b.n	80055bc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4413      	add	r3, r2
 8005598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800559c:	461a      	mov	r2, r3
 800559e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055a2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b0:	461a      	mov	r2, r3
 80055b2:	2300      	movs	r3, #0
 80055b4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3301      	adds	r3, #1
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d3e5      	bcc.n	8005590 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80055c4:	2101      	movs	r1, #1
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f8ac 	bl	8005724 <USB_DriveVbus>

  HAL_Delay(200U);
 80055cc:	20c8      	movs	r0, #200	; 0xc8
 80055ce:	f7fb fbbb 	bl	8000d48 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055de:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00b      	beq.n	8005604 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055f2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a14      	ldr	r2, [pc, #80]	; (8005648 <USB_HostInit+0x164>)
 80055f8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a13      	ldr	r2, [pc, #76]	; (800564c <USB_HostInit+0x168>)
 80055fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005602:	e009      	b.n	8005618 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2280      	movs	r2, #128	; 0x80
 8005608:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a10      	ldr	r2, [pc, #64]	; (8005650 <USB_HostInit+0x16c>)
 800560e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a10      	ldr	r2, [pc, #64]	; (8005654 <USB_HostInit+0x170>)
 8005614:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561a:	2b00      	cmp	r3, #0
 800561c:	d105      	bne.n	800562a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	f043 0210 	orr.w	r2, r3, #16
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699a      	ldr	r2, [r3, #24]
 800562e:	4b0a      	ldr	r3, [pc, #40]	; (8005658 <USB_HostInit+0x174>)
 8005630:	4313      	orrs	r3, r2
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005642:	b004      	add	sp, #16
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	01000200 	.word	0x01000200
 800564c:	00e00300 	.word	0x00e00300
 8005650:	00600080 	.word	0x00600080
 8005654:	004000e0 	.word	0x004000e0
 8005658:	a3200008 	.word	0xa3200008

0800565c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	460b      	mov	r3, r1
 8005666:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800567a:	f023 0303 	bic.w	r3, r3, #3
 800567e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	78fb      	ldrb	r3, [r7, #3]
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	68f9      	ldr	r1, [r7, #12]
 8005690:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005694:	4313      	orrs	r3, r2
 8005696:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d107      	bne.n	80056ae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056a4:	461a      	mov	r2, r3
 80056a6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80056aa:	6053      	str	r3, [r2, #4]
 80056ac:	e009      	b.n	80056c2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80056ae:	78fb      	ldrb	r3, [r7, #3]
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d106      	bne.n	80056c2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ba:	461a      	mov	r2, r3
 80056bc:	f241 7370 	movw	r3, #6000	; 0x1770
 80056c0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3714      	adds	r7, #20
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80056f0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80056fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056fe:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005700:	2064      	movs	r0, #100	; 0x64
 8005702:	f7fb fb21 	bl	8000d48 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800570e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005712:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005714:	200a      	movs	r0, #10
 8005716:	f7fb fb17 	bl	8000d48 <HAL_Delay>

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	460b      	mov	r3, r1
 800572e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005734:	2300      	movs	r3, #0
 8005736:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005748:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d109      	bne.n	8005768 <USB_DriveVbus+0x44>
 8005754:	78fb      	ldrb	r3, [r7, #3]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d106      	bne.n	8005768 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005762:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005766:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800576e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005772:	d109      	bne.n	8005788 <USB_DriveVbus+0x64>
 8005774:	78fb      	ldrb	r3, [r7, #3]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d106      	bne.n	8005788 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005782:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005786:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005796:	b480      	push	{r7}
 8005798:	b085      	sub	sp, #20
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	0c5b      	lsrs	r3, r3, #17
 80057b4:	f003 0303 	and.w	r3, r3, #3
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	b29b      	uxth	r3, r3
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
	...

080057e8 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	4608      	mov	r0, r1
 80057f2:	4611      	mov	r1, r2
 80057f4:	461a      	mov	r2, r3
 80057f6:	4603      	mov	r3, r0
 80057f8:	70fb      	strb	r3, [r7, #3]
 80057fa:	460b      	mov	r3, r1
 80057fc:	70bb      	strb	r3, [r7, #2]
 80057fe:	4613      	mov	r3, r2
 8005800:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800580a:	78fb      	ldrb	r3, [r7, #3]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	4413      	add	r3, r2
 8005812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005816:	461a      	mov	r2, r3
 8005818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800581c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800581e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005822:	2b03      	cmp	r3, #3
 8005824:	d87e      	bhi.n	8005924 <USB_HC_Init+0x13c>
 8005826:	a201      	add	r2, pc, #4	; (adr r2, 800582c <USB_HC_Init+0x44>)
 8005828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582c:	0800583d 	.word	0x0800583d
 8005830:	080058e7 	.word	0x080058e7
 8005834:	0800583d 	.word	0x0800583d
 8005838:	080058a9 	.word	0x080058a9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800583c:	78fb      	ldrb	r3, [r7, #3]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	4413      	add	r3, r2
 8005844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005848:	461a      	mov	r2, r3
 800584a:	f240 439d 	movw	r3, #1181	; 0x49d
 800584e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005850:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005854:	2b00      	cmp	r3, #0
 8005856:	da10      	bge.n	800587a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005858:	78fb      	ldrb	r3, [r7, #3]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	4413      	add	r3, r2
 8005860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	78fa      	ldrb	r2, [r7, #3]
 8005868:	0151      	lsls	r1, r2, #5
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	440a      	add	r2, r1
 800586e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005876:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005878:	e057      	b.n	800592a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005882:	2b00      	cmp	r3, #0
 8005884:	d051      	beq.n	800592a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005886:	78fb      	ldrb	r3, [r7, #3]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	4413      	add	r3, r2
 800588e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	78fa      	ldrb	r2, [r7, #3]
 8005896:	0151      	lsls	r1, r2, #5
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	440a      	add	r2, r1
 800589c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058a0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80058a4:	60d3      	str	r3, [r2, #12]
      break;
 80058a6:	e040      	b.n	800592a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80058a8:	78fb      	ldrb	r3, [r7, #3]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b4:	461a      	mov	r2, r3
 80058b6:	f240 639d 	movw	r3, #1693	; 0x69d
 80058ba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80058bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	da34      	bge.n	800592e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	78fa      	ldrb	r2, [r7, #3]
 80058d4:	0151      	lsls	r1, r2, #5
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	440a      	add	r2, r1
 80058da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80058e4:	e023      	b.n	800592e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80058e6:	78fb      	ldrb	r3, [r7, #3]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f2:	461a      	mov	r2, r3
 80058f4:	f240 2325 	movw	r3, #549	; 0x225
 80058f8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80058fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	da17      	bge.n	8005932 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005902:	78fb      	ldrb	r3, [r7, #3]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	4413      	add	r3, r2
 800590a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	78fa      	ldrb	r2, [r7, #3]
 8005912:	0151      	lsls	r1, r2, #5
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	440a      	add	r2, r1
 8005918:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800591c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005920:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005922:	e006      	b.n	8005932 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	75fb      	strb	r3, [r7, #23]
      break;
 8005928:	e004      	b.n	8005934 <USB_HC_Init+0x14c>
      break;
 800592a:	bf00      	nop
 800592c:	e002      	b.n	8005934 <USB_HC_Init+0x14c>
      break;
 800592e:	bf00      	nop
 8005930:	e000      	b.n	8005934 <USB_HC_Init+0x14c>
      break;
 8005932:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800593a:	699a      	ldr	r2, [r3, #24]
 800593c:	78fb      	ldrb	r3, [r7, #3]
 800593e:	f003 030f 	and.w	r3, r3, #15
 8005942:	2101      	movs	r1, #1
 8005944:	fa01 f303 	lsl.w	r3, r1, r3
 8005948:	68b9      	ldr	r1, [r7, #8]
 800594a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800594e:	4313      	orrs	r3, r2
 8005950:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800595e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005962:	2b00      	cmp	r3, #0
 8005964:	da03      	bge.n	800596e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800596a:	613b      	str	r3, [r7, #16]
 800596c:	e001      	b.n	8005972 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800596e:	2300      	movs	r3, #0
 8005970:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005972:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005976:	2b02      	cmp	r3, #2
 8005978:	d103      	bne.n	8005982 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800597a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	e001      	b.n	8005986 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005986:	787b      	ldrb	r3, [r7, #1]
 8005988:	059b      	lsls	r3, r3, #22
 800598a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800598e:	78bb      	ldrb	r3, [r7, #2]
 8005990:	02db      	lsls	r3, r3, #11
 8005992:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005996:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005998:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800599c:	049b      	lsls	r3, r3, #18
 800599e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80059a2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80059a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80059a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80059aa:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80059b0:	78fb      	ldrb	r3, [r7, #3]
 80059b2:	0159      	lsls	r1, r3, #5
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	440b      	add	r3, r1
 80059b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059bc:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80059c2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80059c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d10f      	bne.n	80059ec <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80059cc:	78fb      	ldrb	r3, [r7, #3]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	78fa      	ldrb	r2, [r7, #3]
 80059dc:	0151      	lsls	r1, r2, #5
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	440a      	add	r2, r1
 80059e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059ea:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80059ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	371c      	adds	r7, #28
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop

080059fc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08c      	sub	sp, #48	; 0x30
 8005a00:	af02      	add	r7, sp, #8
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	4613      	mov	r3, r2
 8005a08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	785b      	ldrb	r3, [r3, #1]
 8005a12:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a18:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d028      	beq.n	8005a78 <USB_HC_StartXfer+0x7c>
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	791b      	ldrb	r3, [r3, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d124      	bne.n	8005a78 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005a2e:	79fb      	ldrb	r3, [r7, #7]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10b      	bne.n	8005a4c <USB_HC_StartXfer+0x50>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	795b      	ldrb	r3, [r3, #5]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d107      	bne.n	8005a4c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	785b      	ldrb	r3, [r3, #1]
 8005a40:	4619      	mov	r1, r3
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 fa2e 	bl	8005ea4 <USB_DoPing>
      return HAL_OK;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	e112      	b.n	8005c72 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8005a4c:	79fb      	ldrb	r3, [r7, #7]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d112      	bne.n	8005a78 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	69fa      	ldr	r2, [r7, #28]
 8005a62:	0151      	lsls	r1, r2, #5
 8005a64:	6a3a      	ldr	r2, [r7, #32]
 8005a66:	440a      	add	r2, r1
 8005a68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a6c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005a70:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2200      	movs	r2, #0
 8005a76:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d018      	beq.n	8005ab2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	8912      	ldrh	r2, [r2, #8]
 8005a88:	4413      	add	r3, r2
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	8912      	ldrh	r2, [r2, #8]
 8005a90:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a94:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005a96:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005a98:	8b7b      	ldrh	r3, [r7, #26]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d90b      	bls.n	8005ab6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005a9e:	8b7b      	ldrh	r3, [r7, #26]
 8005aa0:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005aa2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	8912      	ldrh	r2, [r2, #8]
 8005aa8:	fb02 f203 	mul.w	r2, r2, r3
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	611a      	str	r2, [r3, #16]
 8005ab0:	e001      	b.n	8005ab6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	78db      	ldrb	r3, [r3, #3]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d006      	beq.n	8005acc <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005abe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	8912      	ldrh	r2, [r2, #8]
 8005ac4:	fb02 f203 	mul.w	r2, r2, r3
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ad4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ad6:	04d9      	lsls	r1, r3, #19
 8005ad8:	4b68      	ldr	r3, [pc, #416]	; (8005c7c <USB_HC_StartXfer+0x280>)
 8005ada:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005adc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	7a9b      	ldrb	r3, [r3, #10]
 8005ae2:	075b      	lsls	r3, r3, #29
 8005ae4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ae8:	69f9      	ldr	r1, [r7, #28]
 8005aea:	0148      	lsls	r0, r1, #5
 8005aec:	6a39      	ldr	r1, [r7, #32]
 8005aee:	4401      	add	r1, r0
 8005af0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005af4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005af6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005af8:	79fb      	ldrb	r3, [r7, #7]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d009      	beq.n	8005b12 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	68d9      	ldr	r1, [r3, #12]
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b0e:	460a      	mov	r2, r1
 8005b10:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	bf0c      	ite	eq
 8005b22:	2301      	moveq	r3, #1
 8005b24:	2300      	movne	r3, #0
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	69fa      	ldr	r2, [r7, #28]
 8005b3a:	0151      	lsls	r1, r2, #5
 8005b3c:	6a3a      	ldr	r2, [r7, #32]
 8005b3e:	440a      	add	r2, r1
 8005b40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b44:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b48:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	7e7b      	ldrb	r3, [r7, #25]
 8005b5a:	075b      	lsls	r3, r3, #29
 8005b5c:	69f9      	ldr	r1, [r7, #28]
 8005b5e:	0148      	lsls	r0, r1, #5
 8005b60:	6a39      	ldr	r1, [r7, #32]
 8005b62:	4401      	add	r1, r0
 8005b64:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a41      	ldr	r2, [pc, #260]	; (8005c80 <USB_HC_StartXfer+0x284>)
 8005b7c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b7e:	4b40      	ldr	r3, [pc, #256]	; (8005c80 <USB_HC_StartXfer+0x284>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b86:	4a3e      	ldr	r2, [pc, #248]	; (8005c80 <USB_HC_StartXfer+0x284>)
 8005b88:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	78db      	ldrb	r3, [r3, #3]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d006      	beq.n	8005ba0 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005b92:	4b3b      	ldr	r3, [pc, #236]	; (8005c80 <USB_HC_StartXfer+0x284>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b9a:	4a39      	ldr	r2, [pc, #228]	; (8005c80 <USB_HC_StartXfer+0x284>)
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	e005      	b.n	8005bac <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005ba0:	4b37      	ldr	r3, [pc, #220]	; (8005c80 <USB_HC_StartXfer+0x284>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ba8:	4a35      	ldr	r2, [pc, #212]	; (8005c80 <USB_HC_StartXfer+0x284>)
 8005baa:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005bac:	4b34      	ldr	r3, [pc, #208]	; (8005c80 <USB_HC_StartXfer+0x284>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bb4:	4a32      	ldr	r2, [pc, #200]	; (8005c80 <USB_HC_StartXfer+0x284>)
 8005bb6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	4b2e      	ldr	r3, [pc, #184]	; (8005c80 <USB_HC_StartXfer+0x284>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005bcc:	79fb      	ldrb	r3, [r7, #7]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d14e      	bne.n	8005c70 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	78db      	ldrb	r3, [r3, #3]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d14a      	bne.n	8005c70 <USB_HC_StartXfer+0x274>
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d046      	beq.n	8005c70 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	79db      	ldrb	r3, [r3, #7]
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d830      	bhi.n	8005c4c <USB_HC_StartXfer+0x250>
 8005bea:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <USB_HC_StartXfer+0x1f4>)
 8005bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf0:	08005c01 	.word	0x08005c01
 8005bf4:	08005c25 	.word	0x08005c25
 8005bf8:	08005c01 	.word	0x08005c01
 8005bfc:	08005c25 	.word	0x08005c25
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	3303      	adds	r3, #3
 8005c06:	089b      	lsrs	r3, r3, #2
 8005c08:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005c0a:	8afa      	ldrh	r2, [r7, #22]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d91c      	bls.n	8005c50 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	f043 0220 	orr.w	r2, r3, #32
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	619a      	str	r2, [r3, #24]
          }
          break;
 8005c22:	e015      	b.n	8005c50 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	3303      	adds	r3, #3
 8005c2a:	089b      	lsrs	r3, r3, #2
 8005c2c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005c2e:	8afa      	ldrh	r2, [r7, #22]
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d90a      	bls.n	8005c54 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	619a      	str	r2, [r3, #24]
          }
          break;
 8005c4a:	e003      	b.n	8005c54 <USB_HC_StartXfer+0x258>

        default:
          break;
 8005c4c:	bf00      	nop
 8005c4e:	e002      	b.n	8005c56 <USB_HC_StartXfer+0x25a>
          break;
 8005c50:	bf00      	nop
 8005c52:	e000      	b.n	8005c56 <USB_HC_StartXfer+0x25a>
          break;
 8005c54:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	68d9      	ldr	r1, [r3, #12]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	785a      	ldrb	r2, [r3, #1]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	b298      	uxth	r0, r3
 8005c64:	2300      	movs	r3, #0
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	4603      	mov	r3, r0
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f7ff fb86 	bl	800537c <USB_WritePacket>
    }
  }

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3728      	adds	r7, #40	; 0x28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	1ff80000 	.word	0x1ff80000
 8005c80:	200000ac 	.word	0x200000ac

08005c84 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	b29b      	uxth	r3, r3
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b087      	sub	sp, #28
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	460b      	mov	r3, r1
 8005cb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005cb6:	78fb      	ldrb	r3, [r7, #3]
 8005cb8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	0c9b      	lsrs	r3, r3, #18
 8005cce:	f003 0303 	and.w	r3, r3, #3
 8005cd2:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d002      	beq.n	8005ce0 <USB_HC_Halt+0x3a>
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d16c      	bne.n	8005dba <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	0151      	lsls	r1, r2, #5
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	440a      	add	r2, r1
 8005cf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cfa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cfe:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d143      	bne.n	8005d94 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	0151      	lsls	r1, r2, #5
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	440a      	add	r2, r1
 8005d22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d2a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	0151      	lsls	r1, r2, #5
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	440a      	add	r2, r1
 8005d42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d4a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	0151      	lsls	r1, r2, #5
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	440a      	add	r2, r1
 8005d62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d6a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	617b      	str	r3, [r7, #20]
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d78:	d81d      	bhi.n	8005db6 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d90:	d0ec      	beq.n	8005d6c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005d92:	e080      	b.n	8005e96 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	0151      	lsls	r1, r2, #5
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	440a      	add	r2, r1
 8005daa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005db2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005db4:	e06f      	b.n	8005e96 <USB_HC_Halt+0x1f0>
          break;
 8005db6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005db8:	e06d      	b.n	8005e96 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	0151      	lsls	r1, r2, #5
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	440a      	add	r2, r1
 8005dd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dd8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d143      	bne.n	8005e72 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e08:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	0151      	lsls	r1, r2, #5
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	440a      	add	r2, r1
 8005e20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e28:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	0151      	lsls	r1, r2, #5
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	440a      	add	r2, r1
 8005e40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e48:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e56:	d81d      	bhi.n	8005e94 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e6e:	d0ec      	beq.n	8005e4a <USB_HC_Halt+0x1a4>
 8005e70:	e011      	b.n	8005e96 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	0151      	lsls	r1, r2, #5
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	440a      	add	r2, r1
 8005e88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e90:	6013      	str	r3, [r2, #0]
 8005e92:	e000      	b.n	8005e96 <USB_HC_Halt+0x1f0>
          break;
 8005e94:	bf00      	nop
    }
  }

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	371c      	adds	r7, #28
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	460b      	mov	r3, r1
 8005eae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005eb4:	78fb      	ldrb	r3, [r7, #3]
 8005eb6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	04da      	lsls	r2, r3, #19
 8005ec0:	4b15      	ldr	r3, [pc, #84]	; (8005f18 <USB_DoPing+0x74>)
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	0151      	lsls	r1, r2, #5
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	440a      	add	r2, r1
 8005ecc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ed0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ed4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005eec:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ef4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f02:	461a      	mov	r2, r3
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	371c      	adds	r7, #28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	1ff80000 	.word	0x1ff80000

08005f1c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff f9a1 	bl	8005274 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005f32:	2110      	movs	r1, #16
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7ff f9d9 	bl	80052ec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7ff f9fc 	bl	8005338 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005f40:	2300      	movs	r3, #0
 8005f42:	613b      	str	r3, [r7, #16]
 8005f44:	e01f      	b.n	8005f86 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f5c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f64:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f6c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	3301      	adds	r3, #1
 8005f84:	613b      	str	r3, [r7, #16]
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	2b0f      	cmp	r3, #15
 8005f8a:	d9dc      	bls.n	8005f46 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	613b      	str	r3, [r7, #16]
 8005f90:	e034      	b.n	8005ffc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fa8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fb0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fb8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	617b      	str	r3, [r7, #20]
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fd8:	d80c      	bhi.n	8005ff4 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ff0:	d0ec      	beq.n	8005fcc <USB_StopHost+0xb0>
 8005ff2:	e000      	b.n	8005ff6 <USB_StopHost+0xda>
        break;
 8005ff4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	613b      	str	r3, [r7, #16]
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	2b0f      	cmp	r3, #15
 8006000:	d9c7      	bls.n	8005f92 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006008:	461a      	mov	r2, r3
 800600a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800600e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006016:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7ff f91a 	bl	8005252 <USB_EnableGlobalInt>

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3718      	adds	r7, #24
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8006028:	b590      	push	{r4, r7, lr}
 800602a:	b089      	sub	sp, #36	; 0x24
 800602c:	af04      	add	r7, sp, #16
 800602e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8006030:	2302      	movs	r3, #2
 8006032:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8006034:	2301      	movs	r3, #1
 8006036:	2202      	movs	r2, #2
 8006038:	2102      	movs	r1, #2
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fc3a 	bl	80068b4 <USBH_FindInterface>
 8006040:	4603      	mov	r3, r0
 8006042:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8006044:	7bbb      	ldrb	r3, [r7, #14]
 8006046:	2bff      	cmp	r3, #255	; 0xff
 8006048:	f000 812a 	beq.w	80062a0 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800604c:	7bbb      	ldrb	r3, [r7, #14]
 800604e:	4619      	mov	r1, r3
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 fc13 	bl	800687c <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800605c:	2050      	movs	r0, #80	; 0x50
 800605e:	f002 fea5 	bl	8008dac <malloc>
 8006062:	4603      	mov	r3, r0
 8006064:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006070:	7bbb      	ldrb	r3, [r7, #14]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	211a      	movs	r1, #26
 8006076:	fb01 f303 	mul.w	r3, r1, r3
 800607a:	4413      	add	r3, r2
 800607c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	b25b      	sxtb	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	da15      	bge.n	80060b4 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006088:	7bbb      	ldrb	r3, [r7, #14]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	211a      	movs	r1, #26
 800608e:	fb01 f303 	mul.w	r3, r1, r3
 8006092:	4413      	add	r3, r2
 8006094:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006098:	781a      	ldrb	r2, [r3, #0]
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800609e:	7bbb      	ldrb	r3, [r7, #14]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	211a      	movs	r1, #26
 80060a4:	fb01 f303 	mul.w	r3, r1, r3
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80060ae:	881a      	ldrh	r2, [r3, #0]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	785b      	ldrb	r3, [r3, #1]
 80060b8:	4619      	mov	r1, r3
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f001 fd21 	bl	8007b02 <USBH_AllocPipe>
 80060c0:	4603      	mov	r3, r0
 80060c2:	461a      	mov	r2, r3
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	7819      	ldrb	r1, [r3, #0]
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	7858      	ldrb	r0, [r3, #1]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	8952      	ldrh	r2, [r2, #10]
 80060e0:	9202      	str	r2, [sp, #8]
 80060e2:	2203      	movs	r2, #3
 80060e4:	9201      	str	r2, [sp, #4]
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	4623      	mov	r3, r4
 80060ea:	4602      	mov	r2, r0
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f001 fcd9 	bl	8007aa4 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	2200      	movs	r2, #0
 80060f8:	4619      	mov	r1, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f002 fd7c 	bl	8008bf8 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8006100:	2300      	movs	r3, #0
 8006102:	2200      	movs	r2, #0
 8006104:	210a      	movs	r1, #10
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fbd4 	bl	80068b4 <USBH_FindInterface>
 800610c:	4603      	mov	r3, r0
 800610e:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8006110:	7bbb      	ldrb	r3, [r7, #14]
 8006112:	2bff      	cmp	r3, #255	; 0xff
 8006114:	f000 80c4 	beq.w	80062a0 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006118:	7bbb      	ldrb	r3, [r7, #14]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	211a      	movs	r1, #26
 800611e:	fb01 f303 	mul.w	r3, r1, r3
 8006122:	4413      	add	r3, r2
 8006124:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	b25b      	sxtb	r3, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	da16      	bge.n	800615e <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006130:	7bbb      	ldrb	r3, [r7, #14]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	211a      	movs	r1, #26
 8006136:	fb01 f303 	mul.w	r3, r1, r3
 800613a:	4413      	add	r3, r2
 800613c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006140:	781a      	ldrb	r2, [r3, #0]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006146:	7bbb      	ldrb	r3, [r7, #14]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	211a      	movs	r1, #26
 800614c:	fb01 f303 	mul.w	r3, r1, r3
 8006150:	4413      	add	r3, r2
 8006152:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006156:	881a      	ldrh	r2, [r3, #0]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	835a      	strh	r2, [r3, #26]
 800615c:	e015      	b.n	800618a <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800615e:	7bbb      	ldrb	r3, [r7, #14]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	211a      	movs	r1, #26
 8006164:	fb01 f303 	mul.w	r3, r1, r3
 8006168:	4413      	add	r3, r2
 800616a:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800616e:	781a      	ldrb	r2, [r3, #0]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006174:	7bbb      	ldrb	r3, [r7, #14]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	211a      	movs	r1, #26
 800617a:	fb01 f303 	mul.w	r3, r1, r3
 800617e:	4413      	add	r3, r2
 8006180:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006184:	881a      	ldrh	r2, [r3, #0]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800618a:	7bbb      	ldrb	r3, [r7, #14]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	211a      	movs	r1, #26
 8006190:	fb01 f303 	mul.w	r3, r1, r3
 8006194:	4413      	add	r3, r2
 8006196:	f203 3352 	addw	r3, r3, #850	; 0x352
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	b25b      	sxtb	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	da16      	bge.n	80061d0 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80061a2:	7bbb      	ldrb	r3, [r7, #14]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	211a      	movs	r1, #26
 80061a8:	fb01 f303 	mul.w	r3, r1, r3
 80061ac:	4413      	add	r3, r2
 80061ae:	f203 3352 	addw	r3, r3, #850	; 0x352
 80061b2:	781a      	ldrb	r2, [r3, #0]
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80061b8:	7bbb      	ldrb	r3, [r7, #14]
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	211a      	movs	r1, #26
 80061be:	fb01 f303 	mul.w	r3, r1, r3
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80061c8:	881a      	ldrh	r2, [r3, #0]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	835a      	strh	r2, [r3, #26]
 80061ce:	e015      	b.n	80061fc <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80061d0:	7bbb      	ldrb	r3, [r7, #14]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	211a      	movs	r1, #26
 80061d6:	fb01 f303 	mul.w	r3, r1, r3
 80061da:	4413      	add	r3, r2
 80061dc:	f203 3352 	addw	r3, r3, #850	; 0x352
 80061e0:	781a      	ldrb	r2, [r3, #0]
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80061e6:	7bbb      	ldrb	r3, [r7, #14]
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	211a      	movs	r1, #26
 80061ec:	fb01 f303 	mul.w	r3, r1, r3
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80061f6:	881a      	ldrh	r2, [r3, #0]
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	7b9b      	ldrb	r3, [r3, #14]
 8006200:	4619      	mov	r1, r3
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f001 fc7d 	bl	8007b02 <USBH_AllocPipe>
 8006208:	4603      	mov	r3, r0
 800620a:	461a      	mov	r2, r3
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	7bdb      	ldrb	r3, [r3, #15]
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f001 fc73 	bl	8007b02 <USBH_AllocPipe>
 800621c:	4603      	mov	r3, r0
 800621e:	461a      	mov	r2, r3
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	7b59      	ldrb	r1, [r3, #13]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	7b98      	ldrb	r0, [r3, #14]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	8b12      	ldrh	r2, [r2, #24]
 800623c:	9202      	str	r2, [sp, #8]
 800623e:	2202      	movs	r2, #2
 8006240:	9201      	str	r2, [sp, #4]
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	4623      	mov	r3, r4
 8006246:	4602      	mov	r2, r0
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f001 fc2b 	bl	8007aa4 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	7b19      	ldrb	r1, [r3, #12]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	7bd8      	ldrb	r0, [r3, #15]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	8b52      	ldrh	r2, [r2, #26]
 8006266:	9202      	str	r2, [sp, #8]
 8006268:	2202      	movs	r2, #2
 800626a:	9201      	str	r2, [sp, #4]
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	4623      	mov	r3, r4
 8006270:	4602      	mov	r2, r0
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f001 fc16 	bl	8007aa4 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	7b5b      	ldrb	r3, [r3, #13]
 8006284:	2200      	movs	r2, #0
 8006286:	4619      	mov	r1, r3
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f002 fcb5 	bl	8008bf8 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	7b1b      	ldrb	r3, [r3, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	4619      	mov	r1, r3
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f002 fcae 	bl	8008bf8 <USBH_LL_SetToggle>
      status = USBH_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd90      	pop	{r4, r7, pc}

080062aa <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b084      	sub	sp, #16
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00e      	beq.n	80062e2 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	4619      	mov	r1, r3
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f001 fc09 	bl	8007ae2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	4619      	mov	r1, r3
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f001 fc31 	bl	8007b3e <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	7b1b      	ldrb	r3, [r3, #12]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00e      	beq.n	8006308 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	7b1b      	ldrb	r3, [r3, #12]
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f001 fbf6 	bl	8007ae2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	7b1b      	ldrb	r3, [r3, #12]
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f001 fc1e 	bl	8007b3e <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	7b5b      	ldrb	r3, [r3, #13]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00e      	beq.n	800632e <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	7b5b      	ldrb	r3, [r3, #13]
 8006314:	4619      	mov	r1, r3
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f001 fbe3 	bl	8007ae2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	7b5b      	ldrb	r3, [r3, #13]
 8006320:	4619      	mov	r1, r3
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f001 fc0b 	bl	8007b3e <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00b      	beq.n	8006352 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	4618      	mov	r0, r3
 8006344:	f002 fd3a 	bl	8008dbc <free>
    phost->pActiveClass->pData = 0U;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800634e:	2200      	movs	r2, #0
 8006350:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8006364:	2302      	movs	r3, #2
 8006366:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	3340      	adds	r3, #64	; 0x40
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f8b2 	bl	80064e2 <GetLineCoding>
 800637e:	4603      	mov	r3, r0
 8006380:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d105      	bne.n	8006394 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800638e:	2102      	movs	r1, #2
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	4798      	blx	r3
  }
  return status;
 8006394:	7bfb      	ldrb	r3, [r7, #15]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80063a8:	2301      	movs	r3, #1
 80063aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80063b6:	69db      	ldr	r3, [r3, #28]
 80063b8:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80063c0:	2b04      	cmp	r3, #4
 80063c2:	d877      	bhi.n	80064b4 <USBH_CDC_Process+0x114>
 80063c4:	a201      	add	r2, pc, #4	; (adr r2, 80063cc <USBH_CDC_Process+0x2c>)
 80063c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ca:	bf00      	nop
 80063cc:	080063e1 	.word	0x080063e1
 80063d0:	080063e7 	.word	0x080063e7
 80063d4:	08006417 	.word	0x08006417
 80063d8:	0800648b 	.word	0x0800648b
 80063dc:	08006499 	.word	0x08006499
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 80063e0:	2300      	movs	r3, #0
 80063e2:	73fb      	strb	r3, [r7, #15]
    break;
 80063e4:	e06d      	b.n	80064c2 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ea:	4619      	mov	r1, r3
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 f897 	bl	8006520 <SetLineCoding>
 80063f2:	4603      	mov	r3, r0
 80063f4:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80063f6:	7bbb      	ldrb	r3, [r7, #14]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d104      	bne.n	8006406 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006404:	e058      	b.n	80064b8 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8006406:	7bbb      	ldrb	r3, [r7, #14]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d055      	beq.n	80064b8 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2204      	movs	r2, #4
 8006410:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006414:	e050      	b.n	80064b8 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	3340      	adds	r3, #64	; 0x40
 800641a:	4619      	mov	r1, r3
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f860 	bl	80064e2 <GetLineCoding>
 8006422:	4603      	mov	r3, r0
 8006424:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8006426:	7bbb      	ldrb	r3, [r7, #14]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d126      	bne.n	800647a <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800643e:	791b      	ldrb	r3, [r3, #4]
 8006440:	429a      	cmp	r2, r3
 8006442:	d13b      	bne.n	80064bc <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800644e:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006450:	429a      	cmp	r2, r3
 8006452:	d133      	bne.n	80064bc <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800645e:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006460:	429a      	cmp	r2, r3
 8006462:	d12b      	bne.n	80064bc <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800646c:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800646e:	429a      	cmp	r2, r3
 8006470:	d124      	bne.n	80064bc <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f95a 	bl	800672c <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006478:	e020      	b.n	80064bc <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800647a:	7bbb      	ldrb	r3, [r7, #14]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d01d      	beq.n	80064bc <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	2204      	movs	r2, #4
 8006484:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006488:	e018      	b.n	80064bc <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f867 	bl	800655e <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f8dc 	bl	800664e <CDC_ProcessReception>
    break;
 8006496:	e014      	b.n	80064c2 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8006498:	2100      	movs	r1, #0
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fece 	bl	800723c <USBH_ClrFeature>
 80064a0:	4603      	mov	r3, r0
 80064a2:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 80064a4:	7bbb      	ldrb	r3, [r7, #14]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10a      	bne.n	80064c0 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 80064b2:	e005      	b.n	80064c0 <USBH_CDC_Process+0x120>

  default:
    break;
 80064b4:	bf00      	nop
 80064b6:	e004      	b.n	80064c2 <USBH_CDC_Process+0x122>
    break;
 80064b8:	bf00      	nop
 80064ba:	e002      	b.n	80064c2 <USBH_CDC_Process+0x122>
    break;
 80064bc:	bf00      	nop
 80064be:	e000      	b.n	80064c2 <USBH_CDC_Process+0x122>
    break;
 80064c0:	bf00      	nop

  }

  return status;
 80064c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b082      	sub	sp, #8
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	22a1      	movs	r2, #161	; 0xa1
 80064f0:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2221      	movs	r2, #33	; 0x21
 80064f6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2207      	movs	r2, #7
 8006508:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2207      	movs	r2, #7
 800650e:	4619      	mov	r1, r3
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f001 f873 	bl	80075fc <USBH_CtlReq>
 8006516:	4603      	mov	r3, r0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2221      	movs	r2, #33	; 0x21
 800652e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2220      	movs	r2, #32
 8006534:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2207      	movs	r2, #7
 8006546:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	2207      	movs	r2, #7
 800654c:	4619      	mov	r1, r3
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f001 f854 	bl	80075fc <USBH_CtlReq>
 8006554:	4603      	mov	r3, r0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b086      	sub	sp, #24
 8006562:	af02      	add	r7, sp, #8
 8006564:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006570:	2300      	movs	r3, #0
 8006572:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800657a:	2b01      	cmp	r3, #1
 800657c:	d002      	beq.n	8006584 <CDC_ProcessTransmission+0x26>
 800657e:	2b02      	cmp	r3, #2
 8006580:	d025      	beq.n	80065ce <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8006582:	e060      	b.n	8006646 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	8b12      	ldrh	r2, [r2, #24]
 800658c:	4293      	cmp	r3, r2
 800658e:	d90c      	bls.n	80065aa <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	69d9      	ldr	r1, [r3, #28]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	8b1a      	ldrh	r2, [r3, #24]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	7b58      	ldrb	r0, [r3, #13]
 800659c:	2301      	movs	r3, #1
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	4603      	mov	r3, r0
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f001 fa3b 	bl	8007a1e <USBH_BulkSendData>
 80065a8:	e00c      	b.n	80065c4 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	7b58      	ldrb	r0, [r3, #13]
 80065b8:	2301      	movs	r3, #1
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	4603      	mov	r3, r0
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f001 fa2d 	bl	8007a1e <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80065cc:	e03b      	b.n	8006646 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	7b5b      	ldrb	r3, [r3, #13]
 80065d2:	4619      	mov	r1, r3
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f002 fae5 	bl	8008ba4 <USBH_LL_GetURBState>
 80065da:	4603      	mov	r3, r0
 80065dc:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 80065de:	7afb      	ldrb	r3, [r7, #11]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d128      	bne.n	8006636 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	8b12      	ldrh	r2, [r2, #24]
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d90e      	bls.n	800660e <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	8b12      	ldrh	r2, [r2, #24]
 80065f8:	1a9a      	subs	r2, r3, r2
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	8b12      	ldrh	r2, [r2, #24]
 8006606:	441a      	add	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	61da      	str	r2, [r3, #28]
 800660c:	e002      	b.n	8006614 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006618:	2b00      	cmp	r3, #0
 800661a:	d004      	beq.n	8006626 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006624:	e00e      	b.n	8006644 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f868 	bl	8006704 <USBH_CDC_TransmitCallback>
    break;
 8006634:	e006      	b.n	8006644 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8006636:	7afb      	ldrb	r3, [r7, #11]
 8006638:	2b02      	cmp	r3, #2
 800663a:	d103      	bne.n	8006644 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006644:	bf00      	nop
  }
}
 8006646:	bf00      	nop
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b086      	sub	sp, #24
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006660:	2300      	movs	r3, #0
 8006662:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800666a:	2b03      	cmp	r3, #3
 800666c:	d002      	beq.n	8006674 <CDC_ProcessReception+0x26>
 800666e:	2b04      	cmp	r3, #4
 8006670:	d00e      	beq.n	8006690 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8006672:	e043      	b.n	80066fc <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	6a19      	ldr	r1, [r3, #32]
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	8b5a      	ldrh	r2, [r3, #26]
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	7b1b      	ldrb	r3, [r3, #12]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f001 f9f1 	bl	8007a68 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2204      	movs	r2, #4
 800668a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800668e:	e035      	b.n	80066fc <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	7b1b      	ldrb	r3, [r3, #12]
 8006694:	4619      	mov	r1, r3
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f002 fa84 	bl	8008ba4 <USBH_LL_GetURBState>
 800669c:	4603      	mov	r3, r0
 800669e:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 80066a0:	7cfb      	ldrb	r3, [r7, #19]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d129      	bne.n	80066fa <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	7b1b      	ldrb	r3, [r3, #12]
 80066aa:	4619      	mov	r1, r3
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f002 f9e7 	bl	8008a80 <USBH_LL_GetLastXferSize>
 80066b2:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d016      	beq.n	80066ec <CDC_ProcessReception+0x9e>
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	8b5b      	ldrh	r3, [r3, #26]
 80066c2:	461a      	mov	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d910      	bls.n	80066ec <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	1ad2      	subs	r2, r2, r3
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	6a1a      	ldr	r2, [r3, #32]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	441a      	add	r2, r3
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2203      	movs	r2, #3
 80066e6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80066ea:	e006      	b.n	80066fa <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f80f 	bl	8006718 <USBH_CDC_ReceiveCallback>
    break;
 80066fa:	bf00      	nop
  }
}
 80066fc:	bf00      	nop
 80066fe:	3718      	adds	r7, #24
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]

}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]

}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]

}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	4613      	mov	r3, r2
 800674c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006754:	2302      	movs	r3, #2
 8006756:	e019      	b.n	800678c <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	79fa      	ldrb	r2, [r7, #7]
 800675c:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 f80f 	bl	8006794 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f002 f8c9 	bl	800891c <USBH_LL_Init>

  return USBH_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800679c:	2300      	movs	r3, #0
 800679e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80067a0:	e008      	b.n	80067b4 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	32e0      	adds	r2, #224	; 0xe0
 80067a8:	2100      	movs	r1, #0
 80067aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	3301      	adds	r3, #1
 80067b2:	60fb      	str	r3, [r7, #12]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2b0e      	cmp	r3, #14
 80067b8:	d9f3      	bls.n	80067a2 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80067ba:	2300      	movs	r3, #0
 80067bc:	60fb      	str	r3, [r7, #12]
 80067be:	e009      	b.n	80067d4 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80067ca:	2200      	movs	r2, #0
 80067cc:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3301      	adds	r3, #1
 80067d2:	60fb      	str	r3, [r7, #12]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067da:	d3f1      	bcc.n	80067c0 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2240      	movs	r2, #64	; 0x40
 8006800:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006826:	b480      	push	{r7}
 8006828:	b085      	sub	sp, #20
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8006830:	2300      	movs	r3, #0
 8006832:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d017      	beq.n	800686a <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10f      	bne.n	8006864 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800684a:	1c59      	adds	r1, r3, #1
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	33dc      	adds	r3, #220	; 0xdc
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	73fb      	strb	r3, [r7, #15]
 8006862:	e004      	b.n	800686e <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006864:	2302      	movs	r3, #2
 8006866:	73fb      	strb	r3, [r7, #15]
 8006868:	e001      	b.n	800686e <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800686a:	2302      	movs	r3, #2
 800686c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800686e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8006892:	78fa      	ldrb	r2, [r7, #3]
 8006894:	429a      	cmp	r2, r3
 8006896:	d204      	bcs.n	80068a2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	78fa      	ldrb	r2, [r7, #3]
 800689c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 80068a0:	e001      	b.n	80068a6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 80068a2:	2302      	movs	r3, #2
 80068a4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	4608      	mov	r0, r1
 80068be:	4611      	mov	r1, r2
 80068c0:	461a      	mov	r2, r3
 80068c2:	4603      	mov	r3, r0
 80068c4:	70fb      	strb	r3, [r7, #3]
 80068c6:	460b      	mov	r3, r1
 80068c8:	70bb      	strb	r3, [r7, #2]
 80068ca:	4613      	mov	r3, r2
 80068cc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80068d2:	2300      	movs	r3, #0
 80068d4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80068dc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80068de:	e025      	b.n	800692c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
 80068e2:	221a      	movs	r2, #26
 80068e4:	fb02 f303 	mul.w	r3, r2, r3
 80068e8:	3308      	adds	r3, #8
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	4413      	add	r3, r2
 80068ee:	3302      	adds	r3, #2
 80068f0:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	795b      	ldrb	r3, [r3, #5]
 80068f6:	78fa      	ldrb	r2, [r7, #3]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d002      	beq.n	8006902 <USBH_FindInterface+0x4e>
 80068fc:	78fb      	ldrb	r3, [r7, #3]
 80068fe:	2bff      	cmp	r3, #255	; 0xff
 8006900:	d111      	bne.n	8006926 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006906:	78ba      	ldrb	r2, [r7, #2]
 8006908:	429a      	cmp	r2, r3
 800690a:	d002      	beq.n	8006912 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800690c:	78bb      	ldrb	r3, [r7, #2]
 800690e:	2bff      	cmp	r3, #255	; 0xff
 8006910:	d109      	bne.n	8006926 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006916:	787a      	ldrb	r2, [r7, #1]
 8006918:	429a      	cmp	r2, r3
 800691a:	d002      	beq.n	8006922 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800691c:	787b      	ldrb	r3, [r7, #1]
 800691e:	2bff      	cmp	r3, #255	; 0xff
 8006920:	d101      	bne.n	8006926 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006922:	7dfb      	ldrb	r3, [r7, #23]
 8006924:	e006      	b.n	8006934 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006926:	7dfb      	ldrb	r3, [r7, #23]
 8006928:	3301      	adds	r3, #1
 800692a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800692c:	7dfb      	ldrb	r3, [r7, #23]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d9d6      	bls.n	80068e0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006932:	23ff      	movs	r3, #255	; 0xff
}
 8006934:	4618      	mov	r0, r3
 8006936:	371c      	adds	r7, #28
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f002 f823 	bl	8008994 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800694e:	2101      	movs	r1, #1
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f002 f93a 	bl	8008bca <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b088      	sub	sp, #32
 8006964:	af04      	add	r7, sp, #16
 8006966:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006968:	2302      	movs	r3, #2
 800696a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800696c:	2300      	movs	r3, #0
 800696e:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 faec 	bl	8006f4e <USBH_IsPortEnabled>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10c      	bne.n	8006996 <USBH_Process+0x36>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d007      	beq.n	8006996 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b03      	cmp	r3, #3
 800698e:	d002      	beq.n	8006996 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2203      	movs	r2, #3
 8006994:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b0b      	cmp	r3, #11
 800699e:	f200 814c 	bhi.w	8006c3a <USBH_Process+0x2da>
 80069a2:	a201      	add	r2, pc, #4	; (adr r2, 80069a8 <USBH_Process+0x48>)
 80069a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a8:	080069d9 	.word	0x080069d9
 80069ac:	080069fb 	.word	0x080069fb
 80069b0:	08006a0f 	.word	0x08006a0f
 80069b4:	08006c15 	.word	0x08006c15
 80069b8:	08006c3b 	.word	0x08006c3b
 80069bc:	08006a9d 	.word	0x08006a9d
 80069c0:	08006bcb 	.word	0x08006bcb
 80069c4:	08006acd 	.word	0x08006acd
 80069c8:	08006aed 	.word	0x08006aed
 80069cc:	08006b0d 	.word	0x08006b0d
 80069d0:	08006b3b 	.word	0x08006b3b
 80069d4:	08006bfd 	.word	0x08006bfd
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 812c 	beq.w	8006c3e <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 80069ec:	20c8      	movs	r0, #200	; 0xc8
 80069ee:	f002 f936 	bl	8008c5e <USBH_Delay>
      USBH_LL_ResetPort(phost);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f002 f829 	bl	8008a4a <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80069f8:	e121      	b.n	8006c3e <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	f040 811e 	bne.w	8006c42 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2202      	movs	r2, #2
 8006a0a:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006a0c:	e119      	b.n	8006c42 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8006a0e:	2064      	movs	r0, #100	; 0x64
 8006a10:	f002 f925 	bl	8008c5e <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f001 fff3 	bl	8008a00 <USBH_LL_GetSpeed>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2205      	movs	r2, #5
 8006a28:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 f868 	bl	8007b02 <USBH_AllocPipe>
 8006a32:	4603      	mov	r3, r0
 8006a34:	461a      	mov	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8006a3a:	2180      	movs	r1, #128	; 0x80
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f001 f860 	bl	8007b02 <USBH_AllocPipe>
 8006a42:	4603      	mov	r3, r0
 8006a44:	461a      	mov	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	7919      	ldrb	r1, [r3, #4]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006a5e:	b292      	uxth	r2, r2
 8006a60:	9202      	str	r2, [sp, #8]
 8006a62:	2200      	movs	r2, #0
 8006a64:	9201      	str	r2, [sp, #4]
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2280      	movs	r2, #128	; 0x80
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f001 f819 	bl	8007aa4 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	7959      	ldrb	r1, [r3, #5]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006a86:	b292      	uxth	r2, r2
 8006a88:	9202      	str	r2, [sp, #8]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	9201      	str	r2, [sp, #4]
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	4603      	mov	r3, r0
 8006a92:	2200      	movs	r2, #0
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f001 f805 	bl	8007aa4 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006a9a:	e0e3      	b.n	8006c64 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f8e7 	bl	8006c70 <USBH_HandleEnum>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f040 80ce 	bne.w	8006c46 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d103      	bne.n	8006ac4 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2208      	movs	r2, #8
 8006ac0:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8006ac2:	e0c0      	b.n	8006c46 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2207      	movs	r2, #7
 8006ac8:	701a      	strb	r2, [r3, #0]
    break;
 8006aca:	e0bc      	b.n	8006c46 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f000 80b9 	beq.w	8006c4a <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ade:	2101      	movs	r1, #1
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2208      	movs	r2, #8
 8006ae8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006aea:	e0ae      	b.n	8006c4a <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	4619      	mov	r1, r3
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fb59 	bl	80071ae <USBH_SetCfg>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f040 80a5 	bne.w	8006c4e <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2209      	movs	r2, #9
 8006b08:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006b0a:	e0a0      	b.n	8006c4e <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8006b12:	f003 0320 	and.w	r3, r3, #32
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00b      	beq.n	8006b32 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fb69 	bl	80071f4 <USBH_SetFeature>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f040 8094 	bne.w	8006c52 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	220a      	movs	r2, #10
 8006b2e:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006b30:	e08f      	b.n	8006c52 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	220a      	movs	r2, #10
 8006b36:	701a      	strb	r2, [r3, #0]
    break;
 8006b38:	e08b      	b.n	8006c52 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 8088 	beq.w	8006c56 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006b4e:	2300      	movs	r3, #0
 8006b50:	73fb      	strb	r3, [r7, #15]
 8006b52:	e017      	b.n	8006b84 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	33dc      	adds	r3, #220	; 0xdc
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	791a      	ldrb	r2, [r3, #4]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d108      	bne.n	8006b7e <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	33dc      	adds	r3, #220	; 0xdc
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
 8006b80:	3301      	adds	r3, #1
 8006b82:	73fb      	strb	r3, [r7, #15]
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d0e4      	beq.n	8006b54 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d016      	beq.n	8006bc2 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	4798      	blx	r3
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d109      	bne.n	8006bba <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2206      	movs	r2, #6
 8006baa:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006bb2:	2103      	movs	r1, #3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006bb8:	e04d      	b.n	8006c56 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	220d      	movs	r2, #13
 8006bbe:	701a      	strb	r2, [r3, #0]
    break;
 8006bc0:	e049      	b.n	8006c56 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	220d      	movs	r2, #13
 8006bc6:	701a      	strb	r2, [r3, #0]
    break;
 8006bc8:	e045      	b.n	8006c56 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00f      	beq.n	8006bf4 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	4798      	blx	r3
 8006be0:	4603      	mov	r3, r0
 8006be2:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8006be4:	7bbb      	ldrb	r3, [r7, #14]
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d136      	bne.n	8006c5a <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	220b      	movs	r2, #11
 8006bf0:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8006bf2:	e032      	b.n	8006c5a <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	220d      	movs	r2, #13
 8006bf8:	701a      	strb	r2, [r3, #0]
    break;
 8006bfa:	e02e      	b.n	8006c5a <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d02b      	beq.n	8006c5e <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	4798      	blx	r3
    }
    break;
 8006c12:	e024      	b.n	8006c5e <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7ff fdbd 	bl	8006794 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d01e      	beq.n	8006c62 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8006c38:	e013      	b.n	8006c62 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8006c3a:	bf00      	nop
 8006c3c:	e012      	b.n	8006c64 <USBH_Process+0x304>
    break;
 8006c3e:	bf00      	nop
 8006c40:	e010      	b.n	8006c64 <USBH_Process+0x304>
    break;
 8006c42:	bf00      	nop
 8006c44:	e00e      	b.n	8006c64 <USBH_Process+0x304>
    break;
 8006c46:	bf00      	nop
 8006c48:	e00c      	b.n	8006c64 <USBH_Process+0x304>
    break;
 8006c4a:	bf00      	nop
 8006c4c:	e00a      	b.n	8006c64 <USBH_Process+0x304>
    break;
 8006c4e:	bf00      	nop
 8006c50:	e008      	b.n	8006c64 <USBH_Process+0x304>
    break;
 8006c52:	bf00      	nop
 8006c54:	e006      	b.n	8006c64 <USBH_Process+0x304>
    break;
 8006c56:	bf00      	nop
 8006c58:	e004      	b.n	8006c64 <USBH_Process+0x304>
    break;
 8006c5a:	bf00      	nop
 8006c5c:	e002      	b.n	8006c64 <USBH_Process+0x304>
    break;
 8006c5e:	bf00      	nop
 8006c60:	e000      	b.n	8006c64 <USBH_Process+0x304>
    break;
 8006c62:	bf00      	nop
  }
 return USBH_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop

08006c70 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b088      	sub	sp, #32
 8006c74:	af04      	add	r7, sp, #16
 8006c76:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	785b      	ldrb	r3, [r3, #1]
 8006c80:	2b07      	cmp	r3, #7
 8006c82:	f200 80f8 	bhi.w	8006e76 <USBH_HandleEnum+0x206>
 8006c86:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <USBH_HandleEnum+0x1c>)
 8006c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8c:	08006cad 	.word	0x08006cad
 8006c90:	08006d1f 	.word	0x08006d1f
 8006c94:	08006d37 	.word	0x08006d37
 8006c98:	08006dad 	.word	0x08006dad
 8006c9c:	08006dc3 	.word	0x08006dc3
 8006ca0:	08006ddf 	.word	0x08006ddf
 8006ca4:	08006e13 	.word	0x08006e13
 8006ca8:	08006e47 	.word	0x08006e47
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8006cac:	2108      	movs	r1, #8
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f9ad 	bl	800700e <USBH_Get_DevDesc>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f040 80df 	bne.w	8006e7a <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	7919      	ldrb	r1, [r3, #4]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006ce0:	b292      	uxth	r2, r2
 8006ce2:	9202      	str	r2, [sp, #8]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	9201      	str	r2, [sp, #4]
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	4603      	mov	r3, r0
 8006cec:	2280      	movs	r2, #128	; 0x80
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fed8 	bl	8007aa4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	7959      	ldrb	r1, [r3, #5]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006d08:	b292      	uxth	r2, r2
 8006d0a:	9202      	str	r2, [sp, #8]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	9201      	str	r2, [sp, #4]
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	4603      	mov	r3, r0
 8006d14:	2200      	movs	r2, #0
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fec4 	bl	8007aa4 <USBH_OpenPipe>

    }
    break;
 8006d1c:	e0ad      	b.n	8006e7a <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8006d1e:	2112      	movs	r1, #18
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f974 	bl	800700e <USBH_Get_DevDesc>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f040 80a8 	bne.w	8006e7e <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2202      	movs	r2, #2
 8006d32:	705a      	strb	r2, [r3, #1]

    }
    break;
 8006d34:	e0a3      	b.n	8006e7e <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8006d36:	2101      	movs	r1, #1
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fa14 	bl	8007166 <USBH_SetAddress>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f040 809e 	bne.w	8006e82 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8006d46:	2002      	movs	r0, #2
 8006d48:	f001 ff89 	bl	8008c5e <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2203      	movs	r2, #3
 8006d58:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	7919      	ldrb	r1, [r3, #4]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006d6e:	b292      	uxth	r2, r2
 8006d70:	9202      	str	r2, [sp, #8]
 8006d72:	2200      	movs	r2, #0
 8006d74:	9201      	str	r2, [sp, #4]
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2280      	movs	r2, #128	; 0x80
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fe91 	bl	8007aa4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	7959      	ldrb	r1, [r3, #5]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006d96:	b292      	uxth	r2, r2
 8006d98:	9202      	str	r2, [sp, #8]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	9201      	str	r2, [sp, #4]
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	4603      	mov	r3, r0
 8006da2:	2200      	movs	r2, #0
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fe7d 	bl	8007aa4 <USBH_OpenPipe>
    }
    break;
 8006daa:	e06a      	b.n	8006e82 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8006dac:	2109      	movs	r1, #9
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f955 	bl	800705e <USBH_Get_CfgDesc>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d165      	bne.n	8006e86 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2204      	movs	r2, #4
 8006dbe:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006dc0:	e061      	b.n	8006e86 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8006dc8:	4619      	mov	r1, r3
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f947 	bl	800705e <USBH_Get_CfgDesc>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d159      	bne.n	8006e8a <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2205      	movs	r2, #5
 8006dda:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006ddc:	e055      	b.n	8006e8a <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d010      	beq.n	8006e0a <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006df4:	23ff      	movs	r3, #255	; 0xff
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f955 	bl	80070a6 <USBH_Get_StringDesc>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d145      	bne.n	8006e8e <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2206      	movs	r2, #6
 8006e06:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006e08:	e041      	b.n	8006e8e <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2206      	movs	r2, #6
 8006e0e:	705a      	strb	r2, [r3, #1]
    break;
 8006e10:	e03d      	b.n	8006e8e <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d010      	beq.n	8006e3e <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006e28:	23ff      	movs	r3, #255	; 0xff
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f93b 	bl	80070a6 <USBH_Get_StringDesc>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d12d      	bne.n	8006e92 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2207      	movs	r2, #7
 8006e3a:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006e3c:	e029      	b.n	8006e92 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2207      	movs	r2, #7
 8006e42:	705a      	strb	r2, [r3, #1]
    break;
 8006e44:	e025      	b.n	8006e92 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00f      	beq.n	8006e70 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006e5c:	23ff      	movs	r3, #255	; 0xff
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f921 	bl	80070a6 <USBH_Get_StringDesc>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d115      	bne.n	8006e96 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006e6e:	e012      	b.n	8006e96 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	73fb      	strb	r3, [r7, #15]
    break;
 8006e74:	e00f      	b.n	8006e96 <USBH_HandleEnum+0x226>

  default:
    break;
 8006e76:	bf00      	nop
 8006e78:	e00e      	b.n	8006e98 <USBH_HandleEnum+0x228>
    break;
 8006e7a:	bf00      	nop
 8006e7c:	e00c      	b.n	8006e98 <USBH_HandleEnum+0x228>
    break;
 8006e7e:	bf00      	nop
 8006e80:	e00a      	b.n	8006e98 <USBH_HandleEnum+0x228>
    break;
 8006e82:	bf00      	nop
 8006e84:	e008      	b.n	8006e98 <USBH_HandleEnum+0x228>
    break;
 8006e86:	bf00      	nop
 8006e88:	e006      	b.n	8006e98 <USBH_HandleEnum+0x228>
    break;
 8006e8a:	bf00      	nop
 8006e8c:	e004      	b.n	8006e98 <USBH_HandleEnum+0x228>
    break;
 8006e8e:	bf00      	nop
 8006e90:	e002      	b.n	8006e98 <USBH_HandleEnum+0x228>
    break;
 8006e92:	bf00      	nop
 8006e94:	e000      	b.n	8006e98 <USBH_HandleEnum+0x228>
    break;
 8006e96:	bf00      	nop
  }
  return Status;
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop

08006ea4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8006eb6:	bf00      	nop
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b082      	sub	sp, #8
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f804 	bl	8006ee6 <USBH_HandleSof>
}
 8006ede:	bf00      	nop
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b082      	sub	sp, #8
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b0b      	cmp	r3, #11
 8006ef6:	d10a      	bne.n	8006f0e <USBH_HandleSof+0x28>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d005      	beq.n	8006f0e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	4798      	blx	r3
  }
}
 8006f0e:	bf00      	nop
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006f26:	bf00      	nop
}
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b083      	sub	sp, #12
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006f42:	bf00      	nop
}
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10f      	bne.n	8006f9a <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00e      	beq.n	8006faa <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f92:	2104      	movs	r1, #4
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	4798      	blx	r3
 8006f98:	e007      	b.n	8006faa <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d102      	bne.n	8006faa <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f001 fd04 	bl	80089ca <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	791b      	ldrb	r3, [r3, #4]
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fdb8 	bl	8007b3e <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	795b      	ldrb	r3, [r3, #5]
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fdb2 	bl	8007b3e <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d005      	beq.n	8006ff8 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ff2:	2105      	movs	r1, #5
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f001 fccb 	bl	8008994 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2203      	movs	r2, #3
 8007002:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b086      	sub	sp, #24
 8007012:	af02      	add	r7, sp, #8
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	460b      	mov	r3, r1
 8007018:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007020:	78fb      	ldrb	r3, [r7, #3]
 8007022:	b29b      	uxth	r3, r3
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	4613      	mov	r3, r2
 8007028:	f44f 7280 	mov.w	r2, #256	; 0x100
 800702c:	2100      	movs	r1, #0
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f864 	bl	80070fc <USBH_GetDescriptor>
 8007034:	4603      	mov	r3, r0
 8007036:	73fb      	strb	r3, [r7, #15]
 8007038:	7bfb      	ldrb	r3, [r7, #15]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10a      	bne.n	8007054 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f203 3022 	addw	r0, r3, #802	; 0x322
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800704a:	78fa      	ldrb	r2, [r7, #3]
 800704c:	b292      	uxth	r2, r2
 800704e:	4619      	mov	r1, r3
 8007050:	f000 f918 	bl	8007284 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8007054:	7bfb      	ldrb	r3, [r7, #15]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800705e:	b580      	push	{r7, lr}
 8007060:	b086      	sub	sp, #24
 8007062:	af02      	add	r7, sp, #8
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	460b      	mov	r3, r1
 8007068:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	331c      	adds	r3, #28
 800706e:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8007070:	887b      	ldrh	r3, [r7, #2]
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f44f 7200 	mov.w	r2, #512	; 0x200
 800707a:	2100      	movs	r1, #0
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 f83d 	bl	80070fc <USBH_GetDescriptor>
 8007082:	4603      	mov	r3, r0
 8007084:	72fb      	strb	r3, [r7, #11]
 8007086:	7afb      	ldrb	r3, [r7, #11]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d107      	bne.n	800709c <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007092:	887a      	ldrh	r2, [r7, #2]
 8007094:	68f9      	ldr	r1, [r7, #12]
 8007096:	4618      	mov	r0, r3
 8007098:	f000 f964 	bl	8007364 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 800709c:	7afb      	ldrb	r3, [r7, #11]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b088      	sub	sp, #32
 80070aa:	af02      	add	r7, sp, #8
 80070ac:	60f8      	str	r0, [r7, #12]
 80070ae:	607a      	str	r2, [r7, #4]
 80070b0:	461a      	mov	r2, r3
 80070b2:	460b      	mov	r3, r1
 80070b4:	72fb      	strb	r3, [r7, #11]
 80070b6:	4613      	mov	r3, r2
 80070b8:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 80070ba:	7afb      	ldrb	r3, [r7, #11]
 80070bc:	b29b      	uxth	r3, r3
 80070be:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80070c2:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80070ca:	893b      	ldrh	r3, [r7, #8]
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	460b      	mov	r3, r1
 80070d0:	2100      	movs	r1, #0
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f000 f812 	bl	80070fc <USBH_GetDescriptor>
 80070d8:	4603      	mov	r3, r0
 80070da:	75fb      	strb	r3, [r7, #23]
 80070dc:	7dfb      	ldrb	r3, [r7, #23]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d107      	bne.n	80070f2 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80070e8:	893a      	ldrh	r2, [r7, #8]
 80070ea:	6879      	ldr	r1, [r7, #4]
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 fa37 	bl	8007560 <USBH_ParseStringDesc>
  }
  return status;
 80070f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3718      	adds	r7, #24
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	607b      	str	r3, [r7, #4]
 8007106:	460b      	mov	r3, r1
 8007108:	72fb      	strb	r3, [r7, #11]
 800710a:	4613      	mov	r3, r2
 800710c:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	789b      	ldrb	r3, [r3, #2]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d11c      	bne.n	8007150 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007116:	7afb      	ldrb	r3, [r7, #11]
 8007118:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800711c:	b2da      	uxtb	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2206      	movs	r2, #6
 8007126:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	893a      	ldrh	r2, [r7, #8]
 800712c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800712e:	893b      	ldrh	r3, [r7, #8]
 8007130:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007134:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007138:	d104      	bne.n	8007144 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f240 4209 	movw	r2, #1033	; 0x409
 8007140:	829a      	strh	r2, [r3, #20]
 8007142:	e002      	b.n	800714a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	8b3a      	ldrh	r2, [r7, #24]
 800714e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8007150:	8b3b      	ldrh	r3, [r7, #24]
 8007152:	461a      	mov	r2, r3
 8007154:	6879      	ldr	r1, [r7, #4]
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 fa50 	bl	80075fc <USBH_CtlReq>
 800715c:	4603      	mov	r3, r0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b082      	sub	sp, #8
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	460b      	mov	r3, r1
 8007170:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	789b      	ldrb	r3, [r3, #2]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d10f      	bne.n	800719a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2205      	movs	r2, #5
 8007184:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007186:	78fb      	ldrb	r3, [r7, #3]
 8007188:	b29a      	uxth	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800719a:	2200      	movs	r2, #0
 800719c:	2100      	movs	r1, #0
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fa2c 	bl	80075fc <USBH_CtlReq>
 80071a4:	4603      	mov	r3, r0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b082      	sub	sp, #8
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
 80071b6:	460b      	mov	r3, r1
 80071b8:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	789b      	ldrb	r3, [r3, #2]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d10e      	bne.n	80071e0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2209      	movs	r2, #9
 80071cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	887a      	ldrh	r2, [r7, #2]
 80071d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 80071e0:	2200      	movs	r2, #0
 80071e2:	2100      	movs	r1, #0
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fa09 	bl	80075fc <USBH_CtlReq>
 80071ea:	4603      	mov	r3, r0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	789b      	ldrb	r3, [r3, #2]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d10f      	bne.n	8007228 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2203      	movs	r2, #3
 8007212:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007214:	78fb      	ldrb	r3, [r7, #3]
 8007216:	b29a      	uxth	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007228:	2200      	movs	r2, #0
 800722a:	2100      	movs	r1, #0
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f9e5 	bl	80075fc <USBH_CtlReq>
 8007232:	4603      	mov	r3, r0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	460b      	mov	r3, r1
 8007246:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	789b      	ldrb	r3, [r3, #2]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d10f      	bne.n	8007270 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2202      	movs	r2, #2
 8007254:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2201      	movs	r2, #1
 800725a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007262:	78fb      	ldrb	r3, [r7, #3]
 8007264:	b29a      	uxth	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8007270:	2200      	movs	r2, #0
 8007272:	2100      	movs	r1, #0
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f9c1 	bl	80075fc <USBH_CtlReq>
 800727a:	4603      	mov	r3, r0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	4613      	mov	r3, r2
 8007290:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	781a      	ldrb	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	785a      	ldrb	r2, [r3, #1]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	3302      	adds	r3, #2
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	3303      	adds	r3, #3
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	021b      	lsls	r3, r3, #8
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	4313      	orrs	r3, r2
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	791a      	ldrb	r2, [r3, #4]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	795a      	ldrb	r2, [r3, #5]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	799a      	ldrb	r2, [r3, #6]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	79da      	ldrb	r2, [r3, #7]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80072de:	88fb      	ldrh	r3, [r7, #6]
 80072e0:	2b08      	cmp	r3, #8
 80072e2:	d939      	bls.n	8007358 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	3308      	adds	r3, #8
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	3309      	adds	r3, #9
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	021b      	lsls	r3, r3, #8
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	4313      	orrs	r3, r2
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	330a      	adds	r3, #10
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	b29a      	uxth	r2, r3
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	330b      	adds	r3, #11
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	b29b      	uxth	r3, r3
 8007310:	021b      	lsls	r3, r3, #8
 8007312:	b29b      	uxth	r3, r3
 8007314:	4313      	orrs	r3, r2
 8007316:	b29a      	uxth	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	330c      	adds	r3, #12
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	b29a      	uxth	r2, r3
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	330d      	adds	r3, #13
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	b29b      	uxth	r3, r3
 800732c:	021b      	lsls	r3, r3, #8
 800732e:	b29b      	uxth	r3, r3
 8007330:	4313      	orrs	r3, r2
 8007332:	b29a      	uxth	r2, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	7b9a      	ldrb	r2, [r3, #14]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	7bda      	ldrb	r2, [r3, #15]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	7c1a      	ldrb	r2, [r3, #16]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	7c5a      	ldrb	r2, [r3, #17]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	745a      	strb	r2, [r3, #17]
  }
}
 8007358:	bf00      	nop
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b08a      	sub	sp, #40	; 0x28
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	4613      	mov	r3, r2
 8007370:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800737c:	2300      	movs	r3, #0
 800737e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	781a      	ldrb	r2, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	785a      	ldrb	r2, [r3, #1]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	3302      	adds	r3, #2
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	b29a      	uxth	r2, r3
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	3303      	adds	r3, #3
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	021b      	lsls	r3, r3, #8
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	4313      	orrs	r3, r2
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	791a      	ldrb	r2, [r3, #4]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	795a      	ldrb	r2, [r3, #5]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	799a      	ldrb	r2, [r3, #6]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	79da      	ldrb	r2, [r3, #7]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	7a1a      	ldrb	r2, [r3, #8]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 80073da:	88fb      	ldrh	r3, [r7, #6]
 80073dc:	2b09      	cmp	r3, #9
 80073de:	d95f      	bls.n	80074a0 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80073e0:	2309      	movs	r3, #9
 80073e2:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80073e4:	2300      	movs	r3, #0
 80073e6:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80073e8:	e051      	b.n	800748e <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80073ea:	f107 0316 	add.w	r3, r7, #22
 80073ee:	4619      	mov	r1, r3
 80073f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073f2:	f000 f8e8 	bl	80075c6 <USBH_GetNextDesc>
 80073f6:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	785b      	ldrb	r3, [r3, #1]
 80073fc:	2b04      	cmp	r3, #4
 80073fe:	d146      	bne.n	800748e <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007400:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007404:	221a      	movs	r2, #26
 8007406:	fb02 f303 	mul.w	r3, r2, r3
 800740a:	3308      	adds	r3, #8
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	4413      	add	r3, r2
 8007410:	3302      	adds	r3, #2
 8007412:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8007414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007416:	69f8      	ldr	r0, [r7, #28]
 8007418:	f000 f846 	bl	80074a8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007422:	2300      	movs	r3, #0
 8007424:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007426:	e022      	b.n	800746e <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8007428:	f107 0316 	add.w	r3, r7, #22
 800742c:	4619      	mov	r1, r3
 800742e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007430:	f000 f8c9 	bl	80075c6 <USBH_GetNextDesc>
 8007434:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	785b      	ldrb	r3, [r3, #1]
 800743a:	2b05      	cmp	r3, #5
 800743c:	d117      	bne.n	800746e <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800743e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007442:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007446:	3201      	adds	r2, #1
 8007448:	00d2      	lsls	r2, r2, #3
 800744a:	211a      	movs	r1, #26
 800744c:	fb01 f303 	mul.w	r3, r1, r3
 8007450:	4413      	add	r3, r2
 8007452:	3308      	adds	r3, #8
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	4413      	add	r3, r2
 8007458:	3304      	adds	r3, #4
 800745a:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800745c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800745e:	69b8      	ldr	r0, [r7, #24]
 8007460:	f000 f851 	bl	8007506 <USBH_ParseEPDesc>
            ep_ix++;
 8007464:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007468:	3301      	adds	r3, #1
 800746a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	791b      	ldrb	r3, [r3, #4]
 8007472:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007476:	429a      	cmp	r2, r3
 8007478:	d204      	bcs.n	8007484 <USBH_ParseCfgDesc+0x120>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	885a      	ldrh	r2, [r3, #2]
 800747e:	8afb      	ldrh	r3, [r7, #22]
 8007480:	429a      	cmp	r2, r3
 8007482:	d8d1      	bhi.n	8007428 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007484:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007488:	3301      	adds	r3, #1
 800748a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800748e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007492:	2b01      	cmp	r3, #1
 8007494:	d804      	bhi.n	80074a0 <USBH_ParseCfgDesc+0x13c>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	885a      	ldrh	r2, [r3, #2]
 800749a:	8afb      	ldrh	r3, [r7, #22]
 800749c:	429a      	cmp	r2, r3
 800749e:	d8a4      	bhi.n	80073ea <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80074a0:	bf00      	nop
 80074a2:	3728      	adds	r7, #40	; 0x28
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	781a      	ldrb	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	785a      	ldrb	r2, [r3, #1]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	789a      	ldrb	r2, [r3, #2]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	78da      	ldrb	r2, [r3, #3]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	791a      	ldrb	r2, [r3, #4]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	795a      	ldrb	r2, [r3, #5]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	799a      	ldrb	r2, [r3, #6]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	79da      	ldrb	r2, [r3, #7]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	7a1a      	ldrb	r2, [r3, #8]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	721a      	strb	r2, [r3, #8]
}
 80074fa:	bf00      	nop
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8007506:	b480      	push	{r7}
 8007508:	b083      	sub	sp, #12
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	781a      	ldrb	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	785a      	ldrb	r2, [r3, #1]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	789a      	ldrb	r2, [r3, #2]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	78da      	ldrb	r2, [r3, #3]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	3304      	adds	r3, #4
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	b29a      	uxth	r2, r3
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	3305      	adds	r3, #5
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	b29b      	uxth	r3, r3
 8007540:	021b      	lsls	r3, r3, #8
 8007542:	b29b      	uxth	r3, r3
 8007544:	4313      	orrs	r3, r2
 8007546:	b29a      	uxth	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	799a      	ldrb	r2, [r3, #6]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	719a      	strb	r2, [r3, #6]
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8007560:	b480      	push	{r7}
 8007562:	b087      	sub	sp, #28
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	4613      	mov	r3, r2
 800756c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3301      	adds	r3, #1
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	2b03      	cmp	r3, #3
 8007576:	d120      	bne.n	80075ba <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	1e9a      	subs	r2, r3, #2
 800757e:	88fb      	ldrh	r3, [r7, #6]
 8007580:	4293      	cmp	r3, r2
 8007582:	bf28      	it	cs
 8007584:	4613      	movcs	r3, r2
 8007586:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	3302      	adds	r3, #2
 800758c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800758e:	2300      	movs	r3, #0
 8007590:	82fb      	strh	r3, [r7, #22]
 8007592:	e00b      	b.n	80075ac <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007594:	8afb      	ldrh	r3, [r7, #22]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	4413      	add	r3, r2
 800759a:	781a      	ldrb	r2, [r3, #0]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	701a      	strb	r2, [r3, #0]
      pdest++;
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	3301      	adds	r3, #1
 80075a4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80075a6:	8afb      	ldrh	r3, [r7, #22]
 80075a8:	3302      	adds	r3, #2
 80075aa:	82fb      	strh	r3, [r7, #22]
 80075ac:	8afa      	ldrh	r2, [r7, #22]
 80075ae:	8abb      	ldrh	r3, [r7, #20]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d3ef      	bcc.n	8007594 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	2200      	movs	r2, #0
 80075b8:	701a      	strb	r2, [r3, #0]
  }
}
 80075ba:	bf00      	nop
 80075bc:	371c      	adds	r7, #28
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b085      	sub	sp, #20
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	881a      	ldrh	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	b29b      	uxth	r3, r3
 80075da:	4413      	add	r3, r2
 80075dc:	b29a      	uxth	r2, r3
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4413      	add	r3, r2
 80075ec:	60fb      	str	r3, [r7, #12]

  return(pnext);
 80075ee:	68fb      	ldr	r3, [r7, #12]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3714      	adds	r7, #20
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b086      	sub	sp, #24
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	4613      	mov	r3, r2
 8007608:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800760a:	2301      	movs	r3, #1
 800760c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	789b      	ldrb	r3, [r3, #2]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d002      	beq.n	800761c <USBH_CtlReq+0x20>
 8007616:	2b02      	cmp	r3, #2
 8007618:	d00f      	beq.n	800763a <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 800761a:	e034      	b.n	8007686 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	88fa      	ldrh	r2, [r7, #6]
 8007626:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2201      	movs	r2, #1
 800762c:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2202      	movs	r2, #2
 8007632:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8007634:	2301      	movs	r3, #1
 8007636:	75fb      	strb	r3, [r7, #23]
    break;
 8007638:	e025      	b.n	8007686 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f000 f828 	bl	8007690 <USBH_HandleControl>
 8007640:	4603      	mov	r3, r0
 8007642:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8007644:	7dfb      	ldrb	r3, [r7, #23]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d108      	bne.n	800765c <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2201      	movs	r2, #1
 800764e:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	75fb      	strb	r3, [r7, #23]
    break;
 800765a:	e013      	b.n	8007684 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 800765c:	7dfb      	ldrb	r3, [r7, #23]
 800765e:	2b03      	cmp	r3, #3
 8007660:	d108      	bne.n	8007674 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2201      	movs	r2, #1
 8007666:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800766e:	2303      	movs	r3, #3
 8007670:	75fb      	strb	r3, [r7, #23]
    break;
 8007672:	e007      	b.n	8007684 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8007674:	7dfb      	ldrb	r3, [r7, #23]
 8007676:	2b02      	cmp	r3, #2
 8007678:	d104      	bne.n	8007684 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2201      	movs	r2, #1
 800767e:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8007680:	2302      	movs	r3, #2
 8007682:	75fb      	strb	r3, [r7, #23]
    break;
 8007684:	bf00      	nop
  }
  return status;
 8007686:	7dfb      	ldrb	r3, [r7, #23]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3718      	adds	r7, #24
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af02      	add	r7, sp, #8
 8007696:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007698:	2301      	movs	r3, #1
 800769a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800769c:	2300      	movs	r3, #0
 800769e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	7e1b      	ldrb	r3, [r3, #24]
 80076a4:	3b01      	subs	r3, #1
 80076a6:	2b0a      	cmp	r3, #10
 80076a8:	f200 814c 	bhi.w	8007944 <USBH_HandleControl+0x2b4>
 80076ac:	a201      	add	r2, pc, #4	; (adr r2, 80076b4 <USBH_HandleControl+0x24>)
 80076ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b2:	bf00      	nop
 80076b4:	080076e1 	.word	0x080076e1
 80076b8:	080076fb 	.word	0x080076fb
 80076bc:	08007765 	.word	0x08007765
 80076c0:	0800778b 	.word	0x0800778b
 80076c4:	080077c3 	.word	0x080077c3
 80076c8:	080077ef 	.word	0x080077ef
 80076cc:	08007841 	.word	0x08007841
 80076d0:	08007863 	.word	0x08007863
 80076d4:	0800789f 	.word	0x0800789f
 80076d8:	080078c7 	.word	0x080078c7
 80076dc:	08007905 	.word	0x08007905
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f103 0110 	add.w	r1, r3, #16
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	795b      	ldrb	r3, [r3, #5]
 80076ea:	461a      	mov	r2, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 f939 	bl	8007964 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2202      	movs	r2, #2
 80076f6:	761a      	strb	r2, [r3, #24]
    break;
 80076f8:	e12f      	b.n	800795a <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	795b      	ldrb	r3, [r3, #5]
 80076fe:	4619      	mov	r1, r3
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f001 fa4f 	bl	8008ba4 <USBH_LL_GetURBState>
 8007706:	4603      	mov	r3, r0
 8007708:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800770a:	7bbb      	ldrb	r3, [r7, #14]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d11e      	bne.n	800774e <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	7c1b      	ldrb	r3, [r3, #16]
 8007714:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007718:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	8adb      	ldrh	r3, [r3, #22]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00a      	beq.n	8007738 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8007722:	7b7b      	ldrb	r3, [r7, #13]
 8007724:	2b80      	cmp	r3, #128	; 0x80
 8007726:	d103      	bne.n	8007730 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2203      	movs	r2, #3
 800772c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800772e:	e10b      	b.n	8007948 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2205      	movs	r2, #5
 8007734:	761a      	strb	r2, [r3, #24]
    break;
 8007736:	e107      	b.n	8007948 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8007738:	7b7b      	ldrb	r3, [r7, #13]
 800773a:	2b80      	cmp	r3, #128	; 0x80
 800773c:	d103      	bne.n	8007746 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2209      	movs	r2, #9
 8007742:	761a      	strb	r2, [r3, #24]
    break;
 8007744:	e100      	b.n	8007948 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2207      	movs	r2, #7
 800774a:	761a      	strb	r2, [r3, #24]
    break;
 800774c:	e0fc      	b.n	8007948 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800774e:	7bbb      	ldrb	r3, [r7, #14]
 8007750:	2b04      	cmp	r3, #4
 8007752:	d003      	beq.n	800775c <USBH_HandleControl+0xcc>
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	2b02      	cmp	r3, #2
 8007758:	f040 80f6 	bne.w	8007948 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	220b      	movs	r2, #11
 8007760:	761a      	strb	r2, [r3, #24]
    break;
 8007762:	e0f1      	b.n	8007948 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800776a:	b29a      	uxth	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6899      	ldr	r1, [r3, #8]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	899a      	ldrh	r2, [r3, #12]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	791b      	ldrb	r3, [r3, #4]
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 f930 	bl	80079e2 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2204      	movs	r2, #4
 8007786:	761a      	strb	r2, [r3, #24]
    break;
 8007788:	e0e7      	b.n	800795a <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	791b      	ldrb	r3, [r3, #4]
 800778e:	4619      	mov	r1, r3
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f001 fa07 	bl	8008ba4 <USBH_LL_GetURBState>
 8007796:	4603      	mov	r3, r0
 8007798:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800779a:	7bbb      	ldrb	r3, [r7, #14]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d102      	bne.n	80077a6 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2209      	movs	r2, #9
 80077a4:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 80077a6:	7bbb      	ldrb	r3, [r7, #14]
 80077a8:	2b05      	cmp	r3, #5
 80077aa:	d102      	bne.n	80077b2 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 80077ac:	2303      	movs	r3, #3
 80077ae:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80077b0:	e0cc      	b.n	800794c <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 80077b2:	7bbb      	ldrb	r3, [r7, #14]
 80077b4:	2b04      	cmp	r3, #4
 80077b6:	f040 80c9 	bne.w	800794c <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	220b      	movs	r2, #11
 80077be:	761a      	strb	r2, [r3, #24]
    break;
 80077c0:	e0c4      	b.n	800794c <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6899      	ldr	r1, [r3, #8]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	899a      	ldrh	r2, [r3, #12]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	7958      	ldrb	r0, [r3, #5]
 80077ce:	2301      	movs	r3, #1
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	4603      	mov	r3, r0
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f8df 	bl	8007998 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2206      	movs	r2, #6
 80077ea:	761a      	strb	r2, [r3, #24]
    break;
 80077ec:	e0b5      	b.n	800795a <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	795b      	ldrb	r3, [r3, #5]
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f001 f9d5 	bl	8008ba4 <USBH_LL_GetURBState>
 80077fa:	4603      	mov	r3, r0
 80077fc:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 80077fe:	7bbb      	ldrb	r3, [r7, #14]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d103      	bne.n	800780c <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2207      	movs	r2, #7
 8007808:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800780a:	e0a1      	b.n	8007950 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	2b05      	cmp	r3, #5
 8007810:	d105      	bne.n	800781e <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	220c      	movs	r2, #12
 8007816:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007818:	2303      	movs	r3, #3
 800781a:	73fb      	strb	r3, [r7, #15]
    break;
 800781c:	e098      	b.n	8007950 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800781e:	7bbb      	ldrb	r3, [r7, #14]
 8007820:	2b02      	cmp	r3, #2
 8007822:	d103      	bne.n	800782c <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2205      	movs	r2, #5
 8007828:	761a      	strb	r2, [r3, #24]
    break;
 800782a:	e091      	b.n	8007950 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 800782c:	7bbb      	ldrb	r3, [r7, #14]
 800782e:	2b04      	cmp	r3, #4
 8007830:	f040 808e 	bne.w	8007950 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	220b      	movs	r2, #11
 8007838:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800783a:	2302      	movs	r3, #2
 800783c:	73fb      	strb	r3, [r7, #15]
    break;
 800783e:	e087      	b.n	8007950 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	791b      	ldrb	r3, [r3, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	2100      	movs	r1, #0
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f8ca 	bl	80079e2 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007854:	b29a      	uxth	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2208      	movs	r2, #8
 800785e:	761a      	strb	r2, [r3, #24]

    break;
 8007860:	e07b      	b.n	800795a <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	791b      	ldrb	r3, [r3, #4]
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f001 f99b 	bl	8008ba4 <USBH_LL_GetURBState>
 800786e:	4603      	mov	r3, r0
 8007870:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8007872:	7bbb      	ldrb	r3, [r7, #14]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d105      	bne.n	8007884 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	220d      	movs	r2, #13
 800787c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007882:	e067      	b.n	8007954 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8007884:	7bbb      	ldrb	r3, [r7, #14]
 8007886:	2b04      	cmp	r3, #4
 8007888:	d103      	bne.n	8007892 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	220b      	movs	r2, #11
 800788e:	761a      	strb	r2, [r3, #24]
    break;
 8007890:	e060      	b.n	8007954 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8007892:	7bbb      	ldrb	r3, [r7, #14]
 8007894:	2b05      	cmp	r3, #5
 8007896:	d15d      	bne.n	8007954 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8007898:	2303      	movs	r3, #3
 800789a:	73fb      	strb	r3, [r7, #15]
    break;
 800789c:	e05a      	b.n	8007954 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	795a      	ldrb	r2, [r3, #5]
 80078a2:	2301      	movs	r3, #1
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	4613      	mov	r3, r2
 80078a8:	2200      	movs	r2, #0
 80078aa:	2100      	movs	r1, #0
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 f873 	bl	8007998 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	220a      	movs	r2, #10
 80078c2:	761a      	strb	r2, [r3, #24]
    break;
 80078c4:	e049      	b.n	800795a <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	795b      	ldrb	r3, [r3, #5]
 80078ca:	4619      	mov	r1, r3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f001 f969 	bl	8008ba4 <USBH_LL_GetURBState>
 80078d2:	4603      	mov	r3, r0
 80078d4:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d105      	bne.n	80078e8 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 80078dc:	2300      	movs	r3, #0
 80078de:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	220d      	movs	r2, #13
 80078e4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 80078e6:	e037      	b.n	8007958 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80078e8:	7bbb      	ldrb	r3, [r7, #14]
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d103      	bne.n	80078f6 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2209      	movs	r2, #9
 80078f2:	761a      	strb	r2, [r3, #24]
    break;
 80078f4:	e030      	b.n	8007958 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 80078f6:	7bbb      	ldrb	r3, [r7, #14]
 80078f8:	2b04      	cmp	r3, #4
 80078fa:	d12d      	bne.n	8007958 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	220b      	movs	r2, #11
 8007900:	761a      	strb	r2, [r3, #24]
    break;
 8007902:	e029      	b.n	8007958 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	7e5b      	ldrb	r3, [r3, #25]
 8007908:	3301      	adds	r3, #1
 800790a:	b2da      	uxtb	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	765a      	strb	r2, [r3, #25]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	7e5b      	ldrb	r3, [r3, #25]
 8007914:	2b02      	cmp	r3, #2
 8007916:	d809      	bhi.n	800792c <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f001 f856 	bl	80089ca <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800792a:	e016      	b.n	800795a <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007932:	2106      	movs	r1, #6
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800793e:	2302      	movs	r3, #2
 8007940:	73fb      	strb	r3, [r7, #15]
    break;
 8007942:	e00a      	b.n	800795a <USBH_HandleControl+0x2ca>

  default:
    break;
 8007944:	bf00      	nop
 8007946:	e008      	b.n	800795a <USBH_HandleControl+0x2ca>
    break;
 8007948:	bf00      	nop
 800794a:	e006      	b.n	800795a <USBH_HandleControl+0x2ca>
    break;
 800794c:	bf00      	nop
 800794e:	e004      	b.n	800795a <USBH_HandleControl+0x2ca>
    break;
 8007950:	bf00      	nop
 8007952:	e002      	b.n	800795a <USBH_HandleControl+0x2ca>
    break;
 8007954:	bf00      	nop
 8007956:	e000      	b.n	800795a <USBH_HandleControl+0x2ca>
    break;
 8007958:	bf00      	nop
  }
  return status;
 800795a:	7bfb      	ldrb	r3, [r7, #15]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b088      	sub	sp, #32
 8007968:	af04      	add	r7, sp, #16
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	4613      	mov	r3, r2
 8007970:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007972:	79f9      	ldrb	r1, [r7, #7]
 8007974:	2300      	movs	r3, #0
 8007976:	9303      	str	r3, [sp, #12]
 8007978:	2308      	movs	r3, #8
 800797a:	9302      	str	r3, [sp, #8]
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	9301      	str	r3, [sp, #4]
 8007980:	2300      	movs	r3, #0
 8007982:	9300      	str	r3, [sp, #0]
 8007984:	2300      	movs	r3, #0
 8007986:	2200      	movs	r2, #0
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f001 f8da 	bl	8008b42 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b088      	sub	sp, #32
 800799c:	af04      	add	r7, sp, #16
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	4611      	mov	r1, r2
 80079a4:	461a      	mov	r2, r3
 80079a6:	460b      	mov	r3, r1
 80079a8:	80fb      	strh	r3, [r7, #6]
 80079aa:	4613      	mov	r3, r2
 80079ac:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80079b8:	2300      	movs	r3, #0
 80079ba:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80079bc:	7979      	ldrb	r1, [r7, #5]
 80079be:	7e3b      	ldrb	r3, [r7, #24]
 80079c0:	9303      	str	r3, [sp, #12]
 80079c2:	88fb      	ldrh	r3, [r7, #6]
 80079c4:	9302      	str	r3, [sp, #8]
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	9301      	str	r3, [sp, #4]
 80079ca:	2301      	movs	r3, #1
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	2300      	movs	r3, #0
 80079d0:	2200      	movs	r2, #0
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f001 f8b5 	bl	8008b42 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b088      	sub	sp, #32
 80079e6:	af04      	add	r7, sp, #16
 80079e8:	60f8      	str	r0, [r7, #12]
 80079ea:	60b9      	str	r1, [r7, #8]
 80079ec:	4611      	mov	r1, r2
 80079ee:	461a      	mov	r2, r3
 80079f0:	460b      	mov	r3, r1
 80079f2:	80fb      	strh	r3, [r7, #6]
 80079f4:	4613      	mov	r3, r2
 80079f6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80079f8:	7979      	ldrb	r1, [r7, #5]
 80079fa:	2300      	movs	r3, #0
 80079fc:	9303      	str	r3, [sp, #12]
 80079fe:	88fb      	ldrh	r3, [r7, #6]
 8007a00:	9302      	str	r3, [sp, #8]
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	9301      	str	r3, [sp, #4]
 8007a06:	2301      	movs	r3, #1
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f001 f897 	bl	8008b42 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007a14:	2300      	movs	r3, #0

}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b088      	sub	sp, #32
 8007a22:	af04      	add	r7, sp, #16
 8007a24:	60f8      	str	r0, [r7, #12]
 8007a26:	60b9      	str	r1, [r7, #8]
 8007a28:	4611      	mov	r1, r2
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	80fb      	strh	r3, [r7, #6]
 8007a30:	4613      	mov	r3, r2
 8007a32:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d001      	beq.n	8007a42 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007a42:	7979      	ldrb	r1, [r7, #5]
 8007a44:	7e3b      	ldrb	r3, [r7, #24]
 8007a46:	9303      	str	r3, [sp, #12]
 8007a48:	88fb      	ldrh	r3, [r7, #6]
 8007a4a:	9302      	str	r3, [sp, #8]
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	9301      	str	r3, [sp, #4]
 8007a50:	2301      	movs	r3, #1
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	2302      	movs	r3, #2
 8007a56:	2200      	movs	r2, #0
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f001 f872 	bl	8008b42 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b088      	sub	sp, #32
 8007a6c:	af04      	add	r7, sp, #16
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	4611      	mov	r1, r2
 8007a74:	461a      	mov	r2, r3
 8007a76:	460b      	mov	r3, r1
 8007a78:	80fb      	strh	r3, [r7, #6]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007a7e:	7979      	ldrb	r1, [r7, #5]
 8007a80:	2300      	movs	r3, #0
 8007a82:	9303      	str	r3, [sp, #12]
 8007a84:	88fb      	ldrh	r3, [r7, #6]
 8007a86:	9302      	str	r3, [sp, #8]
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	9301      	str	r3, [sp, #4]
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	2302      	movs	r3, #2
 8007a92:	2201      	movs	r2, #1
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f001 f854 	bl	8008b42 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af04      	add	r7, sp, #16
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	4608      	mov	r0, r1
 8007aae:	4611      	mov	r1, r2
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	70fb      	strb	r3, [r7, #3]
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	70bb      	strb	r3, [r7, #2]
 8007aba:	4613      	mov	r3, r2
 8007abc:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8007abe:	7878      	ldrb	r0, [r7, #1]
 8007ac0:	78ba      	ldrb	r2, [r7, #2]
 8007ac2:	78f9      	ldrb	r1, [r7, #3]
 8007ac4:	8b3b      	ldrh	r3, [r7, #24]
 8007ac6:	9302      	str	r3, [sp, #8]
 8007ac8:	7d3b      	ldrb	r3, [r7, #20]
 8007aca:	9301      	str	r3, [sp, #4]
 8007acc:	7c3b      	ldrb	r3, [r7, #16]
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 ffe7 	bl	8008aa6 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8007ad8:	2300      	movs	r3, #0

}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b082      	sub	sp, #8
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
 8007aea:	460b      	mov	r3, r1
 8007aec:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8007aee:	78fb      	ldrb	r3, [r7, #3]
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f001 f806 	bl	8008b04 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007af8:	2300      	movs	r3, #0

}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b084      	sub	sp, #16
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f831 	bl	8007b76 <USBH_GetFreePipe>
 8007b14:	4603      	mov	r3, r0
 8007b16:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007b18:	89fb      	ldrh	r3, [r7, #14]
 8007b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d007      	beq.n	8007b32 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8007b22:	78fb      	ldrb	r3, [r7, #3]
 8007b24:	89fa      	ldrh	r2, [r7, #14]
 8007b26:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	32e0      	adds	r2, #224	; 0xe0
 8007b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8007b32:	89fb      	ldrh	r3, [r7, #14]
 8007b34:	b2db      	uxtb	r3, r3
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b083      	sub	sp, #12
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	460b      	mov	r3, r1
 8007b48:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8007b4a:	78fb      	ldrb	r3, [r7, #3]
 8007b4c:	2b0a      	cmp	r3, #10
 8007b4e:	d80b      	bhi.n	8007b68 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8007b50:	78fa      	ldrb	r2, [r7, #3]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	32e0      	adds	r2, #224	; 0xe0
 8007b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b5a:	78fa      	ldrb	r2, [r7, #3]
 8007b5c:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	32e0      	adds	r2, #224	; 0xe0
 8007b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b085      	sub	sp, #20
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007b82:	2300      	movs	r3, #0
 8007b84:	73fb      	strb	r3, [r7, #15]
 8007b86:	e00e      	b.n	8007ba6 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007b88:	7bfa      	ldrb	r2, [r7, #15]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	32e0      	adds	r2, #224	; 0xe0
 8007b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d102      	bne.n	8007ba0 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	e007      	b.n	8007bb0 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8007ba0:	7bfb      	ldrb	r3, [r7, #15]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	73fb      	strb	r3, [r7, #15]
 8007ba6:	7bfb      	ldrb	r3, [r7, #15]
 8007ba8:	2b0a      	cmp	r3, #10
 8007baa:	d9ed      	bls.n	8007b88 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8007bac:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <delay>:


  }
}*/
void delay (uint32_t us)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8007bc4:	4b08      	ldr	r3, [pc, #32]	; (8007be8 <delay+0x2c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim4))<us);
 8007bcc:	bf00      	nop
 8007bce:	4b06      	ldr	r3, [pc, #24]	; (8007be8 <delay+0x2c>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d8f9      	bhi.n	8007bce <delay+0x12>
}
 8007bda:	bf00      	nop
 8007bdc:	370c      	adds	r7, #12
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	200000cc 	.word	0x200000cc

08007bec <hcsr04_read>:
uint32_t hcsr04_read (void)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
	uint32_t local_time=0;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);  // pull the TRIG pin HIGH
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007bfc:	4818      	ldr	r0, [pc, #96]	; (8007c60 <hcsr04_read+0x74>)
 8007bfe:	f7f9 fb89 	bl	8001314 <HAL_GPIO_WritePin>
	delay(2);  // wait for 2 us
 8007c02:	2002      	movs	r0, #2
 8007c04:	f7ff ffda 	bl	8007bbc <delay>


	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c0e:	4814      	ldr	r0, [pc, #80]	; (8007c60 <hcsr04_read+0x74>)
 8007c10:	f7f9 fb80 	bl	8001314 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8007c14:	200a      	movs	r0, #10
 8007c16:	f7ff ffd1 	bl	8007bbc <delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);  // pull the TRIG pin low
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c20:	480f      	ldr	r0, [pc, #60]	; (8007c60 <hcsr04_read+0x74>)
 8007c22:	f7f9 fb77 	bl	8001314 <HAL_GPIO_WritePin>

	// read the time for which the pin is high

	while (!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8)));  // wait for the ECHO pin to go high
 8007c26:	bf00      	nop
 8007c28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007c2c:	480c      	ldr	r0, [pc, #48]	; (8007c60 <hcsr04_read+0x74>)
 8007c2e:	f7f9 fb59 	bl	80012e4 <HAL_GPIO_ReadPin>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d0f7      	beq.n	8007c28 <hcsr04_read+0x3c>
	while (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8))    // while the pin is high
 8007c38:	e005      	b.n	8007c46 <hcsr04_read+0x5a>
	 {
		local_time++;   // measure time for which the pin is high
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	607b      	str	r3, [r7, #4]
		delay (1);
 8007c40:	2001      	movs	r0, #1
 8007c42:	f7ff ffbb 	bl	8007bbc <delay>
	while (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8))    // while the pin is high
 8007c46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007c4a:	4805      	ldr	r0, [pc, #20]	; (8007c60 <hcsr04_read+0x74>)
 8007c4c:	f7f9 fb4a 	bl	80012e4 <HAL_GPIO_ReadPin>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1f1      	bne.n	8007c3a <hcsr04_read+0x4e>
	 }
	return local_time;
 8007c56:	687b      	ldr	r3, [r7, #4]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	40020c00 	.word	0x40020c00
 8007c64:	00000000 	.word	0x00000000

08007c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007c68:	b590      	push	{r4, r7, lr}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007c6e:	f7f8 fff9 	bl	8000c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007c72:	f000 f83d 	bl	8007cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007c76:	f000 fa15 	bl	80080a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8007c7a:	f000 f8bb 	bl	8007df4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8007c7e:	f000 f8e7 	bl	8007e50 <MX_I2S3_Init>
  MX_SPI1_Init();
 8007c82:	f000 f915 	bl	8007eb0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8007c86:	f000 fd35 	bl	80086f4 <MX_USB_HOST_Init>
  MX_TIM3_Init();
 8007c8a:	f000 f947 	bl	8007f1c <MX_TIM3_Init>
  MX_TIM4_Init();
 8007c8e:	f000 f993 	bl	8007fb8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8007c92:	210c      	movs	r1, #12
 8007c94:	4814      	ldr	r0, [pc, #80]	; (8007ce8 <main+0x80>)
 8007c96:	f7fc fbe5 	bl	8004464 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8007c9a:	f000 fd51 	bl	8008740 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    uint32_t sensor_time = hcsr04_read();
 8007c9e:	f7ff ffa5 	bl	8007bec <hcsr04_read>
 8007ca2:	6078      	str	r0, [r7, #4]
    dist  = sensor_time * .034/2;
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f7f8 fbd1 	bl	800044c <__aeabi_ui2d>
 8007caa:	a30d      	add	r3, pc, #52	; (adr r3, 8007ce0 <main+0x78>)
 8007cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb0:	f7f8 fc46 	bl	8000540 <__aeabi_dmul>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	4618      	mov	r0, r3
 8007cba:	4621      	mov	r1, r4
 8007cbc:	f04f 0200 	mov.w	r2, #0
 8007cc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007cc4:	f7f8 fd66 	bl	8000794 <__aeabi_ddiv>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	460c      	mov	r4, r1
 8007ccc:	4a07      	ldr	r2, [pc, #28]	; (8007cec <main+0x84>)
 8007cce:	e9c2 3400 	strd	r3, r4, [r2]
    HAL_Delay(200);
 8007cd2:	20c8      	movs	r0, #200	; 0xc8
 8007cd4:	f7f9 f838 	bl	8000d48 <HAL_Delay>
  {
 8007cd8:	e7df      	b.n	8007c9a <main+0x32>
 8007cda:	bf00      	nop
 8007cdc:	f3af 8000 	nop.w
 8007ce0:	b020c49c 	.word	0xb020c49c
 8007ce4:	3fa16872 	.word	0x3fa16872
 8007ce8:	200000cc 	.word	0x200000cc
 8007cec:	200000b0 	.word	0x200000b0

08007cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b098      	sub	sp, #96	; 0x60
 8007cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007cf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007cfa:	2230      	movs	r2, #48	; 0x30
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f001 f864 	bl	8008dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007d04:	f107 031c 	add.w	r3, r7, #28
 8007d08:	2200      	movs	r2, #0
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	605a      	str	r2, [r3, #4]
 8007d0e:	609a      	str	r2, [r3, #8]
 8007d10:	60da      	str	r2, [r3, #12]
 8007d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007d14:	f107 030c 	add.w	r3, r7, #12
 8007d18:	2200      	movs	r2, #0
 8007d1a:	601a      	str	r2, [r3, #0]
 8007d1c:	605a      	str	r2, [r3, #4]
 8007d1e:	609a      	str	r2, [r3, #8]
 8007d20:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d22:	2300      	movs	r3, #0
 8007d24:	60bb      	str	r3, [r7, #8]
 8007d26:	4b31      	ldr	r3, [pc, #196]	; (8007dec <SystemClock_Config+0xfc>)
 8007d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2a:	4a30      	ldr	r2, [pc, #192]	; (8007dec <SystemClock_Config+0xfc>)
 8007d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d30:	6413      	str	r3, [r2, #64]	; 0x40
 8007d32:	4b2e      	ldr	r3, [pc, #184]	; (8007dec <SystemClock_Config+0xfc>)
 8007d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d3a:	60bb      	str	r3, [r7, #8]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007d3e:	2300      	movs	r3, #0
 8007d40:	607b      	str	r3, [r7, #4]
 8007d42:	4b2b      	ldr	r3, [pc, #172]	; (8007df0 <SystemClock_Config+0x100>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a2a      	ldr	r2, [pc, #168]	; (8007df0 <SystemClock_Config+0x100>)
 8007d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d4c:	6013      	str	r3, [r2, #0]
 8007d4e:	4b28      	ldr	r3, [pc, #160]	; (8007df0 <SystemClock_Config+0x100>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d56:	607b      	str	r3, [r7, #4]
 8007d58:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007d5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007d64:	2302      	movs	r3, #2
 8007d66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007d68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007d6e:	2308      	movs	r3, #8
 8007d70:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8007d72:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8007d76:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007d78:	2302      	movs	r3, #2
 8007d7a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007d7c:	2307      	movs	r3, #7
 8007d7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007d80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fb fd1d 	bl	80037c4 <HAL_RCC_OscConfig>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d001      	beq.n	8007d94 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8007d90:	f000 fa8c 	bl	80082ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007d94:	230f      	movs	r3, #15
 8007d96:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007d98:	2302      	movs	r3, #2
 8007d9a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007da0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007da4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007da6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007daa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007dac:	f107 031c 	add.w	r3, r7, #28
 8007db0:	2105      	movs	r1, #5
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7fb ff76 	bl	8003ca4 <HAL_RCC_ClockConfig>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d001      	beq.n	8007dc2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8007dbe:	f000 fa75 	bl	80082ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8007dc6:	23c0      	movs	r3, #192	; 0xc0
 8007dc8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8007dca:	2302      	movs	r3, #2
 8007dcc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007dce:	f107 030c 	add.w	r3, r7, #12
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fc f944 	bl	8004060 <HAL_RCCEx_PeriphCLKConfig>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8007dde:	f000 fa65 	bl	80082ac <Error_Handler>
  }
}
 8007de2:	bf00      	nop
 8007de4:	3760      	adds	r7, #96	; 0x60
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	40023800 	.word	0x40023800
 8007df0:	40007000 	.word	0x40007000

08007df4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007df8:	4b12      	ldr	r3, [pc, #72]	; (8007e44 <MX_I2C1_Init+0x50>)
 8007dfa:	4a13      	ldr	r2, [pc, #76]	; (8007e48 <MX_I2C1_Init+0x54>)
 8007dfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007dfe:	4b11      	ldr	r3, [pc, #68]	; (8007e44 <MX_I2C1_Init+0x50>)
 8007e00:	4a12      	ldr	r2, [pc, #72]	; (8007e4c <MX_I2C1_Init+0x58>)
 8007e02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007e04:	4b0f      	ldr	r3, [pc, #60]	; (8007e44 <MX_I2C1_Init+0x50>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007e0a:	4b0e      	ldr	r3, [pc, #56]	; (8007e44 <MX_I2C1_Init+0x50>)
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007e10:	4b0c      	ldr	r3, [pc, #48]	; (8007e44 <MX_I2C1_Init+0x50>)
 8007e12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007e16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007e18:	4b0a      	ldr	r3, [pc, #40]	; (8007e44 <MX_I2C1_Init+0x50>)
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007e1e:	4b09      	ldr	r3, [pc, #36]	; (8007e44 <MX_I2C1_Init+0x50>)
 8007e20:	2200      	movs	r2, #0
 8007e22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007e24:	4b07      	ldr	r3, [pc, #28]	; (8007e44 <MX_I2C1_Init+0x50>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007e2a:	4b06      	ldr	r3, [pc, #24]	; (8007e44 <MX_I2C1_Init+0x50>)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007e30:	4804      	ldr	r0, [pc, #16]	; (8007e44 <MX_I2C1_Init+0x50>)
 8007e32:	f7fa feef 	bl	8002c14 <HAL_I2C_Init>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d001      	beq.n	8007e40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007e3c:	f000 fa36 	bl	80082ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007e40:	bf00      	nop
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	2000010c 	.word	0x2000010c
 8007e48:	40005400 	.word	0x40005400
 8007e4c:	000186a0 	.word	0x000186a0

08007e50 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8007e54:	4b13      	ldr	r3, [pc, #76]	; (8007ea4 <MX_I2S3_Init+0x54>)
 8007e56:	4a14      	ldr	r2, [pc, #80]	; (8007ea8 <MX_I2S3_Init+0x58>)
 8007e58:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8007e5a:	4b12      	ldr	r3, [pc, #72]	; (8007ea4 <MX_I2S3_Init+0x54>)
 8007e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e60:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8007e62:	4b10      	ldr	r3, [pc, #64]	; (8007ea4 <MX_I2S3_Init+0x54>)
 8007e64:	2200      	movs	r2, #0
 8007e66:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8007e68:	4b0e      	ldr	r3, [pc, #56]	; (8007ea4 <MX_I2S3_Init+0x54>)
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8007e6e:	4b0d      	ldr	r3, [pc, #52]	; (8007ea4 <MX_I2S3_Init+0x54>)
 8007e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e74:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8007e76:	4b0b      	ldr	r3, [pc, #44]	; (8007ea4 <MX_I2S3_Init+0x54>)
 8007e78:	4a0c      	ldr	r2, [pc, #48]	; (8007eac <MX_I2S3_Init+0x5c>)
 8007e7a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8007e7c:	4b09      	ldr	r3, [pc, #36]	; (8007ea4 <MX_I2S3_Init+0x54>)
 8007e7e:	2200      	movs	r2, #0
 8007e80:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8007e82:	4b08      	ldr	r3, [pc, #32]	; (8007ea4 <MX_I2S3_Init+0x54>)
 8007e84:	2200      	movs	r2, #0
 8007e86:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8007e88:	4b06      	ldr	r3, [pc, #24]	; (8007ea4 <MX_I2S3_Init+0x54>)
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8007e8e:	4805      	ldr	r0, [pc, #20]	; (8007ea4 <MX_I2S3_Init+0x54>)
 8007e90:	f7fa fff8 	bl	8002e84 <HAL_I2S_Init>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d001      	beq.n	8007e9e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8007e9a:	f000 fa07 	bl	80082ac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8007e9e:	bf00      	nop
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	200001f8 	.word	0x200001f8
 8007ea8:	40003c00 	.word	0x40003c00
 8007eac:	00017700 	.word	0x00017700

08007eb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007eb4:	4b17      	ldr	r3, [pc, #92]	; (8007f14 <MX_SPI1_Init+0x64>)
 8007eb6:	4a18      	ldr	r2, [pc, #96]	; (8007f18 <MX_SPI1_Init+0x68>)
 8007eb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007eba:	4b16      	ldr	r3, [pc, #88]	; (8007f14 <MX_SPI1_Init+0x64>)
 8007ebc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007ec0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007ec2:	4b14      	ldr	r3, [pc, #80]	; (8007f14 <MX_SPI1_Init+0x64>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007ec8:	4b12      	ldr	r3, [pc, #72]	; (8007f14 <MX_SPI1_Init+0x64>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ece:	4b11      	ldr	r3, [pc, #68]	; (8007f14 <MX_SPI1_Init+0x64>)
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007ed4:	4b0f      	ldr	r3, [pc, #60]	; (8007f14 <MX_SPI1_Init+0x64>)
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007eda:	4b0e      	ldr	r3, [pc, #56]	; (8007f14 <MX_SPI1_Init+0x64>)
 8007edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ee0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ee2:	4b0c      	ldr	r3, [pc, #48]	; (8007f14 <MX_SPI1_Init+0x64>)
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007ee8:	4b0a      	ldr	r3, [pc, #40]	; (8007f14 <MX_SPI1_Init+0x64>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007eee:	4b09      	ldr	r3, [pc, #36]	; (8007f14 <MX_SPI1_Init+0x64>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ef4:	4b07      	ldr	r3, [pc, #28]	; (8007f14 <MX_SPI1_Init+0x64>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8007efa:	4b06      	ldr	r3, [pc, #24]	; (8007f14 <MX_SPI1_Init+0x64>)
 8007efc:	220a      	movs	r2, #10
 8007efe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007f00:	4804      	ldr	r0, [pc, #16]	; (8007f14 <MX_SPI1_Init+0x64>)
 8007f02:	f7fc f9eb 	bl	80042dc <HAL_SPI_Init>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d001      	beq.n	8007f10 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8007f0c:	f000 f9ce 	bl	80082ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007f10:	bf00      	nop
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	200001a0 	.word	0x200001a0
 8007f18:	40013000 	.word	0x40013000

08007f1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007f22:	f107 0308 	add.w	r3, r7, #8
 8007f26:	2200      	movs	r2, #0
 8007f28:	601a      	str	r2, [r3, #0]
 8007f2a:	605a      	str	r2, [r3, #4]
 8007f2c:	609a      	str	r2, [r3, #8]
 8007f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f30:	463b      	mov	r3, r7
 8007f32:	2200      	movs	r2, #0
 8007f34:	601a      	str	r2, [r3, #0]
 8007f36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007f38:	4b1d      	ldr	r3, [pc, #116]	; (8007fb0 <MX_TIM3_Init+0x94>)
 8007f3a:	4a1e      	ldr	r2, [pc, #120]	; (8007fb4 <MX_TIM3_Init+0x98>)
 8007f3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8007f3e:	4b1c      	ldr	r3, [pc, #112]	; (8007fb0 <MX_TIM3_Init+0x94>)
 8007f40:	22a7      	movs	r2, #167	; 0xa7
 8007f42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f44:	4b1a      	ldr	r3, [pc, #104]	; (8007fb0 <MX_TIM3_Init+0x94>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8007f4a:	4b19      	ldr	r3, [pc, #100]	; (8007fb0 <MX_TIM3_Init+0x94>)
 8007f4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f52:	4b17      	ldr	r3, [pc, #92]	; (8007fb0 <MX_TIM3_Init+0x94>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007f58:	4b15      	ldr	r3, [pc, #84]	; (8007fb0 <MX_TIM3_Init+0x94>)
 8007f5a:	2280      	movs	r2, #128	; 0x80
 8007f5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007f5e:	4814      	ldr	r0, [pc, #80]	; (8007fb0 <MX_TIM3_Init+0x94>)
 8007f60:	f7fc fa20 	bl	80043a4 <HAL_TIM_Base_Init>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8007f6a:	f000 f99f 	bl	80082ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007f74:	f107 0308 	add.w	r3, r7, #8
 8007f78:	4619      	mov	r1, r3
 8007f7a:	480d      	ldr	r0, [pc, #52]	; (8007fb0 <MX_TIM3_Init+0x94>)
 8007f7c:	f7fc fc7e 	bl	800487c <HAL_TIM_ConfigClockSource>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d001      	beq.n	8007f8a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8007f86:	f000 f991 	bl	80082ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007f92:	463b      	mov	r3, r7
 8007f94:	4619      	mov	r1, r3
 8007f96:	4806      	ldr	r0, [pc, #24]	; (8007fb0 <MX_TIM3_Init+0x94>)
 8007f98:	f7fd f86a 	bl	8005070 <HAL_TIMEx_MasterConfigSynchronization>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d001      	beq.n	8007fa6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8007fa2:	f000 f983 	bl	80082ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8007fa6:	bf00      	nop
 8007fa8:	3718      	adds	r7, #24
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	20000160 	.word	0x20000160
 8007fb4:	40000400 	.word	0x40000400

08007fb8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b08e      	sub	sp, #56	; 0x38
 8007fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007fbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	605a      	str	r2, [r3, #4]
 8007fc8:	609a      	str	r2, [r3, #8]
 8007fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007fcc:	f107 0320 	add.w	r3, r7, #32
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007fd6:	1d3b      	adds	r3, r7, #4
 8007fd8:	2200      	movs	r2, #0
 8007fda:	601a      	str	r2, [r3, #0]
 8007fdc:	605a      	str	r2, [r3, #4]
 8007fde:	609a      	str	r2, [r3, #8]
 8007fe0:	60da      	str	r2, [r3, #12]
 8007fe2:	611a      	str	r2, [r3, #16]
 8007fe4:	615a      	str	r2, [r3, #20]
 8007fe6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007fe8:	4b2c      	ldr	r3, [pc, #176]	; (800809c <MX_TIM4_Init+0xe4>)
 8007fea:	4a2d      	ldr	r2, [pc, #180]	; (80080a0 <MX_TIM4_Init+0xe8>)
 8007fec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 167;
 8007fee:	4b2b      	ldr	r3, [pc, #172]	; (800809c <MX_TIM4_Init+0xe4>)
 8007ff0:	22a7      	movs	r2, #167	; 0xa7
 8007ff2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ff4:	4b29      	ldr	r3, [pc, #164]	; (800809c <MX_TIM4_Init+0xe4>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8007ffa:	4b28      	ldr	r3, [pc, #160]	; (800809c <MX_TIM4_Init+0xe4>)
 8007ffc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008000:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008002:	4b26      	ldr	r3, [pc, #152]	; (800809c <MX_TIM4_Init+0xe4>)
 8008004:	2200      	movs	r2, #0
 8008006:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008008:	4b24      	ldr	r3, [pc, #144]	; (800809c <MX_TIM4_Init+0xe4>)
 800800a:	2280      	movs	r2, #128	; 0x80
 800800c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800800e:	4823      	ldr	r0, [pc, #140]	; (800809c <MX_TIM4_Init+0xe4>)
 8008010:	f7fc f9c8 	bl	80043a4 <HAL_TIM_Base_Init>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d001      	beq.n	800801e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800801a:	f000 f947 	bl	80082ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800801e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008022:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8008024:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008028:	4619      	mov	r1, r3
 800802a:	481c      	ldr	r0, [pc, #112]	; (800809c <MX_TIM4_Init+0xe4>)
 800802c:	f7fc fc26 	bl	800487c <HAL_TIM_ConfigClockSource>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8008036:	f000 f939 	bl	80082ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800803a:	4818      	ldr	r0, [pc, #96]	; (800809c <MX_TIM4_Init+0xe4>)
 800803c:	f7fc f9dd 	bl	80043fa <HAL_TIM_PWM_Init>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d001      	beq.n	800804a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8008046:	f000 f931 	bl	80082ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800804a:	2300      	movs	r3, #0
 800804c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800804e:	2300      	movs	r3, #0
 8008050:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008052:	f107 0320 	add.w	r3, r7, #32
 8008056:	4619      	mov	r1, r3
 8008058:	4810      	ldr	r0, [pc, #64]	; (800809c <MX_TIM4_Init+0xe4>)
 800805a:	f7fd f809 	bl	8005070 <HAL_TIMEx_MasterConfigSynchronization>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d001      	beq.n	8008068 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8008064:	f000 f922 	bl	80082ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008068:	2360      	movs	r3, #96	; 0x60
 800806a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800806c:	2300      	movs	r3, #0
 800806e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008070:	2300      	movs	r3, #0
 8008072:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008074:	2300      	movs	r3, #0
 8008076:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008078:	1d3b      	adds	r3, r7, #4
 800807a:	220c      	movs	r2, #12
 800807c:	4619      	mov	r1, r3
 800807e:	4807      	ldr	r0, [pc, #28]	; (800809c <MX_TIM4_Init+0xe4>)
 8008080:	f7fc fb36 	bl	80046f0 <HAL_TIM_PWM_ConfigChannel>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d001      	beq.n	800808e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800808a:	f000 f90f 	bl	80082ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800808e:	4803      	ldr	r0, [pc, #12]	; (800809c <MX_TIM4_Init+0xe4>)
 8008090:	f000 fa72 	bl	8008578 <HAL_TIM_MspPostInit>

}
 8008094:	bf00      	nop
 8008096:	3738      	adds	r7, #56	; 0x38
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	200000cc 	.word	0x200000cc
 80080a0:	40000800 	.word	0x40000800

080080a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b08c      	sub	sp, #48	; 0x30
 80080a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080aa:	f107 031c 	add.w	r3, r7, #28
 80080ae:	2200      	movs	r2, #0
 80080b0:	601a      	str	r2, [r3, #0]
 80080b2:	605a      	str	r2, [r3, #4]
 80080b4:	609a      	str	r2, [r3, #8]
 80080b6:	60da      	str	r2, [r3, #12]
 80080b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80080ba:	2300      	movs	r3, #0
 80080bc:	61bb      	str	r3, [r7, #24]
 80080be:	4b74      	ldr	r3, [pc, #464]	; (8008290 <MX_GPIO_Init+0x1ec>)
 80080c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c2:	4a73      	ldr	r2, [pc, #460]	; (8008290 <MX_GPIO_Init+0x1ec>)
 80080c4:	f043 0310 	orr.w	r3, r3, #16
 80080c8:	6313      	str	r3, [r2, #48]	; 0x30
 80080ca:	4b71      	ldr	r3, [pc, #452]	; (8008290 <MX_GPIO_Init+0x1ec>)
 80080cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ce:	f003 0310 	and.w	r3, r3, #16
 80080d2:	61bb      	str	r3, [r7, #24]
 80080d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80080d6:	2300      	movs	r3, #0
 80080d8:	617b      	str	r3, [r7, #20]
 80080da:	4b6d      	ldr	r3, [pc, #436]	; (8008290 <MX_GPIO_Init+0x1ec>)
 80080dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080de:	4a6c      	ldr	r2, [pc, #432]	; (8008290 <MX_GPIO_Init+0x1ec>)
 80080e0:	f043 0304 	orr.w	r3, r3, #4
 80080e4:	6313      	str	r3, [r2, #48]	; 0x30
 80080e6:	4b6a      	ldr	r3, [pc, #424]	; (8008290 <MX_GPIO_Init+0x1ec>)
 80080e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ea:	f003 0304 	and.w	r3, r3, #4
 80080ee:	617b      	str	r3, [r7, #20]
 80080f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80080f2:	2300      	movs	r3, #0
 80080f4:	613b      	str	r3, [r7, #16]
 80080f6:	4b66      	ldr	r3, [pc, #408]	; (8008290 <MX_GPIO_Init+0x1ec>)
 80080f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080fa:	4a65      	ldr	r2, [pc, #404]	; (8008290 <MX_GPIO_Init+0x1ec>)
 80080fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008100:	6313      	str	r3, [r2, #48]	; 0x30
 8008102:	4b63      	ldr	r3, [pc, #396]	; (8008290 <MX_GPIO_Init+0x1ec>)
 8008104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800810a:	613b      	str	r3, [r7, #16]
 800810c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800810e:	2300      	movs	r3, #0
 8008110:	60fb      	str	r3, [r7, #12]
 8008112:	4b5f      	ldr	r3, [pc, #380]	; (8008290 <MX_GPIO_Init+0x1ec>)
 8008114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008116:	4a5e      	ldr	r2, [pc, #376]	; (8008290 <MX_GPIO_Init+0x1ec>)
 8008118:	f043 0301 	orr.w	r3, r3, #1
 800811c:	6313      	str	r3, [r2, #48]	; 0x30
 800811e:	4b5c      	ldr	r3, [pc, #368]	; (8008290 <MX_GPIO_Init+0x1ec>)
 8008120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008122:	f003 0301 	and.w	r3, r3, #1
 8008126:	60fb      	str	r3, [r7, #12]
 8008128:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800812a:	2300      	movs	r3, #0
 800812c:	60bb      	str	r3, [r7, #8]
 800812e:	4b58      	ldr	r3, [pc, #352]	; (8008290 <MX_GPIO_Init+0x1ec>)
 8008130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008132:	4a57      	ldr	r2, [pc, #348]	; (8008290 <MX_GPIO_Init+0x1ec>)
 8008134:	f043 0302 	orr.w	r3, r3, #2
 8008138:	6313      	str	r3, [r2, #48]	; 0x30
 800813a:	4b55      	ldr	r3, [pc, #340]	; (8008290 <MX_GPIO_Init+0x1ec>)
 800813c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813e:	f003 0302 	and.w	r3, r3, #2
 8008142:	60bb      	str	r3, [r7, #8]
 8008144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008146:	2300      	movs	r3, #0
 8008148:	607b      	str	r3, [r7, #4]
 800814a:	4b51      	ldr	r3, [pc, #324]	; (8008290 <MX_GPIO_Init+0x1ec>)
 800814c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800814e:	4a50      	ldr	r2, [pc, #320]	; (8008290 <MX_GPIO_Init+0x1ec>)
 8008150:	f043 0308 	orr.w	r3, r3, #8
 8008154:	6313      	str	r3, [r2, #48]	; 0x30
 8008156:	4b4e      	ldr	r3, [pc, #312]	; (8008290 <MX_GPIO_Init+0x1ec>)
 8008158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815a:	f003 0308 	and.w	r3, r3, #8
 800815e:	607b      	str	r3, [r7, #4]
 8008160:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8008162:	2200      	movs	r2, #0
 8008164:	2108      	movs	r1, #8
 8008166:	484b      	ldr	r0, [pc, #300]	; (8008294 <MX_GPIO_Init+0x1f0>)
 8008168:	f7f9 f8d4 	bl	8001314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800816c:	2201      	movs	r2, #1
 800816e:	2101      	movs	r1, #1
 8008170:	4849      	ldr	r0, [pc, #292]	; (8008298 <MX_GPIO_Init+0x1f4>)
 8008172:	f7f9 f8cf 	bl	8001314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|Audio_RST_Pin, GPIO_PIN_RESET);
 8008176:	2200      	movs	r2, #0
 8008178:	f44f 7104 	mov.w	r1, #528	; 0x210
 800817c:	4847      	ldr	r0, [pc, #284]	; (800829c <MX_GPIO_Init+0x1f8>)
 800817e:	f7f9 f8c9 	bl	8001314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8008182:	2200      	movs	r2, #0
 8008184:	2140      	movs	r1, #64	; 0x40
 8008186:	4844      	ldr	r0, [pc, #272]	; (8008298 <MX_GPIO_Init+0x1f4>)
 8008188:	f7f9 f8c4 	bl	8001314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800818c:	2308      	movs	r3, #8
 800818e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008190:	2301      	movs	r3, #1
 8008192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008194:	2300      	movs	r3, #0
 8008196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008198:	2300      	movs	r3, #0
 800819a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800819c:	f107 031c 	add.w	r3, r7, #28
 80081a0:	4619      	mov	r1, r3
 80081a2:	483c      	ldr	r0, [pc, #240]	; (8008294 <MX_GPIO_Init+0x1f0>)
 80081a4:	f7f8 ff04 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC6 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_6;
 80081a8:	2341      	movs	r3, #65	; 0x41
 80081aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081ac:	2301      	movs	r3, #1
 80081ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081b0:	2300      	movs	r3, #0
 80081b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081b4:	2300      	movs	r3, #0
 80081b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80081b8:	f107 031c 	add.w	r3, r7, #28
 80081bc:	4619      	mov	r1, r3
 80081be:	4836      	ldr	r0, [pc, #216]	; (8008298 <MX_GPIO_Init+0x1f4>)
 80081c0:	f7f8 fef6 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80081c4:	2308      	movs	r3, #8
 80081c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081c8:	2302      	movs	r3, #2
 80081ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081cc:	2300      	movs	r3, #0
 80081ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081d0:	2300      	movs	r3, #0
 80081d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80081d4:	2305      	movs	r3, #5
 80081d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80081d8:	f107 031c 	add.w	r3, r7, #28
 80081dc:	4619      	mov	r1, r3
 80081de:	482e      	ldr	r0, [pc, #184]	; (8008298 <MX_GPIO_Init+0x1f4>)
 80081e0:	f7f8 fee6 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80081e4:	2301      	movs	r3, #1
 80081e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80081e8:	4b2d      	ldr	r3, [pc, #180]	; (80082a0 <MX_GPIO_Init+0x1fc>)
 80081ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ec:	2300      	movs	r3, #0
 80081ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80081f0:	f107 031c 	add.w	r3, r7, #28
 80081f4:	4619      	mov	r1, r3
 80081f6:	482b      	ldr	r0, [pc, #172]	; (80082a4 <MX_GPIO_Init+0x200>)
 80081f8:	f7f8 feda 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80081fc:	2304      	movs	r3, #4
 80081fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008200:	2300      	movs	r3, #0
 8008202:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008204:	2300      	movs	r3, #0
 8008206:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8008208:	f107 031c 	add.w	r3, r7, #28
 800820c:	4619      	mov	r1, r3
 800820e:	4826      	ldr	r0, [pc, #152]	; (80082a8 <MX_GPIO_Init+0x204>)
 8008210:	f7f8 fece 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8008214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800821a:	2302      	movs	r3, #2
 800821c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800821e:	2300      	movs	r3, #0
 8008220:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008222:	2300      	movs	r3, #0
 8008224:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008226:	2305      	movs	r3, #5
 8008228:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800822a:	f107 031c 	add.w	r3, r7, #28
 800822e:	4619      	mov	r1, r3
 8008230:	481d      	ldr	r0, [pc, #116]	; (80082a8 <MX_GPIO_Init+0x204>)
 8008232:	f7f8 febd 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|OTG_FS_OverCurrent_Pin;
 8008236:	f44f 7390 	mov.w	r3, #288	; 0x120
 800823a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800823c:	2300      	movs	r3, #0
 800823e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008240:	2300      	movs	r3, #0
 8008242:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008244:	f107 031c 	add.w	r3, r7, #28
 8008248:	4619      	mov	r1, r3
 800824a:	4814      	ldr	r0, [pc, #80]	; (800829c <MX_GPIO_Init+0x1f8>)
 800824c:	f7f8 feb0 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|Audio_RST_Pin;
 8008250:	f44f 7304 	mov.w	r3, #528	; 0x210
 8008254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008256:	2301      	movs	r3, #1
 8008258:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800825a:	2300      	movs	r3, #0
 800825c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800825e:	2300      	movs	r3, #0
 8008260:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008262:	f107 031c 	add.w	r3, r7, #28
 8008266:	4619      	mov	r1, r3
 8008268:	480c      	ldr	r0, [pc, #48]	; (800829c <MX_GPIO_Init+0x1f8>)
 800826a:	f7f8 fea1 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800826e:	2302      	movs	r3, #2
 8008270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008272:	4b0b      	ldr	r3, [pc, #44]	; (80082a0 <MX_GPIO_Init+0x1fc>)
 8008274:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008276:	2300      	movs	r3, #0
 8008278:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800827a:	f107 031c 	add.w	r3, r7, #28
 800827e:	4619      	mov	r1, r3
 8008280:	4804      	ldr	r0, [pc, #16]	; (8008294 <MX_GPIO_Init+0x1f0>)
 8008282:	f7f8 fe95 	bl	8000fb0 <HAL_GPIO_Init>

}
 8008286:	bf00      	nop
 8008288:	3730      	adds	r7, #48	; 0x30
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	40023800 	.word	0x40023800
 8008294:	40021000 	.word	0x40021000
 8008298:	40020800 	.word	0x40020800
 800829c:	40020c00 	.word	0x40020c00
 80082a0:	10120000 	.word	0x10120000
 80082a4:	40020000 	.word	0x40020000
 80082a8:	40020400 	.word	0x40020400

080082ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80082ac:	b480      	push	{r7}
 80082ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80082b0:	bf00      	nop
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
	...

080082bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082c2:	2300      	movs	r3, #0
 80082c4:	607b      	str	r3, [r7, #4]
 80082c6:	4b10      	ldr	r3, [pc, #64]	; (8008308 <HAL_MspInit+0x4c>)
 80082c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ca:	4a0f      	ldr	r2, [pc, #60]	; (8008308 <HAL_MspInit+0x4c>)
 80082cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082d0:	6453      	str	r3, [r2, #68]	; 0x44
 80082d2:	4b0d      	ldr	r3, [pc, #52]	; (8008308 <HAL_MspInit+0x4c>)
 80082d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082da:	607b      	str	r3, [r7, #4]
 80082dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80082de:	2300      	movs	r3, #0
 80082e0:	603b      	str	r3, [r7, #0]
 80082e2:	4b09      	ldr	r3, [pc, #36]	; (8008308 <HAL_MspInit+0x4c>)
 80082e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e6:	4a08      	ldr	r2, [pc, #32]	; (8008308 <HAL_MspInit+0x4c>)
 80082e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082ec:	6413      	str	r3, [r2, #64]	; 0x40
 80082ee:	4b06      	ldr	r3, [pc, #24]	; (8008308 <HAL_MspInit+0x4c>)
 80082f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082f6:	603b      	str	r3, [r7, #0]
 80082f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80082fa:	2007      	movs	r0, #7
 80082fc:	f7f8 fe16 	bl	8000f2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008300:	bf00      	nop
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	40023800 	.word	0x40023800

0800830c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b08a      	sub	sp, #40	; 0x28
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008314:	f107 0314 	add.w	r3, r7, #20
 8008318:	2200      	movs	r2, #0
 800831a:	601a      	str	r2, [r3, #0]
 800831c:	605a      	str	r2, [r3, #4]
 800831e:	609a      	str	r2, [r3, #8]
 8008320:	60da      	str	r2, [r3, #12]
 8008322:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a19      	ldr	r2, [pc, #100]	; (8008390 <HAL_I2C_MspInit+0x84>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d12c      	bne.n	8008388 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800832e:	2300      	movs	r3, #0
 8008330:	613b      	str	r3, [r7, #16]
 8008332:	4b18      	ldr	r3, [pc, #96]	; (8008394 <HAL_I2C_MspInit+0x88>)
 8008334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008336:	4a17      	ldr	r2, [pc, #92]	; (8008394 <HAL_I2C_MspInit+0x88>)
 8008338:	f043 0302 	orr.w	r3, r3, #2
 800833c:	6313      	str	r3, [r2, #48]	; 0x30
 800833e:	4b15      	ldr	r3, [pc, #84]	; (8008394 <HAL_I2C_MspInit+0x88>)
 8008340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008342:	f003 0302 	and.w	r3, r3, #2
 8008346:	613b      	str	r3, [r7, #16]
 8008348:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800834a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800834e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008350:	2312      	movs	r3, #18
 8008352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008354:	2301      	movs	r3, #1
 8008356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008358:	2300      	movs	r3, #0
 800835a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800835c:	2304      	movs	r3, #4
 800835e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008360:	f107 0314 	add.w	r3, r7, #20
 8008364:	4619      	mov	r1, r3
 8008366:	480c      	ldr	r0, [pc, #48]	; (8008398 <HAL_I2C_MspInit+0x8c>)
 8008368:	f7f8 fe22 	bl	8000fb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800836c:	2300      	movs	r3, #0
 800836e:	60fb      	str	r3, [r7, #12]
 8008370:	4b08      	ldr	r3, [pc, #32]	; (8008394 <HAL_I2C_MspInit+0x88>)
 8008372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008374:	4a07      	ldr	r2, [pc, #28]	; (8008394 <HAL_I2C_MspInit+0x88>)
 8008376:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800837a:	6413      	str	r3, [r2, #64]	; 0x40
 800837c:	4b05      	ldr	r3, [pc, #20]	; (8008394 <HAL_I2C_MspInit+0x88>)
 800837e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008384:	60fb      	str	r3, [r7, #12]
 8008386:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008388:	bf00      	nop
 800838a:	3728      	adds	r7, #40	; 0x28
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	40005400 	.word	0x40005400
 8008394:	40023800 	.word	0x40023800
 8008398:	40020400 	.word	0x40020400

0800839c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b08a      	sub	sp, #40	; 0x28
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083a4:	f107 0314 	add.w	r3, r7, #20
 80083a8:	2200      	movs	r2, #0
 80083aa:	601a      	str	r2, [r3, #0]
 80083ac:	605a      	str	r2, [r3, #4]
 80083ae:	609a      	str	r2, [r3, #8]
 80083b0:	60da      	str	r2, [r3, #12]
 80083b2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a28      	ldr	r2, [pc, #160]	; (800845c <HAL_I2S_MspInit+0xc0>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d14a      	bne.n	8008454 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80083be:	2300      	movs	r3, #0
 80083c0:	613b      	str	r3, [r7, #16]
 80083c2:	4b27      	ldr	r3, [pc, #156]	; (8008460 <HAL_I2S_MspInit+0xc4>)
 80083c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c6:	4a26      	ldr	r2, [pc, #152]	; (8008460 <HAL_I2S_MspInit+0xc4>)
 80083c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083cc:	6413      	str	r3, [r2, #64]	; 0x40
 80083ce:	4b24      	ldr	r3, [pc, #144]	; (8008460 <HAL_I2S_MspInit+0xc4>)
 80083d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083d6:	613b      	str	r3, [r7, #16]
 80083d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083da:	2300      	movs	r3, #0
 80083dc:	60fb      	str	r3, [r7, #12]
 80083de:	4b20      	ldr	r3, [pc, #128]	; (8008460 <HAL_I2S_MspInit+0xc4>)
 80083e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e2:	4a1f      	ldr	r2, [pc, #124]	; (8008460 <HAL_I2S_MspInit+0xc4>)
 80083e4:	f043 0301 	orr.w	r3, r3, #1
 80083e8:	6313      	str	r3, [r2, #48]	; 0x30
 80083ea:	4b1d      	ldr	r3, [pc, #116]	; (8008460 <HAL_I2S_MspInit+0xc4>)
 80083ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	60fb      	str	r3, [r7, #12]
 80083f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80083f6:	2300      	movs	r3, #0
 80083f8:	60bb      	str	r3, [r7, #8]
 80083fa:	4b19      	ldr	r3, [pc, #100]	; (8008460 <HAL_I2S_MspInit+0xc4>)
 80083fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083fe:	4a18      	ldr	r2, [pc, #96]	; (8008460 <HAL_I2S_MspInit+0xc4>)
 8008400:	f043 0304 	orr.w	r3, r3, #4
 8008404:	6313      	str	r3, [r2, #48]	; 0x30
 8008406:	4b16      	ldr	r3, [pc, #88]	; (8008460 <HAL_I2S_MspInit+0xc4>)
 8008408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840a:	f003 0304 	and.w	r3, r3, #4
 800840e:	60bb      	str	r3, [r7, #8]
 8008410:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8008412:	2310      	movs	r3, #16
 8008414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008416:	2302      	movs	r3, #2
 8008418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800841a:	2300      	movs	r3, #0
 800841c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800841e:	2300      	movs	r3, #0
 8008420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008422:	2306      	movs	r3, #6
 8008424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8008426:	f107 0314 	add.w	r3, r7, #20
 800842a:	4619      	mov	r1, r3
 800842c:	480d      	ldr	r0, [pc, #52]	; (8008464 <HAL_I2S_MspInit+0xc8>)
 800842e:	f7f8 fdbf 	bl	8000fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8008432:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8008436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008438:	2302      	movs	r3, #2
 800843a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800843c:	2300      	movs	r3, #0
 800843e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008440:	2300      	movs	r3, #0
 8008442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008444:	2306      	movs	r3, #6
 8008446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008448:	f107 0314 	add.w	r3, r7, #20
 800844c:	4619      	mov	r1, r3
 800844e:	4806      	ldr	r0, [pc, #24]	; (8008468 <HAL_I2S_MspInit+0xcc>)
 8008450:	f7f8 fdae 	bl	8000fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8008454:	bf00      	nop
 8008456:	3728      	adds	r7, #40	; 0x28
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	40003c00 	.word	0x40003c00
 8008460:	40023800 	.word	0x40023800
 8008464:	40020000 	.word	0x40020000
 8008468:	40020800 	.word	0x40020800

0800846c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b08a      	sub	sp, #40	; 0x28
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008474:	f107 0314 	add.w	r3, r7, #20
 8008478:	2200      	movs	r2, #0
 800847a:	601a      	str	r2, [r3, #0]
 800847c:	605a      	str	r2, [r3, #4]
 800847e:	609a      	str	r2, [r3, #8]
 8008480:	60da      	str	r2, [r3, #12]
 8008482:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a19      	ldr	r2, [pc, #100]	; (80084f0 <HAL_SPI_MspInit+0x84>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d12b      	bne.n	80084e6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800848e:	2300      	movs	r3, #0
 8008490:	613b      	str	r3, [r7, #16]
 8008492:	4b18      	ldr	r3, [pc, #96]	; (80084f4 <HAL_SPI_MspInit+0x88>)
 8008494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008496:	4a17      	ldr	r2, [pc, #92]	; (80084f4 <HAL_SPI_MspInit+0x88>)
 8008498:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800849c:	6453      	str	r3, [r2, #68]	; 0x44
 800849e:	4b15      	ldr	r3, [pc, #84]	; (80084f4 <HAL_SPI_MspInit+0x88>)
 80084a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084a6:	613b      	str	r3, [r7, #16]
 80084a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084aa:	2300      	movs	r3, #0
 80084ac:	60fb      	str	r3, [r7, #12]
 80084ae:	4b11      	ldr	r3, [pc, #68]	; (80084f4 <HAL_SPI_MspInit+0x88>)
 80084b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b2:	4a10      	ldr	r2, [pc, #64]	; (80084f4 <HAL_SPI_MspInit+0x88>)
 80084b4:	f043 0301 	orr.w	r3, r3, #1
 80084b8:	6313      	str	r3, [r2, #48]	; 0x30
 80084ba:	4b0e      	ldr	r3, [pc, #56]	; (80084f4 <HAL_SPI_MspInit+0x88>)
 80084bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	60fb      	str	r3, [r7, #12]
 80084c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80084c6:	23e0      	movs	r3, #224	; 0xe0
 80084c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084ca:	2302      	movs	r3, #2
 80084cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084ce:	2300      	movs	r3, #0
 80084d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084d2:	2300      	movs	r3, #0
 80084d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80084d6:	2305      	movs	r3, #5
 80084d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084da:	f107 0314 	add.w	r3, r7, #20
 80084de:	4619      	mov	r1, r3
 80084e0:	4805      	ldr	r0, [pc, #20]	; (80084f8 <HAL_SPI_MspInit+0x8c>)
 80084e2:	f7f8 fd65 	bl	8000fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80084e6:	bf00      	nop
 80084e8:	3728      	adds	r7, #40	; 0x28
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	40013000 	.word	0x40013000
 80084f4:	40023800 	.word	0x40023800
 80084f8:	40020000 	.word	0x40020000

080084fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a18      	ldr	r2, [pc, #96]	; (800856c <HAL_TIM_Base_MspInit+0x70>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d10e      	bne.n	800852c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800850e:	2300      	movs	r3, #0
 8008510:	60fb      	str	r3, [r7, #12]
 8008512:	4b17      	ldr	r3, [pc, #92]	; (8008570 <HAL_TIM_Base_MspInit+0x74>)
 8008514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008516:	4a16      	ldr	r2, [pc, #88]	; (8008570 <HAL_TIM_Base_MspInit+0x74>)
 8008518:	f043 0302 	orr.w	r3, r3, #2
 800851c:	6413      	str	r3, [r2, #64]	; 0x40
 800851e:	4b14      	ldr	r3, [pc, #80]	; (8008570 <HAL_TIM_Base_MspInit+0x74>)
 8008520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008522:	f003 0302 	and.w	r3, r3, #2
 8008526:	60fb      	str	r3, [r7, #12]
 8008528:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800852a:	e01a      	b.n	8008562 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a10      	ldr	r2, [pc, #64]	; (8008574 <HAL_TIM_Base_MspInit+0x78>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d115      	bne.n	8008562 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008536:	2300      	movs	r3, #0
 8008538:	60bb      	str	r3, [r7, #8]
 800853a:	4b0d      	ldr	r3, [pc, #52]	; (8008570 <HAL_TIM_Base_MspInit+0x74>)
 800853c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853e:	4a0c      	ldr	r2, [pc, #48]	; (8008570 <HAL_TIM_Base_MspInit+0x74>)
 8008540:	f043 0304 	orr.w	r3, r3, #4
 8008544:	6413      	str	r3, [r2, #64]	; 0x40
 8008546:	4b0a      	ldr	r3, [pc, #40]	; (8008570 <HAL_TIM_Base_MspInit+0x74>)
 8008548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854a:	f003 0304 	and.w	r3, r3, #4
 800854e:	60bb      	str	r3, [r7, #8]
 8008550:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8008552:	2200      	movs	r2, #0
 8008554:	2100      	movs	r1, #0
 8008556:	201e      	movs	r0, #30
 8008558:	f7f8 fcf3 	bl	8000f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800855c:	201e      	movs	r0, #30
 800855e:	f7f8 fd0c 	bl	8000f7a <HAL_NVIC_EnableIRQ>
}
 8008562:	bf00      	nop
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	40000400 	.word	0x40000400
 8008570:	40023800 	.word	0x40023800
 8008574:	40000800 	.word	0x40000800

08008578 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b088      	sub	sp, #32
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008580:	f107 030c 	add.w	r3, r7, #12
 8008584:	2200      	movs	r2, #0
 8008586:	601a      	str	r2, [r3, #0]
 8008588:	605a      	str	r2, [r3, #4]
 800858a:	609a      	str	r2, [r3, #8]
 800858c:	60da      	str	r2, [r3, #12]
 800858e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a12      	ldr	r2, [pc, #72]	; (80085e0 <HAL_TIM_MspPostInit+0x68>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d11e      	bne.n	80085d8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800859a:	2300      	movs	r3, #0
 800859c:	60bb      	str	r3, [r7, #8]
 800859e:	4b11      	ldr	r3, [pc, #68]	; (80085e4 <HAL_TIM_MspPostInit+0x6c>)
 80085a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a2:	4a10      	ldr	r2, [pc, #64]	; (80085e4 <HAL_TIM_MspPostInit+0x6c>)
 80085a4:	f043 0308 	orr.w	r3, r3, #8
 80085a8:	6313      	str	r3, [r2, #48]	; 0x30
 80085aa:	4b0e      	ldr	r3, [pc, #56]	; (80085e4 <HAL_TIM_MspPostInit+0x6c>)
 80085ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ae:	f003 0308 	and.w	r3, r3, #8
 80085b2:	60bb      	str	r3, [r7, #8]
 80085b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80085b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085bc:	2302      	movs	r3, #2
 80085be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085c0:	2300      	movs	r3, #0
 80085c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085c4:	2300      	movs	r3, #0
 80085c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80085c8:	2302      	movs	r3, #2
 80085ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80085cc:	f107 030c 	add.w	r3, r7, #12
 80085d0:	4619      	mov	r1, r3
 80085d2:	4805      	ldr	r0, [pc, #20]	; (80085e8 <HAL_TIM_MspPostInit+0x70>)
 80085d4:	f7f8 fcec 	bl	8000fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80085d8:	bf00      	nop
 80085da:	3720      	adds	r7, #32
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	40000800 	.word	0x40000800
 80085e4:	40023800 	.word	0x40023800
 80085e8:	40020c00 	.word	0x40020c00

080085ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80085ec:	b480      	push	{r7}
 80085ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80085f0:	bf00      	nop
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80085fa:	b480      	push	{r7}
 80085fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80085fe:	e7fe      	b.n	80085fe <HardFault_Handler+0x4>

08008600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008600:	b480      	push	{r7}
 8008602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008604:	e7fe      	b.n	8008604 <MemManage_Handler+0x4>

08008606 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008606:	b480      	push	{r7}
 8008608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800860a:	e7fe      	b.n	800860a <BusFault_Handler+0x4>

0800860c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800860c:	b480      	push	{r7}
 800860e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008610:	e7fe      	b.n	8008610 <UsageFault_Handler+0x4>

08008612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008612:	b480      	push	{r7}
 8008614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008616:	bf00      	nop
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008620:	b480      	push	{r7}
 8008622:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008624:	bf00      	nop
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800862e:	b480      	push	{r7}
 8008630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008632:	bf00      	nop
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008640:	f7f8 fb62 	bl	8000d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008644:	bf00      	nop
 8008646:	bd80      	pop	{r7, pc}

08008648 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800864c:	4802      	ldr	r0, [pc, #8]	; (8008658 <TIM4_IRQHandler+0x10>)
 800864e:	f7fb ff47 	bl	80044e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8008652:	bf00      	nop
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	200000cc 	.word	0x200000cc

0800865c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8008660:	4802      	ldr	r0, [pc, #8]	; (800866c <OTG_FS_IRQHandler+0x10>)
 8008662:	f7f9 f8f5 	bl	8001850 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008666:	bf00      	nop
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	2000060c 	.word	0x2000060c

08008670 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008678:	4b11      	ldr	r3, [pc, #68]	; (80086c0 <_sbrk+0x50>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d102      	bne.n	8008686 <_sbrk+0x16>
		heap_end = &end;
 8008680:	4b0f      	ldr	r3, [pc, #60]	; (80086c0 <_sbrk+0x50>)
 8008682:	4a10      	ldr	r2, [pc, #64]	; (80086c4 <_sbrk+0x54>)
 8008684:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008686:	4b0e      	ldr	r3, [pc, #56]	; (80086c0 <_sbrk+0x50>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800868c:	4b0c      	ldr	r3, [pc, #48]	; (80086c0 <_sbrk+0x50>)
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4413      	add	r3, r2
 8008694:	466a      	mov	r2, sp
 8008696:	4293      	cmp	r3, r2
 8008698:	d907      	bls.n	80086aa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800869a:	f000 fb5d 	bl	8008d58 <__errno>
 800869e:	4602      	mov	r2, r0
 80086a0:	230c      	movs	r3, #12
 80086a2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80086a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086a8:	e006      	b.n	80086b8 <_sbrk+0x48>
	}

	heap_end += incr;
 80086aa:	4b05      	ldr	r3, [pc, #20]	; (80086c0 <_sbrk+0x50>)
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4413      	add	r3, r2
 80086b2:	4a03      	ldr	r2, [pc, #12]	; (80086c0 <_sbrk+0x50>)
 80086b4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80086b6:	68fb      	ldr	r3, [r7, #12]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	200000b8 	.word	0x200000b8
 80086c4:	200008d8 	.word	0x200008d8

080086c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80086c8:	b480      	push	{r7}
 80086ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80086cc:	4b08      	ldr	r3, [pc, #32]	; (80086f0 <SystemInit+0x28>)
 80086ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086d2:	4a07      	ldr	r2, [pc, #28]	; (80086f0 <SystemInit+0x28>)
 80086d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80086d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80086dc:	4b04      	ldr	r3, [pc, #16]	; (80086f0 <SystemInit+0x28>)
 80086de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80086e2:	609a      	str	r2, [r3, #8]
#endif
}
 80086e4:	bf00      	nop
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	e000ed00 	.word	0xe000ed00

080086f4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80086f8:	2201      	movs	r2, #1
 80086fa:	490e      	ldr	r1, [pc, #56]	; (8008734 <MX_USB_HOST_Init+0x40>)
 80086fc:	480e      	ldr	r0, [pc, #56]	; (8008738 <MX_USB_HOST_Init+0x44>)
 80086fe:	f7fe f81f 	bl	8006740 <USBH_Init>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d001      	beq.n	800870c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008708:	f7ff fdd0 	bl	80082ac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800870c:	490b      	ldr	r1, [pc, #44]	; (800873c <MX_USB_HOST_Init+0x48>)
 800870e:	480a      	ldr	r0, [pc, #40]	; (8008738 <MX_USB_HOST_Init+0x44>)
 8008710:	f7fe f889 	bl	8006826 <USBH_RegisterClass>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d001      	beq.n	800871e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800871a:	f7ff fdc7 	bl	80082ac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800871e:	4806      	ldr	r0, [pc, #24]	; (8008738 <MX_USB_HOST_Init+0x44>)
 8008720:	f7fe f90e 	bl	8006940 <USBH_Start>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d001      	beq.n	800872e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800872a:	f7ff fdbf 	bl	80082ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800872e:	bf00      	nop
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	08008755 	.word	0x08008755
 8008738:	20000240 	.word	0x20000240
 800873c:	20000008 	.word	0x20000008

08008740 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008744:	4802      	ldr	r0, [pc, #8]	; (8008750 <MX_USB_HOST_Process+0x10>)
 8008746:	f7fe f90b 	bl	8006960 <USBH_Process>
}
 800874a:	bf00      	nop
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	20000240 	.word	0x20000240

08008754 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	460b      	mov	r3, r1
 800875e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008760:	78fb      	ldrb	r3, [r7, #3]
 8008762:	3b01      	subs	r3, #1
 8008764:	2b04      	cmp	r3, #4
 8008766:	d819      	bhi.n	800879c <USBH_UserProcess+0x48>
 8008768:	a201      	add	r2, pc, #4	; (adr r2, 8008770 <USBH_UserProcess+0x1c>)
 800876a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876e:	bf00      	nop
 8008770:	0800879d 	.word	0x0800879d
 8008774:	0800878d 	.word	0x0800878d
 8008778:	0800879d 	.word	0x0800879d
 800877c:	08008795 	.word	0x08008795
 8008780:	08008785 	.word	0x08008785
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008784:	4b09      	ldr	r3, [pc, #36]	; (80087ac <USBH_UserProcess+0x58>)
 8008786:	2203      	movs	r2, #3
 8008788:	701a      	strb	r2, [r3, #0]
  break;
 800878a:	e008      	b.n	800879e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800878c:	4b07      	ldr	r3, [pc, #28]	; (80087ac <USBH_UserProcess+0x58>)
 800878e:	2202      	movs	r2, #2
 8008790:	701a      	strb	r2, [r3, #0]
  break;
 8008792:	e004      	b.n	800879e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008794:	4b05      	ldr	r3, [pc, #20]	; (80087ac <USBH_UserProcess+0x58>)
 8008796:	2201      	movs	r2, #1
 8008798:	701a      	strb	r2, [r3, #0]
  break;
 800879a:	e000      	b.n	800879e <USBH_UserProcess+0x4a>

  default:
  break;
 800879c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800879e:	bf00      	nop
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	200000bc 	.word	0x200000bc

080087b0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b08a      	sub	sp, #40	; 0x28
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087b8:	f107 0314 	add.w	r3, r7, #20
 80087bc:	2200      	movs	r2, #0
 80087be:	601a      	str	r2, [r3, #0]
 80087c0:	605a      	str	r2, [r3, #4]
 80087c2:	609a      	str	r2, [r3, #8]
 80087c4:	60da      	str	r2, [r3, #12]
 80087c6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087d0:	d147      	bne.n	8008862 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087d2:	2300      	movs	r3, #0
 80087d4:	613b      	str	r3, [r7, #16]
 80087d6:	4b25      	ldr	r3, [pc, #148]	; (800886c <HAL_HCD_MspInit+0xbc>)
 80087d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087da:	4a24      	ldr	r2, [pc, #144]	; (800886c <HAL_HCD_MspInit+0xbc>)
 80087dc:	f043 0301 	orr.w	r3, r3, #1
 80087e0:	6313      	str	r3, [r2, #48]	; 0x30
 80087e2:	4b22      	ldr	r3, [pc, #136]	; (800886c <HAL_HCD_MspInit+0xbc>)
 80087e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e6:	f003 0301 	and.w	r3, r3, #1
 80087ea:	613b      	str	r3, [r7, #16]
 80087ec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80087ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80087f4:	2300      	movs	r3, #0
 80087f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087f8:	2300      	movs	r3, #0
 80087fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80087fc:	f107 0314 	add.w	r3, r7, #20
 8008800:	4619      	mov	r1, r3
 8008802:	481b      	ldr	r0, [pc, #108]	; (8008870 <HAL_HCD_MspInit+0xc0>)
 8008804:	f7f8 fbd4 	bl	8000fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008808:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800880c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800880e:	2302      	movs	r3, #2
 8008810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008812:	2300      	movs	r3, #0
 8008814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008816:	2300      	movs	r3, #0
 8008818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800881a:	230a      	movs	r3, #10
 800881c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800881e:	f107 0314 	add.w	r3, r7, #20
 8008822:	4619      	mov	r1, r3
 8008824:	4812      	ldr	r0, [pc, #72]	; (8008870 <HAL_HCD_MspInit+0xc0>)
 8008826:	f7f8 fbc3 	bl	8000fb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800882a:	4b10      	ldr	r3, [pc, #64]	; (800886c <HAL_HCD_MspInit+0xbc>)
 800882c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800882e:	4a0f      	ldr	r2, [pc, #60]	; (800886c <HAL_HCD_MspInit+0xbc>)
 8008830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008834:	6353      	str	r3, [r2, #52]	; 0x34
 8008836:	2300      	movs	r3, #0
 8008838:	60fb      	str	r3, [r7, #12]
 800883a:	4b0c      	ldr	r3, [pc, #48]	; (800886c <HAL_HCD_MspInit+0xbc>)
 800883c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800883e:	4a0b      	ldr	r2, [pc, #44]	; (800886c <HAL_HCD_MspInit+0xbc>)
 8008840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008844:	6453      	str	r3, [r2, #68]	; 0x44
 8008846:	4b09      	ldr	r3, [pc, #36]	; (800886c <HAL_HCD_MspInit+0xbc>)
 8008848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800884a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800884e:	60fb      	str	r3, [r7, #12]
 8008850:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008852:	2200      	movs	r2, #0
 8008854:	2100      	movs	r1, #0
 8008856:	2043      	movs	r0, #67	; 0x43
 8008858:	f7f8 fb73 	bl	8000f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800885c:	2043      	movs	r0, #67	; 0x43
 800885e:	f7f8 fb8c 	bl	8000f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008862:	bf00      	nop
 8008864:	3728      	adds	r7, #40	; 0x28
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	40023800 	.word	0x40023800
 8008870:	40020000 	.word	0x40020000

08008874 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008882:	4618      	mov	r0, r3
 8008884:	f7fe fb1d 	bl	8006ec2 <USBH_LL_IncTimer>
}
 8008888:	bf00      	nop
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fe fb62 	bl	8006f68 <USBH_LL_Connect>
}
 80088a4:	bf00      	nop
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7fe fb7a 	bl	8006fb4 <USBH_LL_Disconnect>
}
 80088c0:	bf00      	nop
 80088c2:	3708      	adds	r7, #8
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	460b      	mov	r3, r1
 80088d2:	70fb      	strb	r3, [r7, #3]
 80088d4:	4613      	mov	r3, r2
 80088d6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7fe fb0f 	bl	8006f16 <USBH_LL_PortEnabled>
} 
 80088f8:	bf00      	nop
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800890e:	4618      	mov	r0, r3
 8008910:	f7fe fb0f 	bl	8006f32 <USBH_LL_PortDisabled>
} 
 8008914:	bf00      	nop
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800892a:	2b01      	cmp	r3, #1
 800892c:	d12a      	bne.n	8008984 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800892e:	4a18      	ldr	r2, [pc, #96]	; (8008990 <USBH_LL_Init+0x74>)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a15      	ldr	r2, [pc, #84]	; (8008990 <USBH_LL_Init+0x74>)
 800893a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800893e:	4b14      	ldr	r3, [pc, #80]	; (8008990 <USBH_LL_Init+0x74>)
 8008940:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008944:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008946:	4b12      	ldr	r3, [pc, #72]	; (8008990 <USBH_LL_Init+0x74>)
 8008948:	2208      	movs	r2, #8
 800894a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800894c:	4b10      	ldr	r3, [pc, #64]	; (8008990 <USBH_LL_Init+0x74>)
 800894e:	2201      	movs	r2, #1
 8008950:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008952:	4b0f      	ldr	r3, [pc, #60]	; (8008990 <USBH_LL_Init+0x74>)
 8008954:	2200      	movs	r2, #0
 8008956:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008958:	4b0d      	ldr	r3, [pc, #52]	; (8008990 <USBH_LL_Init+0x74>)
 800895a:	2202      	movs	r2, #2
 800895c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800895e:	4b0c      	ldr	r3, [pc, #48]	; (8008990 <USBH_LL_Init+0x74>)
 8008960:	2200      	movs	r2, #0
 8008962:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008964:	480a      	ldr	r0, [pc, #40]	; (8008990 <USBH_LL_Init+0x74>)
 8008966:	f7f8 fcee 	bl	8001346 <HAL_HCD_Init>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008970:	f7ff fc9c 	bl	80082ac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008974:	4806      	ldr	r0, [pc, #24]	; (8008990 <USBH_LL_Init+0x74>)
 8008976:	f7f9 f8e9 	bl	8001b4c <HAL_HCD_GetCurrentFrame>
 800897a:	4603      	mov	r3, r0
 800897c:	4619      	mov	r1, r3
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7fe fa90 	bl	8006ea4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	2000060c 	.word	0x2000060c

08008994 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800899c:	2300      	movs	r3, #0
 800899e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7f9 f856 	bl	8001a5c <HAL_HCD_Start>
 80089b0:	4603      	mov	r3, r0
 80089b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 f95c 	bl	8008c74 <USBH_Get_USB_Status>
 80089bc:	4603      	mov	r3, r0
 80089be:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80089c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089d2:	2300      	movs	r3, #0
 80089d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7f9 f85e 	bl	8001aa2 <HAL_HCD_Stop>
 80089e6:	4603      	mov	r3, r0
 80089e8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 f941 	bl	8008c74 <USBH_Get_USB_Status>
 80089f2:	4603      	mov	r3, r0
 80089f4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80089f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7f9 f8a8 	bl	8001b68 <HAL_HCD_GetCurrentSpeed>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d007      	beq.n	8008a2e <USBH_LL_GetSpeed+0x2e>
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d302      	bcc.n	8008a28 <USBH_LL_GetSpeed+0x28>
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d006      	beq.n	8008a34 <USBH_LL_GetSpeed+0x34>
 8008a26:	e008      	b.n	8008a3a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a2c:	e008      	b.n	8008a40 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	73fb      	strb	r3, [r7, #15]
    break;
 8008a32:	e005      	b.n	8008a40 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008a34:	2302      	movs	r3, #2
 8008a36:	73fb      	strb	r3, [r7, #15]
    break;
 8008a38:	e002      	b.n	8008a40 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	73fb      	strb	r3, [r7, #15]
    break;
 8008a3e:	bf00      	nop
  }
  return  speed;
 8008a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b084      	sub	sp, #16
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7f9 f83b 	bl	8001adc <HAL_HCD_ResetPort>
 8008a66:	4603      	mov	r3, r0
 8008a68:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8008a6a:	7bfb      	ldrb	r3, [r7, #15]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f000 f901 	bl	8008c74 <USBH_Get_USB_Status>
 8008a72:	4603      	mov	r3, r0
 8008a74:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008a76:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	460b      	mov	r3, r1
 8008a8a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a92:	78fa      	ldrb	r2, [r7, #3]
 8008a94:	4611      	mov	r1, r2
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7f9 f843 	bl	8001b22 <HAL_HCD_HC_GetXferCount>
 8008a9c:	4603      	mov	r3, r0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3708      	adds	r7, #8
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008aa6:	b590      	push	{r4, r7, lr}
 8008aa8:	b089      	sub	sp, #36	; 0x24
 8008aaa:	af04      	add	r7, sp, #16
 8008aac:	6078      	str	r0, [r7, #4]
 8008aae:	4608      	mov	r0, r1
 8008ab0:	4611      	mov	r1, r2
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	70fb      	strb	r3, [r7, #3]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	70bb      	strb	r3, [r7, #2]
 8008abc:	4613      	mov	r3, r2
 8008abe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8008ace:	787c      	ldrb	r4, [r7, #1]
 8008ad0:	78ba      	ldrb	r2, [r7, #2]
 8008ad2:	78f9      	ldrb	r1, [r7, #3]
 8008ad4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ad6:	9302      	str	r3, [sp, #8]
 8008ad8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008adc:	9301      	str	r3, [sp, #4]
 8008ade:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	4623      	mov	r3, r4
 8008ae6:	f7f8 fc90 	bl	800140a <HAL_HCD_HC_Init>
 8008aea:	4603      	mov	r3, r0
 8008aec:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 f8bf 	bl	8008c74 <USBH_Get_USB_Status>
 8008af6:	4603      	mov	r3, r0
 8008af8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008afa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3714      	adds	r7, #20
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd90      	pop	{r4, r7, pc}

08008b04 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b10:	2300      	movs	r3, #0
 8008b12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b14:	2300      	movs	r3, #0
 8008b16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008b1e:	78fa      	ldrb	r2, [r7, #3]
 8008b20:	4611      	mov	r1, r2
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7f8 fd09 	bl	800153a <HAL_HCD_HC_Halt>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b2c:	7bfb      	ldrb	r3, [r7, #15]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 f8a0 	bl	8008c74 <USBH_Get_USB_Status>
 8008b34:	4603      	mov	r3, r0
 8008b36:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008b38:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008b42:	b590      	push	{r4, r7, lr}
 8008b44:	b089      	sub	sp, #36	; 0x24
 8008b46:	af04      	add	r7, sp, #16
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	4608      	mov	r0, r1
 8008b4c:	4611      	mov	r1, r2
 8008b4e:	461a      	mov	r2, r3
 8008b50:	4603      	mov	r3, r0
 8008b52:	70fb      	strb	r3, [r7, #3]
 8008b54:	460b      	mov	r3, r1
 8008b56:	70bb      	strb	r3, [r7, #2]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8008b6a:	787c      	ldrb	r4, [r7, #1]
 8008b6c:	78ba      	ldrb	r2, [r7, #2]
 8008b6e:	78f9      	ldrb	r1, [r7, #3]
 8008b70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008b74:	9303      	str	r3, [sp, #12]
 8008b76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b78:	9302      	str	r3, [sp, #8]
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7c:	9301      	str	r3, [sp, #4]
 8008b7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	4623      	mov	r3, r4
 8008b86:	f7f8 fcfb 	bl	8001580 <HAL_HCD_HC_SubmitRequest>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008b8e:	7bfb      	ldrb	r3, [r7, #15]
 8008b90:	4618      	mov	r0, r3
 8008b92:	f000 f86f 	bl	8008c74 <USBH_Get_USB_Status>
 8008b96:	4603      	mov	r3, r0
 8008b98:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008b9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3714      	adds	r7, #20
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd90      	pop	{r4, r7, pc}

08008ba4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	460b      	mov	r3, r1
 8008bae:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008bb6:	78fa      	ldrb	r2, [r7, #3]
 8008bb8:	4611      	mov	r1, r2
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7f8 ff9c 	bl	8001af8 <HAL_HCD_HC_GetURBState>
 8008bc0:	4603      	mov	r3, r0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b082      	sub	sp, #8
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d103      	bne.n	8008be8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008be0:	78fb      	ldrb	r3, [r7, #3]
 8008be2:	4618      	mov	r0, r3
 8008be4:	f000 f872 	bl	8008ccc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008be8:	20c8      	movs	r0, #200	; 0xc8
 8008bea:	f7f8 f8ad 	bl	8000d48 <HAL_Delay>
  return USBH_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	460b      	mov	r3, r1
 8008c02:	70fb      	strb	r3, [r7, #3]
 8008c04:	4613      	mov	r3, r2
 8008c06:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008c0e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008c10:	78fa      	ldrb	r2, [r7, #3]
 8008c12:	68f9      	ldr	r1, [r7, #12]
 8008c14:	4613      	mov	r3, r2
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	4413      	add	r3, r2
 8008c1a:	00db      	lsls	r3, r3, #3
 8008c1c:	440b      	add	r3, r1
 8008c1e:	333b      	adds	r3, #59	; 0x3b
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00a      	beq.n	8008c3c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008c26:	78fa      	ldrb	r2, [r7, #3]
 8008c28:	68f9      	ldr	r1, [r7, #12]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	4413      	add	r3, r2
 8008c30:	00db      	lsls	r3, r3, #3
 8008c32:	440b      	add	r3, r1
 8008c34:	3350      	adds	r3, #80	; 0x50
 8008c36:	78ba      	ldrb	r2, [r7, #2]
 8008c38:	701a      	strb	r2, [r3, #0]
 8008c3a:	e009      	b.n	8008c50 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008c3c:	78fa      	ldrb	r2, [r7, #3]
 8008c3e:	68f9      	ldr	r1, [r7, #12]
 8008c40:	4613      	mov	r3, r2
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	4413      	add	r3, r2
 8008c46:	00db      	lsls	r3, r3, #3
 8008c48:	440b      	add	r3, r1
 8008c4a:	3351      	adds	r3, #81	; 0x51
 8008c4c:	78ba      	ldrb	r2, [r7, #2]
 8008c4e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b082      	sub	sp, #8
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7f8 f86e 	bl	8000d48 <HAL_Delay>
}
 8008c6c:	bf00      	nop
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c82:	79fb      	ldrb	r3, [r7, #7]
 8008c84:	2b03      	cmp	r3, #3
 8008c86:	d817      	bhi.n	8008cb8 <USBH_Get_USB_Status+0x44>
 8008c88:	a201      	add	r2, pc, #4	; (adr r2, 8008c90 <USBH_Get_USB_Status+0x1c>)
 8008c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8e:	bf00      	nop
 8008c90:	08008ca1 	.word	0x08008ca1
 8008c94:	08008ca7 	.word	0x08008ca7
 8008c98:	08008cad 	.word	0x08008cad
 8008c9c:	08008cb3 	.word	0x08008cb3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca4:	e00b      	b.n	8008cbe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008ca6:	2302      	movs	r3, #2
 8008ca8:	73fb      	strb	r3, [r7, #15]
    break;
 8008caa:	e008      	b.n	8008cbe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008cac:	2301      	movs	r3, #1
 8008cae:	73fb      	strb	r3, [r7, #15]
    break;
 8008cb0:	e005      	b.n	8008cbe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008cb2:	2302      	movs	r3, #2
 8008cb4:	73fb      	strb	r3, [r7, #15]
    break;
 8008cb6:	e002      	b.n	8008cbe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008cb8:	2302      	movs	r3, #2
 8008cba:	73fb      	strb	r3, [r7, #15]
    break;
 8008cbc:	bf00      	nop
  }
  return usb_status;
 8008cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3714      	adds	r7, #20
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8008cd6:	79fb      	ldrb	r3, [r7, #7]
 8008cd8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008cda:	79fb      	ldrb	r3, [r7, #7]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d102      	bne.n	8008ce6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	73fb      	strb	r3, [r7, #15]
 8008ce4:	e001      	b.n	8008cea <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008cea:	7bfb      	ldrb	r3, [r7, #15]
 8008cec:	461a      	mov	r2, r3
 8008cee:	2101      	movs	r1, #1
 8008cf0:	4803      	ldr	r0, [pc, #12]	; (8008d00 <MX_DriverVbusFS+0x34>)
 8008cf2:	f7f8 fb0f 	bl	8001314 <HAL_GPIO_WritePin>
}
 8008cf6:	bf00      	nop
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	40020800 	.word	0x40020800

08008d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008d3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008d08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008d0a:	e003      	b.n	8008d14 <LoopCopyDataInit>

08008d0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008d0c:	4b0c      	ldr	r3, [pc, #48]	; (8008d40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008d0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008d10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008d12:	3104      	adds	r1, #4

08008d14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008d14:	480b      	ldr	r0, [pc, #44]	; (8008d44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008d16:	4b0c      	ldr	r3, [pc, #48]	; (8008d48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008d18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008d1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008d1c:	d3f6      	bcc.n	8008d0c <CopyDataInit>
  ldr  r2, =_sbss
 8008d1e:	4a0b      	ldr	r2, [pc, #44]	; (8008d4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008d20:	e002      	b.n	8008d28 <LoopFillZerobss>

08008d22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008d22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008d24:	f842 3b04 	str.w	r3, [r2], #4

08008d28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008d28:	4b09      	ldr	r3, [pc, #36]	; (8008d50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008d2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008d2c:	d3f9      	bcc.n	8008d22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008d2e:	f7ff fccb 	bl	80086c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008d32:	f000 f817 	bl	8008d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008d36:	f7fe ff97 	bl	8007c68 <main>
  bx  lr    
 8008d3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008d3c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008d40:	08008f94 	.word	0x08008f94
  ldr  r0, =_sdata
 8008d44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008d48:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8008d4c:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8008d50:	200008d4 	.word	0x200008d4

08008d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008d54:	e7fe      	b.n	8008d54 <ADC_IRQHandler>
	...

08008d58 <__errno>:
 8008d58:	4b01      	ldr	r3, [pc, #4]	; (8008d60 <__errno+0x8>)
 8008d5a:	6818      	ldr	r0, [r3, #0]
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	2000002c 	.word	0x2000002c

08008d64 <__libc_init_array>:
 8008d64:	b570      	push	{r4, r5, r6, lr}
 8008d66:	4e0d      	ldr	r6, [pc, #52]	; (8008d9c <__libc_init_array+0x38>)
 8008d68:	4c0d      	ldr	r4, [pc, #52]	; (8008da0 <__libc_init_array+0x3c>)
 8008d6a:	1ba4      	subs	r4, r4, r6
 8008d6c:	10a4      	asrs	r4, r4, #2
 8008d6e:	2500      	movs	r5, #0
 8008d70:	42a5      	cmp	r5, r4
 8008d72:	d109      	bne.n	8008d88 <__libc_init_array+0x24>
 8008d74:	4e0b      	ldr	r6, [pc, #44]	; (8008da4 <__libc_init_array+0x40>)
 8008d76:	4c0c      	ldr	r4, [pc, #48]	; (8008da8 <__libc_init_array+0x44>)
 8008d78:	f000 f8ea 	bl	8008f50 <_init>
 8008d7c:	1ba4      	subs	r4, r4, r6
 8008d7e:	10a4      	asrs	r4, r4, #2
 8008d80:	2500      	movs	r5, #0
 8008d82:	42a5      	cmp	r5, r4
 8008d84:	d105      	bne.n	8008d92 <__libc_init_array+0x2e>
 8008d86:	bd70      	pop	{r4, r5, r6, pc}
 8008d88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d8c:	4798      	blx	r3
 8008d8e:	3501      	adds	r5, #1
 8008d90:	e7ee      	b.n	8008d70 <__libc_init_array+0xc>
 8008d92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d96:	4798      	blx	r3
 8008d98:	3501      	adds	r5, #1
 8008d9a:	e7f2      	b.n	8008d82 <__libc_init_array+0x1e>
 8008d9c:	08008f8c 	.word	0x08008f8c
 8008da0:	08008f8c 	.word	0x08008f8c
 8008da4:	08008f8c 	.word	0x08008f8c
 8008da8:	08008f90 	.word	0x08008f90

08008dac <malloc>:
 8008dac:	4b02      	ldr	r3, [pc, #8]	; (8008db8 <malloc+0xc>)
 8008dae:	4601      	mov	r1, r0
 8008db0:	6818      	ldr	r0, [r3, #0]
 8008db2:	f000 b861 	b.w	8008e78 <_malloc_r>
 8008db6:	bf00      	nop
 8008db8:	2000002c 	.word	0x2000002c

08008dbc <free>:
 8008dbc:	4b02      	ldr	r3, [pc, #8]	; (8008dc8 <free+0xc>)
 8008dbe:	4601      	mov	r1, r0
 8008dc0:	6818      	ldr	r0, [r3, #0]
 8008dc2:	f000 b80b 	b.w	8008ddc <_free_r>
 8008dc6:	bf00      	nop
 8008dc8:	2000002c 	.word	0x2000002c

08008dcc <memset>:
 8008dcc:	4402      	add	r2, r0
 8008dce:	4603      	mov	r3, r0
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d100      	bne.n	8008dd6 <memset+0xa>
 8008dd4:	4770      	bx	lr
 8008dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8008dda:	e7f9      	b.n	8008dd0 <memset+0x4>

08008ddc <_free_r>:
 8008ddc:	b538      	push	{r3, r4, r5, lr}
 8008dde:	4605      	mov	r5, r0
 8008de0:	2900      	cmp	r1, #0
 8008de2:	d045      	beq.n	8008e70 <_free_r+0x94>
 8008de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008de8:	1f0c      	subs	r4, r1, #4
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	bfb8      	it	lt
 8008dee:	18e4      	addlt	r4, r4, r3
 8008df0:	f000 f8ac 	bl	8008f4c <__malloc_lock>
 8008df4:	4a1f      	ldr	r2, [pc, #124]	; (8008e74 <_free_r+0x98>)
 8008df6:	6813      	ldr	r3, [r2, #0]
 8008df8:	4610      	mov	r0, r2
 8008dfa:	b933      	cbnz	r3, 8008e0a <_free_r+0x2e>
 8008dfc:	6063      	str	r3, [r4, #4]
 8008dfe:	6014      	str	r4, [r2, #0]
 8008e00:	4628      	mov	r0, r5
 8008e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e06:	f000 b8a2 	b.w	8008f4e <__malloc_unlock>
 8008e0a:	42a3      	cmp	r3, r4
 8008e0c:	d90c      	bls.n	8008e28 <_free_r+0x4c>
 8008e0e:	6821      	ldr	r1, [r4, #0]
 8008e10:	1862      	adds	r2, r4, r1
 8008e12:	4293      	cmp	r3, r2
 8008e14:	bf04      	itt	eq
 8008e16:	681a      	ldreq	r2, [r3, #0]
 8008e18:	685b      	ldreq	r3, [r3, #4]
 8008e1a:	6063      	str	r3, [r4, #4]
 8008e1c:	bf04      	itt	eq
 8008e1e:	1852      	addeq	r2, r2, r1
 8008e20:	6022      	streq	r2, [r4, #0]
 8008e22:	6004      	str	r4, [r0, #0]
 8008e24:	e7ec      	b.n	8008e00 <_free_r+0x24>
 8008e26:	4613      	mov	r3, r2
 8008e28:	685a      	ldr	r2, [r3, #4]
 8008e2a:	b10a      	cbz	r2, 8008e30 <_free_r+0x54>
 8008e2c:	42a2      	cmp	r2, r4
 8008e2e:	d9fa      	bls.n	8008e26 <_free_r+0x4a>
 8008e30:	6819      	ldr	r1, [r3, #0]
 8008e32:	1858      	adds	r0, r3, r1
 8008e34:	42a0      	cmp	r0, r4
 8008e36:	d10b      	bne.n	8008e50 <_free_r+0x74>
 8008e38:	6820      	ldr	r0, [r4, #0]
 8008e3a:	4401      	add	r1, r0
 8008e3c:	1858      	adds	r0, r3, r1
 8008e3e:	4282      	cmp	r2, r0
 8008e40:	6019      	str	r1, [r3, #0]
 8008e42:	d1dd      	bne.n	8008e00 <_free_r+0x24>
 8008e44:	6810      	ldr	r0, [r2, #0]
 8008e46:	6852      	ldr	r2, [r2, #4]
 8008e48:	605a      	str	r2, [r3, #4]
 8008e4a:	4401      	add	r1, r0
 8008e4c:	6019      	str	r1, [r3, #0]
 8008e4e:	e7d7      	b.n	8008e00 <_free_r+0x24>
 8008e50:	d902      	bls.n	8008e58 <_free_r+0x7c>
 8008e52:	230c      	movs	r3, #12
 8008e54:	602b      	str	r3, [r5, #0]
 8008e56:	e7d3      	b.n	8008e00 <_free_r+0x24>
 8008e58:	6820      	ldr	r0, [r4, #0]
 8008e5a:	1821      	adds	r1, r4, r0
 8008e5c:	428a      	cmp	r2, r1
 8008e5e:	bf04      	itt	eq
 8008e60:	6811      	ldreq	r1, [r2, #0]
 8008e62:	6852      	ldreq	r2, [r2, #4]
 8008e64:	6062      	str	r2, [r4, #4]
 8008e66:	bf04      	itt	eq
 8008e68:	1809      	addeq	r1, r1, r0
 8008e6a:	6021      	streq	r1, [r4, #0]
 8008e6c:	605c      	str	r4, [r3, #4]
 8008e6e:	e7c7      	b.n	8008e00 <_free_r+0x24>
 8008e70:	bd38      	pop	{r3, r4, r5, pc}
 8008e72:	bf00      	nop
 8008e74:	200000c0 	.word	0x200000c0

08008e78 <_malloc_r>:
 8008e78:	b570      	push	{r4, r5, r6, lr}
 8008e7a:	1ccd      	adds	r5, r1, #3
 8008e7c:	f025 0503 	bic.w	r5, r5, #3
 8008e80:	3508      	adds	r5, #8
 8008e82:	2d0c      	cmp	r5, #12
 8008e84:	bf38      	it	cc
 8008e86:	250c      	movcc	r5, #12
 8008e88:	2d00      	cmp	r5, #0
 8008e8a:	4606      	mov	r6, r0
 8008e8c:	db01      	blt.n	8008e92 <_malloc_r+0x1a>
 8008e8e:	42a9      	cmp	r1, r5
 8008e90:	d903      	bls.n	8008e9a <_malloc_r+0x22>
 8008e92:	230c      	movs	r3, #12
 8008e94:	6033      	str	r3, [r6, #0]
 8008e96:	2000      	movs	r0, #0
 8008e98:	bd70      	pop	{r4, r5, r6, pc}
 8008e9a:	f000 f857 	bl	8008f4c <__malloc_lock>
 8008e9e:	4a21      	ldr	r2, [pc, #132]	; (8008f24 <_malloc_r+0xac>)
 8008ea0:	6814      	ldr	r4, [r2, #0]
 8008ea2:	4621      	mov	r1, r4
 8008ea4:	b991      	cbnz	r1, 8008ecc <_malloc_r+0x54>
 8008ea6:	4c20      	ldr	r4, [pc, #128]	; (8008f28 <_malloc_r+0xb0>)
 8008ea8:	6823      	ldr	r3, [r4, #0]
 8008eaa:	b91b      	cbnz	r3, 8008eb4 <_malloc_r+0x3c>
 8008eac:	4630      	mov	r0, r6
 8008eae:	f000 f83d 	bl	8008f2c <_sbrk_r>
 8008eb2:	6020      	str	r0, [r4, #0]
 8008eb4:	4629      	mov	r1, r5
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	f000 f838 	bl	8008f2c <_sbrk_r>
 8008ebc:	1c43      	adds	r3, r0, #1
 8008ebe:	d124      	bne.n	8008f0a <_malloc_r+0x92>
 8008ec0:	230c      	movs	r3, #12
 8008ec2:	6033      	str	r3, [r6, #0]
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	f000 f842 	bl	8008f4e <__malloc_unlock>
 8008eca:	e7e4      	b.n	8008e96 <_malloc_r+0x1e>
 8008ecc:	680b      	ldr	r3, [r1, #0]
 8008ece:	1b5b      	subs	r3, r3, r5
 8008ed0:	d418      	bmi.n	8008f04 <_malloc_r+0x8c>
 8008ed2:	2b0b      	cmp	r3, #11
 8008ed4:	d90f      	bls.n	8008ef6 <_malloc_r+0x7e>
 8008ed6:	600b      	str	r3, [r1, #0]
 8008ed8:	50cd      	str	r5, [r1, r3]
 8008eda:	18cc      	adds	r4, r1, r3
 8008edc:	4630      	mov	r0, r6
 8008ede:	f000 f836 	bl	8008f4e <__malloc_unlock>
 8008ee2:	f104 000b 	add.w	r0, r4, #11
 8008ee6:	1d23      	adds	r3, r4, #4
 8008ee8:	f020 0007 	bic.w	r0, r0, #7
 8008eec:	1ac3      	subs	r3, r0, r3
 8008eee:	d0d3      	beq.n	8008e98 <_malloc_r+0x20>
 8008ef0:	425a      	negs	r2, r3
 8008ef2:	50e2      	str	r2, [r4, r3]
 8008ef4:	e7d0      	b.n	8008e98 <_malloc_r+0x20>
 8008ef6:	428c      	cmp	r4, r1
 8008ef8:	684b      	ldr	r3, [r1, #4]
 8008efa:	bf16      	itet	ne
 8008efc:	6063      	strne	r3, [r4, #4]
 8008efe:	6013      	streq	r3, [r2, #0]
 8008f00:	460c      	movne	r4, r1
 8008f02:	e7eb      	b.n	8008edc <_malloc_r+0x64>
 8008f04:	460c      	mov	r4, r1
 8008f06:	6849      	ldr	r1, [r1, #4]
 8008f08:	e7cc      	b.n	8008ea4 <_malloc_r+0x2c>
 8008f0a:	1cc4      	adds	r4, r0, #3
 8008f0c:	f024 0403 	bic.w	r4, r4, #3
 8008f10:	42a0      	cmp	r0, r4
 8008f12:	d005      	beq.n	8008f20 <_malloc_r+0xa8>
 8008f14:	1a21      	subs	r1, r4, r0
 8008f16:	4630      	mov	r0, r6
 8008f18:	f000 f808 	bl	8008f2c <_sbrk_r>
 8008f1c:	3001      	adds	r0, #1
 8008f1e:	d0cf      	beq.n	8008ec0 <_malloc_r+0x48>
 8008f20:	6025      	str	r5, [r4, #0]
 8008f22:	e7db      	b.n	8008edc <_malloc_r+0x64>
 8008f24:	200000c0 	.word	0x200000c0
 8008f28:	200000c4 	.word	0x200000c4

08008f2c <_sbrk_r>:
 8008f2c:	b538      	push	{r3, r4, r5, lr}
 8008f2e:	4c06      	ldr	r4, [pc, #24]	; (8008f48 <_sbrk_r+0x1c>)
 8008f30:	2300      	movs	r3, #0
 8008f32:	4605      	mov	r5, r0
 8008f34:	4608      	mov	r0, r1
 8008f36:	6023      	str	r3, [r4, #0]
 8008f38:	f7ff fb9a 	bl	8008670 <_sbrk>
 8008f3c:	1c43      	adds	r3, r0, #1
 8008f3e:	d102      	bne.n	8008f46 <_sbrk_r+0x1a>
 8008f40:	6823      	ldr	r3, [r4, #0]
 8008f42:	b103      	cbz	r3, 8008f46 <_sbrk_r+0x1a>
 8008f44:	602b      	str	r3, [r5, #0]
 8008f46:	bd38      	pop	{r3, r4, r5, pc}
 8008f48:	200008d0 	.word	0x200008d0

08008f4c <__malloc_lock>:
 8008f4c:	4770      	bx	lr

08008f4e <__malloc_unlock>:
 8008f4e:	4770      	bx	lr

08008f50 <_init>:
 8008f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f52:	bf00      	nop
 8008f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f56:	bc08      	pop	{r3}
 8008f58:	469e      	mov	lr, r3
 8008f5a:	4770      	bx	lr

08008f5c <_fini>:
 8008f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5e:	bf00      	nop
 8008f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f62:	bc08      	pop	{r3}
 8008f64:	469e      	mov	lr, r3
 8008f66:	4770      	bx	lr
