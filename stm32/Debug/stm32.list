
stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a57c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  0800a70c  0800a70c  0001a70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8c4  0800a8c4  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8c4  0800a8c4  0001a8c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8cc  0800a8cc  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8cc  0800a8cc  0001a8cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8d0  0800a8d0  0001a8d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800a8d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b8  20000208  0800aadc  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ac0  0800aadc  00020ac0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dfc9  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003cbb  00000000  00000000  0003e201  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001818  00000000  00000000  00041ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001680  00000000  00000000  000436d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002582c  00000000  00000000  00044d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015122  00000000  00000000  0006a584  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d43a9  00000000  00000000  0007f6a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00153a4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f10  00000000  00000000  00153acc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a6f4 	.word	0x0800a6f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800a6f4 	.word	0x0800a6f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a80:	f000 b972 	b.w	8000d68 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4688      	mov	r8, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14b      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4615      	mov	r5, r2
 8000aae:	d967      	bls.n	8000b80 <__udivmoddi4+0xe4>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0720 	rsb	r7, r2, #32
 8000aba:	fa01 f302 	lsl.w	r3, r1, r2
 8000abe:	fa20 f707 	lsr.w	r7, r0, r7
 8000ac2:	4095      	lsls	r5, r2
 8000ac4:	ea47 0803 	orr.w	r8, r7, r3
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ace:	0c23      	lsrs	r3, r4, #16
 8000ad0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ad4:	fa1f fc85 	uxth.w	ip, r5
 8000ad8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000adc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x60>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000aee:	f080 811b 	bcs.w	8000d28 <__udivmoddi4+0x28c>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 8118 	bls.w	8000d28 <__udivmoddi4+0x28c>
 8000af8:	3f02      	subs	r7, #2
 8000afa:	442b      	add	r3, r5
 8000afc:	1a5b      	subs	r3, r3, r1
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b10:	45a4      	cmp	ip, r4
 8000b12:	d909      	bls.n	8000b28 <__udivmoddi4+0x8c>
 8000b14:	192c      	adds	r4, r5, r4
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b1a:	f080 8107 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000b1e:	45a4      	cmp	ip, r4
 8000b20:	f240 8104 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000b24:	3802      	subs	r0, #2
 8000b26:	442c      	add	r4, r5
 8000b28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b2c:	eba4 040c 	sub.w	r4, r4, ip
 8000b30:	2700      	movs	r7, #0
 8000b32:	b11e      	cbz	r6, 8000b3c <__udivmoddi4+0xa0>
 8000b34:	40d4      	lsrs	r4, r2
 8000b36:	2300      	movs	r3, #0
 8000b38:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d909      	bls.n	8000b5a <__udivmoddi4+0xbe>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80eb 	beq.w	8000d22 <__udivmoddi4+0x286>
 8000b4c:	2700      	movs	r7, #0
 8000b4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b52:	4638      	mov	r0, r7
 8000b54:	4639      	mov	r1, r7
 8000b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5a:	fab3 f783 	clz	r7, r3
 8000b5e:	2f00      	cmp	r7, #0
 8000b60:	d147      	bne.n	8000bf2 <__udivmoddi4+0x156>
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d302      	bcc.n	8000b6c <__udivmoddi4+0xd0>
 8000b66:	4282      	cmp	r2, r0
 8000b68:	f200 80fa 	bhi.w	8000d60 <__udivmoddi4+0x2c4>
 8000b6c:	1a84      	subs	r4, r0, r2
 8000b6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b72:	2001      	movs	r0, #1
 8000b74:	4698      	mov	r8, r3
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d0e0      	beq.n	8000b3c <__udivmoddi4+0xa0>
 8000b7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b7e:	e7dd      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000b80:	b902      	cbnz	r2, 8000b84 <__udivmoddi4+0xe8>
 8000b82:	deff      	udf	#255	; 0xff
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f040 808f 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8e:	1b49      	subs	r1, r1, r5
 8000b90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b94:	fa1f f885 	uxth.w	r8, r5
 8000b98:	2701      	movs	r7, #1
 8000b9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ba4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bac:	4299      	cmp	r1, r3
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bb0:	18eb      	adds	r3, r5, r3
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	f200 80cd 	bhi.w	8000d58 <__udivmoddi4+0x2bc>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bcc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x14c>
 8000bd8:	192c      	adds	r4, r5, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x14a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80b6 	bhi.w	8000d52 <__udivmoddi4+0x2b6>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e79f      	b.n	8000b32 <__udivmoddi4+0x96>
 8000bf2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bf6:	40bb      	lsls	r3, r7
 8000bf8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c00:	fa01 f407 	lsl.w	r4, r1, r7
 8000c04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c10:	4325      	orrs	r5, r4
 8000c12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c16:	0c2c      	lsrs	r4, r5, #16
 8000c18:	fb08 3319 	mls	r3, r8, r9, r3
 8000c1c:	fa1f fa8e 	uxth.w	sl, lr
 8000c20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c24:	fb09 f40a 	mul.w	r4, r9, sl
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1e 0303 	adds.w	r3, lr, r3
 8000c38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c3c:	f080 8087 	bcs.w	8000d4e <__udivmoddi4+0x2b2>
 8000c40:	429c      	cmp	r4, r3
 8000c42:	f240 8084 	bls.w	8000d4e <__udivmoddi4+0x2b2>
 8000c46:	f1a9 0902 	sub.w	r9, r9, #2
 8000c4a:	4473      	add	r3, lr
 8000c4c:	1b1b      	subs	r3, r3, r4
 8000c4e:	b2ad      	uxth	r5, r5
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c60:	45a2      	cmp	sl, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1e 0404 	adds.w	r4, lr, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6c:	d26b      	bcs.n	8000d46 <__udivmoddi4+0x2aa>
 8000c6e:	45a2      	cmp	sl, r4
 8000c70:	d969      	bls.n	8000d46 <__udivmoddi4+0x2aa>
 8000c72:	3802      	subs	r0, #2
 8000c74:	4474      	add	r4, lr
 8000c76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c7e:	eba4 040a 	sub.w	r4, r4, sl
 8000c82:	454c      	cmp	r4, r9
 8000c84:	46c2      	mov	sl, r8
 8000c86:	464b      	mov	r3, r9
 8000c88:	d354      	bcc.n	8000d34 <__udivmoddi4+0x298>
 8000c8a:	d051      	beq.n	8000d30 <__udivmoddi4+0x294>
 8000c8c:	2e00      	cmp	r6, #0
 8000c8e:	d069      	beq.n	8000d64 <__udivmoddi4+0x2c8>
 8000c90:	ebb1 050a 	subs.w	r5, r1, sl
 8000c94:	eb64 0403 	sbc.w	r4, r4, r3
 8000c98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c9c:	40fd      	lsrs	r5, r7
 8000c9e:	40fc      	lsrs	r4, r7
 8000ca0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ca4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e747      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000cac:	f1c2 0320 	rsb	r3, r2, #32
 8000cb0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cb4:	4095      	lsls	r5, r2
 8000cb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cba:	fa21 f303 	lsr.w	r3, r1, r3
 8000cbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc2:	4338      	orrs	r0, r7
 8000cc4:	0c01      	lsrs	r1, r0, #16
 8000cc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cca:	fa1f f885 	uxth.w	r8, r5
 8000cce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb07 f308 	mul.w	r3, r7, r8
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x256>
 8000ce2:	1869      	adds	r1, r5, r1
 8000ce4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ce8:	d22f      	bcs.n	8000d4a <__udivmoddi4+0x2ae>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d92d      	bls.n	8000d4a <__udivmoddi4+0x2ae>
 8000cee:	3f02      	subs	r7, #2
 8000cf0:	4429      	add	r1, r5
 8000cf2:	1acb      	subs	r3, r1, r3
 8000cf4:	b281      	uxth	r1, r0
 8000cf6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cfa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d02:	fb00 f308 	mul.w	r3, r0, r8
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x27e>
 8000d0a:	1869      	adds	r1, r5, r1
 8000d0c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d10:	d217      	bcs.n	8000d42 <__udivmoddi4+0x2a6>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d915      	bls.n	8000d42 <__udivmoddi4+0x2a6>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4429      	add	r1, r5
 8000d1a:	1ac9      	subs	r1, r1, r3
 8000d1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d20:	e73b      	b.n	8000b9a <__udivmoddi4+0xfe>
 8000d22:	4637      	mov	r7, r6
 8000d24:	4630      	mov	r0, r6
 8000d26:	e709      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000d28:	4607      	mov	r7, r0
 8000d2a:	e6e7      	b.n	8000afc <__udivmoddi4+0x60>
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	e6fb      	b.n	8000b28 <__udivmoddi4+0x8c>
 8000d30:	4541      	cmp	r1, r8
 8000d32:	d2ab      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d38:	eb69 020e 	sbc.w	r2, r9, lr
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	4613      	mov	r3, r2
 8000d40:	e7a4      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d42:	4660      	mov	r0, ip
 8000d44:	e7e9      	b.n	8000d1a <__udivmoddi4+0x27e>
 8000d46:	4618      	mov	r0, r3
 8000d48:	e795      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4a:	4667      	mov	r7, ip
 8000d4c:	e7d1      	b.n	8000cf2 <__udivmoddi4+0x256>
 8000d4e:	4681      	mov	r9, r0
 8000d50:	e77c      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d52:	3802      	subs	r0, #2
 8000d54:	442c      	add	r4, r5
 8000d56:	e747      	b.n	8000be8 <__udivmoddi4+0x14c>
 8000d58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5c:	442b      	add	r3, r5
 8000d5e:	e72f      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d60:	4638      	mov	r0, r7
 8000d62:	e708      	b.n	8000b76 <__udivmoddi4+0xda>
 8000d64:	4637      	mov	r7, r6
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0xa0>

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <HAL_Init>:
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_Init+0x40>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0d      	ldr	r2, [pc, #52]	; (8000dac <HAL_Init+0x40>)
 8000d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d7a:	6013      	str	r3, [r2, #0]
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_Init+0x40>)
 8000d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a07      	ldr	r2, [pc, #28]	; (8000dac <HAL_Init+0x40>)
 8000d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 f94d 	bl	8001034 <HAL_NVIC_SetPriorityGrouping>
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f000 f808 	bl	8000db0 <HAL_InitTick>
 8000da0:	f008 f8f8 	bl	8008f94 <HAL_MspInit>
 8000da4:	2300      	movs	r3, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023c00 	.word	0x40023c00

08000db0 <HAL_InitTick>:
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_InitTick+0x54>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_InitTick+0x58>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f965 	bl	800109e <HAL_SYSTICK_Config>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_InitTick+0x2e>
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00e      	b.n	8000dfc <HAL_InitTick+0x4c>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b0f      	cmp	r3, #15
 8000de2:	d80a      	bhi.n	8000dfa <HAL_InitTick+0x4a>
 8000de4:	2200      	movs	r2, #0
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dec:	f000 f92d 	bl	800104a <HAL_NVIC_SetPriority>
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <HAL_InitTick+0x5c>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	2300      	movs	r3, #0
 8000df8:	e000      	b.n	8000dfc <HAL_InitTick+0x4c>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000034 	.word	0x20000034
 8000e08:	20000004 	.word	0x20000004
 8000e0c:	20000000 	.word	0x20000000

08000e10 <HAL_IncTick>:
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x20>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_IncTick+0x24>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_IncTick+0x24>)
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000004 	.word	0x20000004
 8000e34:	20000244 	.word	0x20000244

08000e38 <HAL_GetTick>:
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <HAL_GetTick+0x14>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000244 	.word	0x20000244

08000e50 <HAL_Delay>:
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	f7ff ffee 	bl	8000e38 <HAL_GetTick>
 8000e5c:	60b8      	str	r0, [r7, #8]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e68:	d005      	beq.n	8000e76 <HAL_Delay+0x26>
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <HAL_Delay+0x40>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4413      	add	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	bf00      	nop
 8000e78:	f7ff ffde 	bl	8000e38 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d8f7      	bhi.n	8000e78 <HAL_Delay+0x28>
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000004 	.word	0x20000004

08000e94 <__NVIC_SetPriorityGrouping>:
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	021a      	lsls	r2, r3, #8
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	60d3      	str	r3, [r2, #12]
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_GetPriorityGrouping>:
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	4618      	mov	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_EnableIRQ>:
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	db0b      	blt.n	8000f22 <__NVIC_EnableIRQ+0x2a>
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	f003 021f 	and.w	r2, r3, #31
 8000f10:	4907      	ldr	r1, [pc, #28]	; (8000f30 <__NVIC_EnableIRQ+0x38>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	095b      	lsrs	r3, r3, #5
 8000f18:	2001      	movs	r0, #1
 8000f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000e100 	.word	0xe000e100

08000f34 <__NVIC_SetPriority>:
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6039      	str	r1, [r7, #0]
 8000f3e:	71fb      	strb	r3, [r7, #7]
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	db0a      	blt.n	8000f5e <__NVIC_SetPriority+0x2a>
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	490c      	ldr	r1, [pc, #48]	; (8000f80 <__NVIC_SetPriority+0x4c>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	0112      	lsls	r2, r2, #4
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	440b      	add	r3, r1
 8000f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000f5c:	e00a      	b.n	8000f74 <__NVIC_SetPriority+0x40>
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4908      	ldr	r1, [pc, #32]	; (8000f84 <__NVIC_SetPriority+0x50>)
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	3b04      	subs	r3, #4
 8000f6c:	0112      	lsls	r2, r2, #4
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	440b      	add	r3, r1
 8000f72:	761a      	strb	r2, [r3, #24]
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000e100 	.word	0xe000e100
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <NVIC_EncodePriority>:
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	; 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	61fb      	str	r3, [r7, #28]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f1c3 0307 	rsb	r3, r3, #7
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	bf28      	it	cs
 8000fa6:	2304      	movcs	r3, #4
 8000fa8:	61bb      	str	r3, [r7, #24]
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3304      	adds	r3, #4
 8000fae:	2b06      	cmp	r3, #6
 8000fb0:	d902      	bls.n	8000fb8 <NVIC_EncodePriority+0x30>
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3b03      	subs	r3, #3
 8000fb6:	e000      	b.n	8000fba <NVIC_EncodePriority+0x32>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	401a      	ands	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	409a      	lsls	r2, r3
 8000fd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fda:	43d9      	mvns	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	400b      	ands	r3, r1
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3724      	adds	r7, #36	; 0x24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <SysTick_Config>:
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001000:	d301      	bcc.n	8001006 <SysTick_Config+0x16>
 8001002:	2301      	movs	r3, #1
 8001004:	e00f      	b.n	8001026 <SysTick_Config+0x36>
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <SysTick_Config+0x40>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	6053      	str	r3, [r2, #4]
 800100e:	210f      	movs	r1, #15
 8001010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001014:	f7ff ff8e 	bl	8000f34 <__NVIC_SetPriority>
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <SysTick_Config+0x40>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <SysTick_Config+0x40>)
 8001020:	2207      	movs	r2, #7
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	2300      	movs	r3, #0
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	e000e010 	.word	0xe000e010

08001034 <HAL_NVIC_SetPriorityGrouping>:
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff29 	bl	8000e94 <__NVIC_SetPriorityGrouping>
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_SetPriority>:
 800104a:	b580      	push	{r7, lr}
 800104c:	b086      	sub	sp, #24
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	73fb      	strb	r3, [r7, #15]
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	f7ff ff3e 	bl	8000edc <__NVIC_GetPriorityGrouping>
 8001060:	6178      	str	r0, [r7, #20]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	6978      	ldr	r0, [r7, #20]
 8001068:	f7ff ff8e 	bl	8000f88 <NVIC_EncodePriority>
 800106c:	4602      	mov	r2, r0
 800106e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff5d 	bl	8000f34 <__NVIC_SetPriority>
 800107a:	bf00      	nop
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_NVIC_EnableIRQ>:
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	71fb      	strb	r3, [r7, #7]
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff31 	bl	8000ef8 <__NVIC_EnableIRQ>
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_SYSTICK_Config>:
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ffa2 	bl	8000ff0 <SysTick_Config>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <HAL_GPIO_Init>:
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	; 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
 80010d2:	e16b      	b.n	80013ac <HAL_GPIO_Init+0x2f4>
 80010d4:	2201      	movs	r2, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	f040 815a 	bne.w	80013a6 <HAL_GPIO_Init+0x2ee>
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d00b      	beq.n	8001112 <HAL_GPIO_Init+0x5a>
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d007      	beq.n	8001112 <HAL_GPIO_Init+0x5a>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b11      	cmp	r3, #17
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x5a>
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b12      	cmp	r3, #18
 8001110:	d130      	bne.n	8001174 <HAL_GPIO_Init+0xbc>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	61bb      	str	r3, [r7, #24]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	2203      	movs	r2, #3
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	68da      	ldr	r2, [r3, #12]
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	61bb      	str	r3, [r7, #24]
 8001148:	2201      	movs	r2, #1
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	091b      	lsrs	r3, r3, #4
 800115e:	f003 0201 	and.w	r2, r3, #1
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	61bb      	str	r3, [r7, #24]
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2203      	movs	r2, #3
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0xfc>
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b12      	cmp	r3, #18
 80011b2:	d123      	bne.n	80011fc <HAL_GPIO_Init+0x144>
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	08da      	lsrs	r2, r3, #3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3208      	adds	r2, #8
 80011bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c0:	61bb      	str	r3, [r7, #24]
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	f003 0307 	and.w	r3, r3, #7
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	220f      	movs	r2, #15
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	691a      	ldr	r2, [r3, #16]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	08da      	lsrs	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3208      	adds	r2, #8
 80011f6:	69b9      	ldr	r1, [r7, #24]
 80011f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	61bb      	str	r3, [r7, #24]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0203 	and.w	r2, r3, #3
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 80b4 	beq.w	80013a6 <HAL_GPIO_Init+0x2ee>
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b5f      	ldr	r3, [pc, #380]	; (80013c0 <HAL_GPIO_Init+0x308>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	4a5e      	ldr	r2, [pc, #376]	; (80013c0 <HAL_GPIO_Init+0x308>)
 8001248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124c:	6453      	str	r3, [r2, #68]	; 0x44
 800124e:	4b5c      	ldr	r3, [pc, #368]	; (80013c0 <HAL_GPIO_Init+0x308>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4a5a      	ldr	r2, [pc, #360]	; (80013c4 <HAL_GPIO_Init+0x30c>)
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	3302      	adds	r3, #2
 8001262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	220f      	movs	r2, #15
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a51      	ldr	r2, [pc, #324]	; (80013c8 <HAL_GPIO_Init+0x310>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d02b      	beq.n	80012de <HAL_GPIO_Init+0x226>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a50      	ldr	r2, [pc, #320]	; (80013cc <HAL_GPIO_Init+0x314>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d025      	beq.n	80012da <HAL_GPIO_Init+0x222>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4f      	ldr	r2, [pc, #316]	; (80013d0 <HAL_GPIO_Init+0x318>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d01f      	beq.n	80012d6 <HAL_GPIO_Init+0x21e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4e      	ldr	r2, [pc, #312]	; (80013d4 <HAL_GPIO_Init+0x31c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d019      	beq.n	80012d2 <HAL_GPIO_Init+0x21a>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a4d      	ldr	r2, [pc, #308]	; (80013d8 <HAL_GPIO_Init+0x320>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d013      	beq.n	80012ce <HAL_GPIO_Init+0x216>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a4c      	ldr	r2, [pc, #304]	; (80013dc <HAL_GPIO_Init+0x324>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d00d      	beq.n	80012ca <HAL_GPIO_Init+0x212>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a4b      	ldr	r2, [pc, #300]	; (80013e0 <HAL_GPIO_Init+0x328>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d007      	beq.n	80012c6 <HAL_GPIO_Init+0x20e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4a      	ldr	r2, [pc, #296]	; (80013e4 <HAL_GPIO_Init+0x32c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d101      	bne.n	80012c2 <HAL_GPIO_Init+0x20a>
 80012be:	2307      	movs	r3, #7
 80012c0:	e00e      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012c2:	2308      	movs	r3, #8
 80012c4:	e00c      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012c6:	2306      	movs	r3, #6
 80012c8:	e00a      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012ca:	2305      	movs	r3, #5
 80012cc:	e008      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012ce:	2304      	movs	r3, #4
 80012d0:	e006      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012d2:	2303      	movs	r3, #3
 80012d4:	e004      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e002      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012da:	2301      	movs	r3, #1
 80012dc:	e000      	b.n	80012e0 <HAL_GPIO_Init+0x228>
 80012de:	2300      	movs	r3, #0
 80012e0:	69fa      	ldr	r2, [r7, #28]
 80012e2:	f002 0203 	and.w	r2, r2, #3
 80012e6:	0092      	lsls	r2, r2, #2
 80012e8:	4093      	lsls	r3, r2
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
 80012f0:	4934      	ldr	r1, [pc, #208]	; (80013c4 <HAL_GPIO_Init+0x30c>)
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80012fe:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <HAL_GPIO_Init+0x330>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	61bb      	str	r3, [r7, #24]
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x26a>
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
 8001322:	4a31      	ldr	r2, [pc, #196]	; (80013e8 <HAL_GPIO_Init+0x330>)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b2f      	ldr	r3, [pc, #188]	; (80013e8 <HAL_GPIO_Init+0x330>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x294>
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	4a26      	ldr	r2, [pc, #152]	; (80013e8 <HAL_GPIO_Init+0x330>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	6053      	str	r3, [r2, #4]
 8001352:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <HAL_GPIO_Init+0x330>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	61bb      	str	r3, [r7, #24]
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x2be>
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
 8001376:	4a1c      	ldr	r2, [pc, #112]	; (80013e8 <HAL_GPIO_Init+0x330>)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	6093      	str	r3, [r2, #8]
 800137c:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <HAL_GPIO_Init+0x330>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	61bb      	str	r3, [r7, #24]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x2e8>
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
 80013a0:	4a11      	ldr	r2, [pc, #68]	; (80013e8 <HAL_GPIO_Init+0x330>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	60d3      	str	r3, [r2, #12]
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3301      	adds	r3, #1
 80013aa:	61fb      	str	r3, [r7, #28]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	2b0f      	cmp	r3, #15
 80013b0:	f67f ae90 	bls.w	80010d4 <HAL_GPIO_Init+0x1c>
 80013b4:	bf00      	nop
 80013b6:	3724      	adds	r7, #36	; 0x24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40013800 	.word	0x40013800
 80013c8:	40020000 	.word	0x40020000
 80013cc:	40020400 	.word	0x40020400
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40020c00 	.word	0x40020c00
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40021400 	.word	0x40021400
 80013e0:	40021800 	.word	0x40021800
 80013e4:	40021c00 	.word	0x40021c00
 80013e8:	40013c00 	.word	0x40013c00

080013ec <HAL_GPIO_ReadPin>:
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	887b      	ldrh	r3, [r7, #2]
 80013fe:	4013      	ands	r3, r2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d002      	beq.n	800140a <HAL_GPIO_ReadPin+0x1e>
 8001404:	2301      	movs	r3, #1
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	e001      	b.n	800140e <HAL_GPIO_ReadPin+0x22>
 800140a:	2300      	movs	r3, #0
 800140c:	73fb      	strb	r3, [r7, #15]
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	4618      	mov	r0, r3
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <HAL_GPIO_WritePin>:
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	807b      	strh	r3, [r7, #2]
 8001428:	4613      	mov	r3, r2
 800142a:	707b      	strb	r3, [r7, #1]
 800142c:	787b      	ldrb	r3, [r7, #1]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_WritePin+0x1e>
 8001432:	887a      	ldrh	r2, [r7, #2]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	619a      	str	r2, [r3, #24]
 8001438:	e003      	b.n	8001442 <HAL_GPIO_WritePin+0x26>
 800143a:	887b      	ldrh	r3, [r7, #2]
 800143c:	041a      	lsls	r2, r3, #16
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	619a      	str	r2, [r3, #24]
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <HAL_HCD_Init>:
 800144e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001450:	b08f      	sub	sp, #60	; 0x3c
 8001452:	af0a      	add	r7, sp, #40	; 0x28
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <HAL_HCD_Init+0x12>
 800145c:	2301      	movs	r3, #1
 800145e:	e054      	b.n	800150a <HAL_HCD_Init+0xbc>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d106      	bne.n	8001480 <HAL_HCD_Init+0x32>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f008 f84c 	bl	8009518 <HAL_HCD_MspInit>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2203      	movs	r2, #3
 8001484:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800148c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001490:	2b00      	cmp	r3, #0
 8001492:	d102      	bne.n	800149a <HAL_HCD_Init+0x4c>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f004 fcd2 	bl	8005e48 <USB_DisableGlobalInt>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	687e      	ldr	r6, [r7, #4]
 80014ac:	466d      	mov	r5, sp
 80014ae:	f106 0410 	add.w	r4, r6, #16
 80014b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014be:	e885 0003 	stmia.w	r5, {r0, r1}
 80014c2:	1d33      	adds	r3, r6, #4
 80014c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c6:	6838      	ldr	r0, [r7, #0]
 80014c8:	f004 fc4c 	bl	8005d64 <USB_CoreInit>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2101      	movs	r1, #1
 80014d2:	4618      	mov	r0, r3
 80014d4:	f004 fcc9 	bl	8005e6a <USB_SetCurrentMode>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	687e      	ldr	r6, [r7, #4]
 80014e0:	466d      	mov	r5, sp
 80014e2:	f106 0410 	add.w	r4, r6, #16
 80014e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80014f6:	1d33      	adds	r3, r6, #4
 80014f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014fa:	6838      	ldr	r0, [r7, #0]
 80014fc:	f004 fddc 	bl	80060b8 <USB_HostInit>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9
 8001508:	2300      	movs	r3, #0
 800150a:	4618      	mov	r0, r3
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001512 <HAL_HCD_HC_Init>:
 8001512:	b590      	push	{r4, r7, lr}
 8001514:	b089      	sub	sp, #36	; 0x24
 8001516:	af04      	add	r7, sp, #16
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	4608      	mov	r0, r1
 800151c:	4611      	mov	r1, r2
 800151e:	461a      	mov	r2, r3
 8001520:	4603      	mov	r3, r0
 8001522:	70fb      	strb	r3, [r7, #3]
 8001524:	460b      	mov	r3, r1
 8001526:	70bb      	strb	r3, [r7, #2]
 8001528:	4613      	mov	r3, r2
 800152a:	707b      	strb	r3, [r7, #1]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001532:	2b01      	cmp	r3, #1
 8001534:	d101      	bne.n	800153a <HAL_HCD_HC_Init+0x28>
 8001536:	2302      	movs	r3, #2
 8001538:	e07f      	b.n	800163a <HAL_HCD_HC_Init+0x128>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 8001542:	78fa      	ldrb	r2, [r7, #3]
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	440b      	add	r3, r1
 8001550:	333d      	adds	r3, #61	; 0x3d
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
 8001556:	78fa      	ldrb	r2, [r7, #3]
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	440b      	add	r3, r1
 8001564:	3338      	adds	r3, #56	; 0x38
 8001566:	787a      	ldrb	r2, [r7, #1]
 8001568:	701a      	strb	r2, [r3, #0]
 800156a:	78fa      	ldrb	r2, [r7, #3]
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	440b      	add	r3, r1
 8001578:	3340      	adds	r3, #64	; 0x40
 800157a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800157c:	801a      	strh	r2, [r3, #0]
 800157e:	78fa      	ldrb	r2, [r7, #3]
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	440b      	add	r3, r1
 800158c:	3339      	adds	r3, #57	; 0x39
 800158e:	78fa      	ldrb	r2, [r7, #3]
 8001590:	701a      	strb	r2, [r3, #0]
 8001592:	78fa      	ldrb	r2, [r7, #3]
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	440b      	add	r3, r1
 80015a0:	333f      	adds	r3, #63	; 0x3f
 80015a2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015a6:	701a      	strb	r2, [r3, #0]
 80015a8:	78fa      	ldrb	r2, [r7, #3]
 80015aa:	78bb      	ldrb	r3, [r7, #2]
 80015ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015b0:	b2d8      	uxtb	r0, r3
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	440b      	add	r3, r1
 80015be:	333a      	adds	r3, #58	; 0x3a
 80015c0:	4602      	mov	r2, r0
 80015c2:	701a      	strb	r2, [r3, #0]
 80015c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	da0a      	bge.n	80015e2 <HAL_HCD_HC_Init+0xd0>
 80015cc:	78fa      	ldrb	r2, [r7, #3]
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	440b      	add	r3, r1
 80015da:	333b      	adds	r3, #59	; 0x3b
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]
 80015e0:	e009      	b.n	80015f6 <HAL_HCD_HC_Init+0xe4>
 80015e2:	78fa      	ldrb	r2, [r7, #3]
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	440b      	add	r3, r1
 80015f0:	333b      	adds	r3, #59	; 0x3b
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
 80015f6:	78fa      	ldrb	r2, [r7, #3]
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	440b      	add	r3, r1
 8001604:	333c      	adds	r3, #60	; 0x3c
 8001606:	f897 2020 	ldrb.w	r2, [r7, #32]
 800160a:	701a      	strb	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6818      	ldr	r0, [r3, #0]
 8001610:	787c      	ldrb	r4, [r7, #1]
 8001612:	78ba      	ldrb	r2, [r7, #2]
 8001614:	78f9      	ldrb	r1, [r7, #3]
 8001616:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001618:	9302      	str	r3, [sp, #8]
 800161a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800161e:	9301      	str	r3, [sp, #4]
 8001620:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	4623      	mov	r3, r4
 8001628:	f004 fec8 	bl	80063bc <USB_HC_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	73fb      	strb	r3, [r7, #15]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	4618      	mov	r0, r3
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	bd90      	pop	{r4, r7, pc}

08001642 <HAL_HCD_HC_Halt>:
 8001642:	b580      	push	{r7, lr}
 8001644:	b084      	sub	sp, #16
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	460b      	mov	r3, r1
 800164c:	70fb      	strb	r3, [r7, #3]
 800164e:	2300      	movs	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001658:	2b01      	cmp	r3, #1
 800165a:	d101      	bne.n	8001660 <HAL_HCD_HC_Halt+0x1e>
 800165c:	2302      	movs	r3, #2
 800165e:	e00f      	b.n	8001680 <HAL_HCD_HC_Halt+0x3e>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	78fa      	ldrb	r2, [r7, #3]
 800166e:	4611      	mov	r1, r2
 8001670:	4618      	mov	r0, r3
 8001672:	f005 f902 	bl	800687a <USB_HC_Halt>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <HAL_HCD_HC_SubmitRequest>:
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	4608      	mov	r0, r1
 8001692:	4611      	mov	r1, r2
 8001694:	461a      	mov	r2, r3
 8001696:	4603      	mov	r3, r0
 8001698:	70fb      	strb	r3, [r7, #3]
 800169a:	460b      	mov	r3, r1
 800169c:	70bb      	strb	r3, [r7, #2]
 800169e:	4613      	mov	r3, r2
 80016a0:	707b      	strb	r3, [r7, #1]
 80016a2:	78fa      	ldrb	r2, [r7, #3]
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	440b      	add	r3, r1
 80016b0:	333b      	adds	r3, #59	; 0x3b
 80016b2:	78ba      	ldrb	r2, [r7, #2]
 80016b4:	701a      	strb	r2, [r3, #0]
 80016b6:	78fa      	ldrb	r2, [r7, #3]
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	440b      	add	r3, r1
 80016c4:	333f      	adds	r3, #63	; 0x3f
 80016c6:	787a      	ldrb	r2, [r7, #1]
 80016c8:	701a      	strb	r2, [r3, #0]
 80016ca:	7c3b      	ldrb	r3, [r7, #16]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d10a      	bne.n	80016e6 <HAL_HCD_HC_SubmitRequest+0x5e>
 80016d0:	78fa      	ldrb	r2, [r7, #3]
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	440b      	add	r3, r1
 80016de:	3342      	adds	r3, #66	; 0x42
 80016e0:	2203      	movs	r2, #3
 80016e2:	701a      	strb	r2, [r3, #0]
 80016e4:	e009      	b.n	80016fa <HAL_HCD_HC_SubmitRequest+0x72>
 80016e6:	78fa      	ldrb	r2, [r7, #3]
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	440b      	add	r3, r1
 80016f4:	3342      	adds	r3, #66	; 0x42
 80016f6:	2202      	movs	r2, #2
 80016f8:	701a      	strb	r2, [r3, #0]
 80016fa:	787b      	ldrb	r3, [r7, #1]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	f200 80d6 	bhi.w	80018ae <HAL_HCD_HC_SubmitRequest+0x226>
 8001702:	a201      	add	r2, pc, #4	; (adr r2, 8001708 <HAL_HCD_HC_SubmitRequest+0x80>)
 8001704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001708:	08001719 	.word	0x08001719
 800170c:	08001899 	.word	0x08001899
 8001710:	08001785 	.word	0x08001785
 8001714:	0800180f 	.word	0x0800180f
 8001718:	7c3b      	ldrb	r3, [r7, #16]
 800171a:	2b01      	cmp	r3, #1
 800171c:	f040 80c9 	bne.w	80018b2 <HAL_HCD_HC_SubmitRequest+0x22a>
 8001720:	78bb      	ldrb	r3, [r7, #2]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f040 80c5 	bne.w	80018b2 <HAL_HCD_HC_SubmitRequest+0x22a>
 8001728:	8b3b      	ldrh	r3, [r7, #24]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d109      	bne.n	8001742 <HAL_HCD_HC_SubmitRequest+0xba>
 800172e:	78fa      	ldrb	r2, [r7, #3]
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	440b      	add	r3, r1
 800173c:	3351      	adds	r3, #81	; 0x51
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
 8001742:	78fa      	ldrb	r2, [r7, #3]
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	440b      	add	r3, r1
 8001750:	3351      	adds	r3, #81	; 0x51
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d10a      	bne.n	800176e <HAL_HCD_HC_SubmitRequest+0xe6>
 8001758:	78fa      	ldrb	r2, [r7, #3]
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	440b      	add	r3, r1
 8001766:	3342      	adds	r3, #66	; 0x42
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
 800176c:	e0a1      	b.n	80018b2 <HAL_HCD_HC_SubmitRequest+0x22a>
 800176e:	78fa      	ldrb	r2, [r7, #3]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	440b      	add	r3, r1
 800177c:	3342      	adds	r3, #66	; 0x42
 800177e:	2202      	movs	r2, #2
 8001780:	701a      	strb	r2, [r3, #0]
 8001782:	e096      	b.n	80018b2 <HAL_HCD_HC_SubmitRequest+0x22a>
 8001784:	78bb      	ldrb	r3, [r7, #2]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d120      	bne.n	80017cc <HAL_HCD_HC_SubmitRequest+0x144>
 800178a:	78fa      	ldrb	r2, [r7, #3]
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	440b      	add	r3, r1
 8001798:	3351      	adds	r3, #81	; 0x51
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10a      	bne.n	80017b6 <HAL_HCD_HC_SubmitRequest+0x12e>
 80017a0:	78fa      	ldrb	r2, [r7, #3]
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	440b      	add	r3, r1
 80017ae:	3342      	adds	r3, #66	; 0x42
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
 80017b4:	e07e      	b.n	80018b4 <HAL_HCD_HC_SubmitRequest+0x22c>
 80017b6:	78fa      	ldrb	r2, [r7, #3]
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	440b      	add	r3, r1
 80017c4:	3342      	adds	r3, #66	; 0x42
 80017c6:	2202      	movs	r2, #2
 80017c8:	701a      	strb	r2, [r3, #0]
 80017ca:	e073      	b.n	80018b4 <HAL_HCD_HC_SubmitRequest+0x22c>
 80017cc:	78fa      	ldrb	r2, [r7, #3]
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	440b      	add	r3, r1
 80017da:	3350      	adds	r3, #80	; 0x50
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10a      	bne.n	80017f8 <HAL_HCD_HC_SubmitRequest+0x170>
 80017e2:	78fa      	ldrb	r2, [r7, #3]
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	440b      	add	r3, r1
 80017f0:	3342      	adds	r3, #66	; 0x42
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
 80017f6:	e05d      	b.n	80018b4 <HAL_HCD_HC_SubmitRequest+0x22c>
 80017f8:	78fa      	ldrb	r2, [r7, #3]
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	440b      	add	r3, r1
 8001806:	3342      	adds	r3, #66	; 0x42
 8001808:	2202      	movs	r2, #2
 800180a:	701a      	strb	r2, [r3, #0]
 800180c:	e052      	b.n	80018b4 <HAL_HCD_HC_SubmitRequest+0x22c>
 800180e:	78bb      	ldrb	r3, [r7, #2]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d120      	bne.n	8001856 <HAL_HCD_HC_SubmitRequest+0x1ce>
 8001814:	78fa      	ldrb	r2, [r7, #3]
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	440b      	add	r3, r1
 8001822:	3351      	adds	r3, #81	; 0x51
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10a      	bne.n	8001840 <HAL_HCD_HC_SubmitRequest+0x1b8>
 800182a:	78fa      	ldrb	r2, [r7, #3]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	440b      	add	r3, r1
 8001838:	3342      	adds	r3, #66	; 0x42
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
 800183e:	e039      	b.n	80018b4 <HAL_HCD_HC_SubmitRequest+0x22c>
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	440b      	add	r3, r1
 800184e:	3342      	adds	r3, #66	; 0x42
 8001850:	2202      	movs	r2, #2
 8001852:	701a      	strb	r2, [r3, #0]
 8001854:	e02e      	b.n	80018b4 <HAL_HCD_HC_SubmitRequest+0x22c>
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	440b      	add	r3, r1
 8001864:	3350      	adds	r3, #80	; 0x50
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10a      	bne.n	8001882 <HAL_HCD_HC_SubmitRequest+0x1fa>
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	440b      	add	r3, r1
 800187a:	3342      	adds	r3, #66	; 0x42
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
 8001880:	e018      	b.n	80018b4 <HAL_HCD_HC_SubmitRequest+0x22c>
 8001882:	78fa      	ldrb	r2, [r7, #3]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	440b      	add	r3, r1
 8001890:	3342      	adds	r3, #66	; 0x42
 8001892:	2202      	movs	r2, #2
 8001894:	701a      	strb	r2, [r3, #0]
 8001896:	e00d      	b.n	80018b4 <HAL_HCD_HC_SubmitRequest+0x22c>
 8001898:	78fa      	ldrb	r2, [r7, #3]
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	440b      	add	r3, r1
 80018a6:	3342      	adds	r3, #66	; 0x42
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
 80018ac:	e002      	b.n	80018b4 <HAL_HCD_HC_SubmitRequest+0x22c>
 80018ae:	bf00      	nop
 80018b0:	e000      	b.n	80018b4 <HAL_HCD_HC_SubmitRequest+0x22c>
 80018b2:	bf00      	nop
 80018b4:	78fa      	ldrb	r2, [r7, #3]
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	440b      	add	r3, r1
 80018c2:	3344      	adds	r3, #68	; 0x44
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	8b39      	ldrh	r1, [r7, #24]
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	4403      	add	r3, r0
 80018d8:	3348      	adds	r3, #72	; 0x48
 80018da:	6019      	str	r1, [r3, #0]
 80018dc:	78fa      	ldrb	r2, [r7, #3]
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	440b      	add	r3, r1
 80018ea:	335c      	adds	r3, #92	; 0x5c
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
 80018f0:	78fa      	ldrb	r2, [r7, #3]
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	440b      	add	r3, r1
 80018fe:	334c      	adds	r3, #76	; 0x4c
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	78fa      	ldrb	r2, [r7, #3]
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	440b      	add	r3, r1
 8001912:	3339      	adds	r3, #57	; 0x39
 8001914:	78fa      	ldrb	r2, [r7, #3]
 8001916:	701a      	strb	r2, [r3, #0]
 8001918:	78fa      	ldrb	r2, [r7, #3]
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	440b      	add	r3, r1
 8001926:	335d      	adds	r3, #93	; 0x5d
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6818      	ldr	r0, [r3, #0]
 8001930:	78fa      	ldrb	r2, [r7, #3]
 8001932:	4613      	mov	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	3338      	adds	r3, #56	; 0x38
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	18d1      	adds	r1, r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	461a      	mov	r2, r3
 8001948:	f004 fe42 	bl	80065d0 <USB_HC_StartXfer>
 800194c:	4603      	mov	r3, r0
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop

08001958 <HAL_HCD_IRQHandler>:
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f004 fb5f 	bl	8006032 <USB_GetMode>
 8001974:	4603      	mov	r3, r0
 8001976:	2b01      	cmp	r3, #1
 8001978:	f040 80f1 	bne.w	8001b5e <HAL_HCD_IRQHandler+0x206>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f004 fb43 	bl	800600c <USB_ReadInterrupts>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80e7 	beq.w	8001b5c <HAL_HCD_IRQHandler+0x204>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f004 fb3a 	bl	800600c <USB_ReadInterrupts>
 8001998:	4603      	mov	r3, r0
 800199a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019a2:	d104      	bne.n	80019ae <HAL_HCD_IRQHandler+0x56>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019ac:	615a      	str	r2, [r3, #20]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f004 fb2a 	bl	800600c <USB_ReadInterrupts>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019c2:	d104      	bne.n	80019ce <HAL_HCD_IRQHandler+0x76>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019cc:	615a      	str	r2, [r3, #20]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f004 fb1a 	bl	800600c <USB_ReadInterrupts>
 80019d8:	4603      	mov	r3, r0
 80019da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80019e2:	d104      	bne.n	80019ee <HAL_HCD_IRQHandler+0x96>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019ec:	615a      	str	r2, [r3, #20]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f004 fb0a 	bl	800600c <USB_ReadInterrupts>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d103      	bne.n	8001a0a <HAL_HCD_IRQHandler+0xb2>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2202      	movs	r2, #2
 8001a08:	615a      	str	r2, [r3, #20]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f004 fafc 	bl	800600c <USB_ReadInterrupts>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a1e:	d117      	bne.n	8001a50 <HAL_HCD_IRQHandler+0xf8>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001a2e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f007 fded 	bl	8009614 <HAL_HCD_Disconnect_Callback>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2101      	movs	r1, #1
 8001a40:	4618      	mov	r0, r3
 8001a42:	f004 fbf5 	bl	8006230 <USB_InitFSLSPClkSel>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a4e:	615a      	str	r2, [r3, #20]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f004 fad9 	bl	800600c <USB_ReadInterrupts>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a64:	d102      	bne.n	8001a6c <HAL_HCD_IRQHandler+0x114>
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f001 f8c8 	bl	8002bfc <HCD_Port_IRQHandler>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f004 facb 	bl	800600c <USB_ReadInterrupts>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d106      	bne.n	8001a8e <HAL_HCD_IRQHandler+0x136>
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f007 fdab 	bl	80095dc <HAL_HCD_SOF_Callback>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2208      	movs	r2, #8
 8001a8c:	615a      	str	r2, [r3, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f004 faba 	bl	800600c <USB_ReadInterrupts>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001aa2:	d138      	bne.n	8001b16 <HAL_HCD_IRQHandler+0x1be>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f004 fed5 	bl	8006858 <USB_HC_ReadInterrupt>
 8001aae:	60b8      	str	r0, [r7, #8]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	e025      	b.n	8001b02 <HAL_HCD_IRQHandler+0x1aa>
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f003 030f 	and.w	r3, r3, #15
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d018      	beq.n	8001afc <HAL_HCD_IRQHandler+0x1a4>
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	015a      	lsls	r2, r3, #5
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001adc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ae0:	d106      	bne.n	8001af0 <HAL_HCD_IRQHandler+0x198>
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 f8cf 	bl	8001c8c <HCD_HC_IN_IRQHandler>
 8001aee:	e005      	b.n	8001afc <HAL_HCD_IRQHandler+0x1a4>
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	4619      	mov	r1, r3
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 fc5f 	bl	80023ba <HCD_HC_OUT_IRQHandler>
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	3301      	adds	r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d3d4      	bcc.n	8001ab6 <HAL_HCD_IRQHandler+0x15e>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b14:	615a      	str	r2, [r3, #20]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f004 fa76 	bl	800600c <USB_ReadInterrupts>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f003 0310 	and.w	r3, r3, #16
 8001b26:	2b10      	cmp	r3, #16
 8001b28:	d101      	bne.n	8001b2e <HAL_HCD_IRQHandler+0x1d6>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <HAL_HCD_IRQHandler+0x1d8>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d014      	beq.n	8001b5e <HAL_HCD_IRQHandler+0x206>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699a      	ldr	r2, [r3, #24]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0210 	bic.w	r2, r2, #16
 8001b42:	619a      	str	r2, [r3, #24]
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 ffad 	bl	8002aa4 <HCD_RXQLVL_IRQHandler>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	699a      	ldr	r2, [r3, #24]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f042 0210 	orr.w	r2, r2, #16
 8001b58:	619a      	str	r2, [r3, #24]
 8001b5a:	e000      	b.n	8001b5e <HAL_HCD_IRQHandler+0x206>
 8001b5c:	bf00      	nop
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_HCD_Start>:
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_HCD_Start+0x16>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e013      	b.n	8001ba2 <HAL_HCD_Start+0x3e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f004 f94d 	bl	8005e26 <USB_EnableGlobalInt>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2101      	movs	r1, #1
 8001b92:	4618      	mov	r0, r3
 8001b94:	f004 fbb0 	bl	80062f8 <USB_DriveVbus>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_HCD_Stop>:
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_HCD_Stop+0x16>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e00d      	b.n	8001bdc <HAL_HCD_Stop+0x32>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f004 ff8f 	bl	8006af0 <USB_StopHost>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 8001bda:	2300      	movs	r3, #0
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_HCD_ResetPort>:
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f004 fb57 	bl	80062a4 <USB_ResetPort>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_HCD_HC_GetURBState>:
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	70fb      	strb	r3, [r7, #3]
 8001c0c:	78fa      	ldrb	r2, [r7, #3]
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	440b      	add	r3, r1
 8001c1a:	335c      	adds	r3, #92	; 0x5c
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <HAL_HCD_HC_GetXferCount>:
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	460b      	mov	r3, r1
 8001c34:	70fb      	strb	r3, [r7, #3]
 8001c36:	78fa      	ldrb	r2, [r7, #3]
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	440b      	add	r3, r1
 8001c44:	334c      	adds	r3, #76	; 0x4c
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <HAL_HCD_GetCurrentFrame>:
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f004 fb99 	bl	8006398 <USB_GetCurrentFrame>
 8001c66:	4603      	mov	r3, r0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_HCD_GetCurrentSpeed>:
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f004 fb74 	bl	800636a <USB_GetHostSpeed>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HCD_HC_IN_IRQHandler>:
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	70fb      	strb	r3, [r7, #3]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	015a      	lsls	r2, r3, #5
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d119      	bne.n	8001cf0 <HCD_HC_IN_IRQHandler+0x64>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	015a      	lsls	r2, r3, #5
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc8:	461a      	mov	r2, r3
 8001cca:	2304      	movs	r3, #4
 8001ccc:	6093      	str	r3, [r2, #8]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	015a      	lsls	r2, r3, #5
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	0151      	lsls	r1, r2, #5
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	440a      	add	r2, r1
 8001ce4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	60d3      	str	r3, [r2, #12]
 8001cee:	e095      	b.n	8001e1c <HCD_HC_IN_IRQHandler+0x190>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	015a      	lsls	r2, r3, #5
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 0320 	and.w	r3, r3, #32
 8001d02:	2b20      	cmp	r3, #32
 8001d04:	d109      	bne.n	8001d1a <HCD_HC_IN_IRQHandler+0x8e>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	015a      	lsls	r2, r3, #5
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d12:	461a      	mov	r2, r3
 8001d14:	2320      	movs	r3, #32
 8001d16:	6093      	str	r3, [r2, #8]
 8001d18:	e080      	b.n	8001e1c <HCD_HC_IN_IRQHandler+0x190>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	015a      	lsls	r2, r3, #5
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4413      	add	r3, r2
 8001d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d134      	bne.n	8001d9a <HCD_HC_IN_IRQHandler+0x10e>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	015a      	lsls	r2, r3, #5
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4413      	add	r3, r2
 8001d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	0151      	lsls	r1, r2, #5
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	440a      	add	r2, r1
 8001d46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d4a:	f043 0302 	orr.w	r3, r3, #2
 8001d4e:	60d3      	str	r3, [r2, #12]
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	440b      	add	r3, r1
 8001d5e:	335d      	adds	r3, #93	; 0x5d
 8001d60:	2205      	movs	r2, #5
 8001d62:	701a      	strb	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	015a      	lsls	r2, r3, #5
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d70:	461a      	mov	r2, r3
 8001d72:	2310      	movs	r3, #16
 8001d74:	6093      	str	r3, [r2, #8]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	015a      	lsls	r2, r3, #5
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d82:	461a      	mov	r2, r3
 8001d84:	2308      	movs	r3, #8
 8001d86:	6093      	str	r3, [r2, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	4611      	mov	r1, r2
 8001d92:	4618      	mov	r0, r3
 8001d94:	f004 fd71 	bl	800687a <USB_HC_Halt>
 8001d98:	e040      	b.n	8001e1c <HCD_HC_IN_IRQHandler+0x190>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	015a      	lsls	r2, r3, #5
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db0:	d134      	bne.n	8001e1c <HCD_HC_IN_IRQHandler+0x190>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	0151      	lsls	r1, r2, #5
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	440a      	add	r2, r1
 8001dc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dcc:	f043 0302 	orr.w	r3, r3, #2
 8001dd0:	60d3      	str	r3, [r2, #12]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f004 fd4c 	bl	800687a <USB_HC_Halt>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dee:	461a      	mov	r2, r3
 8001df0:	2310      	movs	r3, #16
 8001df2:	6093      	str	r3, [r2, #8]
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	440b      	add	r3, r1
 8001e02:	335d      	adds	r3, #93	; 0x5d
 8001e04:	2208      	movs	r2, #8
 8001e06:	701a      	strb	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	015a      	lsls	r2, r3, #5
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e14:	461a      	mov	r2, r3
 8001e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e1a:	6093      	str	r3, [r2, #8]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	015a      	lsls	r2, r3, #5
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4413      	add	r3, r2
 8001e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e32:	d122      	bne.n	8001e7a <HCD_HC_IN_IRQHandler+0x1ee>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	015a      	lsls	r2, r3, #5
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	0151      	lsls	r1, r2, #5
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	440a      	add	r2, r1
 8001e4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e4e:	f043 0302 	orr.w	r3, r3, #2
 8001e52:	60d3      	str	r3, [r2, #12]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f004 fd0b 	bl	800687a <USB_HC_Halt>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	015a      	lsls	r2, r3, #5
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e70:	461a      	mov	r2, r3
 8001e72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e76:	6093      	str	r3, [r2, #8]
 8001e78:	e29b      	b.n	80023b2 <HCD_HC_IN_IRQHandler+0x726>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	015a      	lsls	r2, r3, #5
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	f040 80c1 	bne.w	8002014 <HCD_HC_IN_IRQHandler+0x388>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d01b      	beq.n	8001ed2 <HCD_HC_IN_IRQHandler+0x246>
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	440b      	add	r3, r1
 8001ea8:	3348      	adds	r3, #72	; 0x48
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	0159      	lsls	r1, r3, #5
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ebe:	1ad1      	subs	r1, r2, r3
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4403      	add	r3, r0
 8001ece:	334c      	adds	r3, #76	; 0x4c
 8001ed0:	6019      	str	r1, [r3, #0]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	440b      	add	r3, r1
 8001ee0:	335d      	adds	r3, #93	; 0x5d
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	701a      	strb	r2, [r3, #0]
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	440b      	add	r3, r1
 8001ef4:	3358      	adds	r3, #88	; 0x58
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f06:	461a      	mov	r2, r3
 8001f08:	2301      	movs	r3, #1
 8001f0a:	6093      	str	r3, [r2, #8]
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	440b      	add	r3, r1
 8001f1a:	333f      	adds	r3, #63	; 0x3f
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00a      	beq.n	8001f38 <HCD_HC_IN_IRQHandler+0x2ac>
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	440b      	add	r3, r1
 8001f30:	333f      	adds	r3, #63	; 0x3f
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d121      	bne.n	8001f7c <HCD_HC_IN_IRQHandler+0x2f0>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	0151      	lsls	r1, r2, #5
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	440a      	add	r2, r1
 8001f4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f52:	f043 0302 	orr.w	r3, r3, #2
 8001f56:	60d3      	str	r3, [r2, #12]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	4611      	mov	r1, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f004 fc89 	bl	800687a <USB_HC_Halt>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f74:	461a      	mov	r2, r3
 8001f76:	2310      	movs	r3, #16
 8001f78:	6093      	str	r3, [r2, #8]
 8001f7a:	e034      	b.n	8001fe6 <HCD_HC_IN_IRQHandler+0x35a>
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	440b      	add	r3, r1
 8001f8a:	333f      	adds	r3, #63	; 0x3f
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d129      	bne.n	8001fe6 <HCD_HC_IN_IRQHandler+0x35a>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	0151      	lsls	r1, r2, #5
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	440a      	add	r2, r1
 8001fa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	440b      	add	r3, r1
 8001fc0:	335c      	adds	r3, #92	; 0x5c
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	701a      	strb	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	b2d8      	uxtb	r0, r3
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	440b      	add	r3, r1
 8001fd8:	335c      	adds	r3, #92	; 0x5c
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4601      	mov	r1, r0
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f007 fb25 	bl	8009630 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	440b      	add	r3, r1
 8001ff4:	3350      	adds	r3, #80	; 0x50
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	f083 0301 	eor.w	r3, r3, #1
 8001ffc:	b2d8      	uxtb	r0, r3
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	440b      	add	r3, r1
 800200c:	3350      	adds	r3, #80	; 0x50
 800200e:	4602      	mov	r2, r0
 8002010:	701a      	strb	r2, [r3, #0]
 8002012:	e1ce      	b.n	80023b2 <HCD_HC_IN_IRQHandler+0x726>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	015a      	lsls	r2, r3, #5
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4413      	add	r3, r2
 800201c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b02      	cmp	r3, #2
 8002028:	f040 80f1 	bne.w	800220e <HCD_HC_IN_IRQHandler+0x582>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	015a      	lsls	r2, r3, #5
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4413      	add	r3, r2
 8002034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	0151      	lsls	r1, r2, #5
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	440a      	add	r2, r1
 8002042:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002046:	f023 0302 	bic.w	r3, r3, #2
 800204a:	60d3      	str	r3, [r2, #12]
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	440b      	add	r3, r1
 800205a:	335d      	adds	r3, #93	; 0x5d
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d10a      	bne.n	8002078 <HCD_HC_IN_IRQHandler+0x3ec>
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	440b      	add	r3, r1
 8002070:	335c      	adds	r3, #92	; 0x5c
 8002072:	2201      	movs	r2, #1
 8002074:	701a      	strb	r2, [r3, #0]
 8002076:	e0b0      	b.n	80021da <HCD_HC_IN_IRQHandler+0x54e>
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	440b      	add	r3, r1
 8002086:	335d      	adds	r3, #93	; 0x5d
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b05      	cmp	r3, #5
 800208c:	d10a      	bne.n	80020a4 <HCD_HC_IN_IRQHandler+0x418>
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	440b      	add	r3, r1
 800209c:	335c      	adds	r3, #92	; 0x5c
 800209e:	2205      	movs	r2, #5
 80020a0:	701a      	strb	r2, [r3, #0]
 80020a2:	e09a      	b.n	80021da <HCD_HC_IN_IRQHandler+0x54e>
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	440b      	add	r3, r1
 80020b2:	335d      	adds	r3, #93	; 0x5d
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d00a      	beq.n	80020d0 <HCD_HC_IN_IRQHandler+0x444>
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	440b      	add	r3, r1
 80020c8:	335d      	adds	r3, #93	; 0x5d
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d156      	bne.n	800217e <HCD_HC_IN_IRQHandler+0x4f2>
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	440b      	add	r3, r1
 80020de:	3358      	adds	r3, #88	; 0x58
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	1c59      	adds	r1, r3, #1
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4403      	add	r3, r0
 80020f2:	3358      	adds	r3, #88	; 0x58
 80020f4:	6019      	str	r1, [r3, #0]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	440b      	add	r3, r1
 8002104:	3358      	adds	r3, #88	; 0x58
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b03      	cmp	r3, #3
 800210a:	d914      	bls.n	8002136 <HCD_HC_IN_IRQHandler+0x4aa>
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	440b      	add	r3, r1
 800211a:	3358      	adds	r3, #88	; 0x58
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	440b      	add	r3, r1
 800212e:	335c      	adds	r3, #92	; 0x5c
 8002130:	2204      	movs	r2, #4
 8002132:	701a      	strb	r2, [r3, #0]
 8002134:	e009      	b.n	800214a <HCD_HC_IN_IRQHandler+0x4be>
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	440b      	add	r3, r1
 8002144:	335c      	adds	r3, #92	; 0x5c
 8002146:	2202      	movs	r2, #2
 8002148:	701a      	strb	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4413      	add	r3, r2
 8002152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	015a      	lsls	r2, r3, #5
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4413      	add	r3, r2
 8002172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002176:	461a      	mov	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	e02d      	b.n	80021da <HCD_HC_IN_IRQHandler+0x54e>
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	440b      	add	r3, r1
 800218c:	335d      	adds	r3, #93	; 0x5d
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b03      	cmp	r3, #3
 8002192:	d122      	bne.n	80021da <HCD_HC_IN_IRQHandler+0x54e>
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	440b      	add	r3, r1
 80021a2:	335c      	adds	r3, #92	; 0x5c
 80021a4:	2202      	movs	r2, #2
 80021a6:	701a      	strb	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	015a      	lsls	r2, r3, #5
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d4:	461a      	mov	r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e6:	461a      	mov	r2, r3
 80021e8:	2302      	movs	r3, #2
 80021ea:	6093      	str	r3, [r2, #8]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	b2d8      	uxtb	r0, r3
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	440b      	add	r3, r1
 80021fe:	335c      	adds	r3, #92	; 0x5c
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	4601      	mov	r1, r0
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f007 fa12 	bl	8009630 <HAL_HCD_HC_NotifyURBChange_Callback>
 800220c:	e0d1      	b.n	80023b2 <HCD_HC_IN_IRQHandler+0x726>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4413      	add	r3, r2
 8002216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002220:	2b80      	cmp	r3, #128	; 0x80
 8002222:	d13e      	bne.n	80022a2 <HCD_HC_IN_IRQHandler+0x616>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	015a      	lsls	r2, r3, #5
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4413      	add	r3, r2
 800222c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	0151      	lsls	r1, r2, #5
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	440a      	add	r2, r1
 800223a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800223e:	f043 0302 	orr.w	r3, r3, #2
 8002242:	60d3      	str	r3, [r2, #12]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	440b      	add	r3, r1
 8002252:	3358      	adds	r3, #88	; 0x58
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	1c59      	adds	r1, r3, #1
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4403      	add	r3, r0
 8002266:	3358      	adds	r3, #88	; 0x58
 8002268:	6019      	str	r1, [r3, #0]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	440b      	add	r3, r1
 8002278:	335d      	adds	r3, #93	; 0x5d
 800227a:	2206      	movs	r2, #6
 800227c:	701a      	strb	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f004 faf6 	bl	800687a <USB_HC_Halt>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4413      	add	r3, r2
 8002296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229a:	461a      	mov	r2, r3
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	6093      	str	r3, [r2, #8]
 80022a0:	e087      	b.n	80023b2 <HCD_HC_IN_IRQHandler+0x726>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	015a      	lsls	r2, r3, #5
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 0310 	and.w	r3, r3, #16
 80022b4:	2b10      	cmp	r3, #16
 80022b6:	d17c      	bne.n	80023b2 <HCD_HC_IN_IRQHandler+0x726>
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	440b      	add	r3, r1
 80022c6:	333f      	adds	r3, #63	; 0x3f
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d122      	bne.n	8002314 <HCD_HC_IN_IRQHandler+0x688>
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	440b      	add	r3, r1
 80022dc:	3358      	adds	r3, #88	; 0x58
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	0151      	lsls	r1, r2, #5
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	440a      	add	r2, r1
 80022f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	60d3      	str	r3, [r2, #12]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	4611      	mov	r1, r2
 800230c:	4618      	mov	r0, r3
 800230e:	f004 fab4 	bl	800687a <USB_HC_Halt>
 8002312:	e045      	b.n	80023a0 <HCD_HC_IN_IRQHandler+0x714>
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	440b      	add	r3, r1
 8002322:	333f      	adds	r3, #63	; 0x3f
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00a      	beq.n	8002340 <HCD_HC_IN_IRQHandler+0x6b4>
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	440b      	add	r3, r1
 8002338:	333f      	adds	r3, #63	; 0x3f
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b02      	cmp	r3, #2
 800233e:	d12f      	bne.n	80023a0 <HCD_HC_IN_IRQHandler+0x714>
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	440b      	add	r3, r1
 800234e:	3358      	adds	r3, #88	; 0x58
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d121      	bne.n	80023a0 <HCD_HC_IN_IRQHandler+0x714>
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	440b      	add	r3, r1
 800236a:	335d      	adds	r3, #93	; 0x5d
 800236c:	2203      	movs	r2, #3
 800236e:	701a      	strb	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	015a      	lsls	r2, r3, #5
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4413      	add	r3, r2
 8002378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	0151      	lsls	r1, r2, #5
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	440a      	add	r2, r1
 8002386:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800238a:	f043 0302 	orr.w	r3, r3, #2
 800238e:	60d3      	str	r3, [r2, #12]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	4611      	mov	r1, r2
 800239a:	4618      	mov	r0, r3
 800239c:	f004 fa6d 	bl	800687a <USB_HC_Halt>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ac:	461a      	mov	r2, r3
 80023ae:	2310      	movs	r3, #16
 80023b0:	6093      	str	r3, [r2, #8]
 80023b2:	bf00      	nop
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HCD_HC_OUT_IRQHandler>:
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b086      	sub	sp, #24
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	460b      	mov	r3, r1
 80023c4:	70fb      	strb	r3, [r7, #3]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	78fb      	ldrb	r3, [r7, #3]
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d119      	bne.n	800241e <HCD_HC_OUT_IRQHandler+0x64>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	015a      	lsls	r2, r3, #5
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f6:	461a      	mov	r2, r3
 80023f8:	2304      	movs	r3, #4
 80023fa:	6093      	str	r3, [r2, #8]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4413      	add	r3, r2
 8002404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	0151      	lsls	r1, r2, #5
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	440a      	add	r2, r1
 8002412:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002416:	f043 0302 	orr.w	r3, r3, #2
 800241a:	60d3      	str	r3, [r2, #12]
 800241c:	e33e      	b.n	8002a9c <HCD_HC_OUT_IRQHandler+0x6e2>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	015a      	lsls	r2, r3, #5
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4413      	add	r3, r2
 8002426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 0320 	and.w	r3, r3, #32
 8002430:	2b20      	cmp	r3, #32
 8002432:	d141      	bne.n	80024b8 <HCD_HC_OUT_IRQHandler+0xfe>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	015a      	lsls	r2, r3, #5
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4413      	add	r3, r2
 800243c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002440:	461a      	mov	r2, r3
 8002442:	2320      	movs	r3, #32
 8002444:	6093      	str	r3, [r2, #8]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	440b      	add	r3, r1
 8002454:	333d      	adds	r3, #61	; 0x3d
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b01      	cmp	r3, #1
 800245a:	f040 831f 	bne.w	8002a9c <HCD_HC_OUT_IRQHandler+0x6e2>
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	440b      	add	r3, r1
 800246c:	333d      	adds	r3, #61	; 0x3d
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	440b      	add	r3, r1
 8002480:	335c      	adds	r3, #92	; 0x5c
 8002482:	2202      	movs	r2, #2
 8002484:	701a      	strb	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	015a      	lsls	r2, r3, #5
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4413      	add	r3, r2
 800248e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	0151      	lsls	r1, r2, #5
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	440a      	add	r2, r1
 800249c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024a0:	f043 0302 	orr.w	r3, r3, #2
 80024a4:	60d3      	str	r3, [r2, #12]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	4611      	mov	r1, r2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f004 f9e2 	bl	800687a <USB_HC_Halt>
 80024b6:	e2f1      	b.n	8002a9c <HCD_HC_OUT_IRQHandler+0x6e2>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ca:	2b40      	cmp	r3, #64	; 0x40
 80024cc:	d13f      	bne.n	800254e <HCD_HC_OUT_IRQHandler+0x194>
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	440b      	add	r3, r1
 80024dc:	335d      	adds	r3, #93	; 0x5d
 80024de:	2204      	movs	r2, #4
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	440b      	add	r3, r1
 80024f0:	333d      	adds	r3, #61	; 0x3d
 80024f2:	2201      	movs	r2, #1
 80024f4:	701a      	strb	r2, [r3, #0]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	440b      	add	r3, r1
 8002504:	3358      	adds	r3, #88	; 0x58
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	015a      	lsls	r2, r3, #5
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4413      	add	r3, r2
 8002512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	0151      	lsls	r1, r2, #5
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	440a      	add	r2, r1
 8002520:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	60d3      	str	r3, [r2, #12]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	4611      	mov	r1, r2
 8002534:	4618      	mov	r0, r3
 8002536:	f004 f9a0 	bl	800687a <USB_HC_Halt>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4413      	add	r3, r2
 8002542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002546:	461a      	mov	r2, r3
 8002548:	2340      	movs	r3, #64	; 0x40
 800254a:	6093      	str	r3, [r2, #8]
 800254c:	e2a6      	b.n	8002a9c <HCD_HC_OUT_IRQHandler+0x6e2>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	015a      	lsls	r2, r3, #5
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4413      	add	r3, r2
 8002556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002564:	d122      	bne.n	80025ac <HCD_HC_OUT_IRQHandler+0x1f2>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4413      	add	r3, r2
 800256e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	0151      	lsls	r1, r2, #5
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	440a      	add	r2, r1
 800257c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002580:	f043 0302 	orr.w	r3, r3, #2
 8002584:	60d3      	str	r3, [r2, #12]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	4611      	mov	r1, r2
 8002590:	4618      	mov	r0, r3
 8002592:	f004 f972 	bl	800687a <USB_HC_Halt>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4413      	add	r3, r2
 800259e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a2:	461a      	mov	r2, r3
 80025a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025a8:	6093      	str	r3, [r2, #8]
 80025aa:	e277      	b.n	8002a9c <HCD_HC_OUT_IRQHandler+0x6e2>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d135      	bne.n	800262e <HCD_HC_OUT_IRQHandler+0x274>
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	440b      	add	r3, r1
 80025d0:	3358      	adds	r3, #88	; 0x58
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	015a      	lsls	r2, r3, #5
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4413      	add	r3, r2
 80025de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	0151      	lsls	r1, r2, #5
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	440a      	add	r2, r1
 80025ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025f0:	f043 0302 	orr.w	r3, r3, #2
 80025f4:	60d3      	str	r3, [r2, #12]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	4611      	mov	r1, r2
 8002600:	4618      	mov	r0, r3
 8002602:	f004 f93a 	bl	800687a <USB_HC_Halt>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002612:	461a      	mov	r2, r3
 8002614:	2301      	movs	r3, #1
 8002616:	6093      	str	r3, [r2, #8]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	440b      	add	r3, r1
 8002626:	335d      	adds	r3, #93	; 0x5d
 8002628:	2201      	movs	r2, #1
 800262a:	701a      	strb	r2, [r3, #0]
 800262c:	e236      	b.n	8002a9c <HCD_HC_OUT_IRQHandler+0x6e2>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4413      	add	r3, r2
 8002636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b08      	cmp	r3, #8
 8002642:	d12b      	bne.n	800269c <HCD_HC_OUT_IRQHandler+0x2e2>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4413      	add	r3, r2
 800264c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002650:	461a      	mov	r2, r3
 8002652:	2308      	movs	r3, #8
 8002654:	6093      	str	r3, [r2, #8]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	015a      	lsls	r2, r3, #5
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4413      	add	r3, r2
 800265e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	0151      	lsls	r1, r2, #5
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	440a      	add	r2, r1
 800266c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002670:	f043 0302 	orr.w	r3, r3, #2
 8002674:	60d3      	str	r3, [r2, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	4611      	mov	r1, r2
 8002680:	4618      	mov	r0, r3
 8002682:	f004 f8fa 	bl	800687a <USB_HC_Halt>
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	440b      	add	r3, r1
 8002694:	335d      	adds	r3, #93	; 0x5d
 8002696:	2205      	movs	r2, #5
 8002698:	701a      	strb	r2, [r3, #0]
 800269a:	e1ff      	b.n	8002a9c <HCD_HC_OUT_IRQHandler+0x6e2>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b10      	cmp	r3, #16
 80026b0:	d155      	bne.n	800275e <HCD_HC_OUT_IRQHandler+0x3a4>
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	4613      	mov	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	440b      	add	r3, r1
 80026c0:	3358      	adds	r3, #88	; 0x58
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	440b      	add	r3, r1
 80026d4:	335d      	adds	r3, #93	; 0x5d
 80026d6:	2203      	movs	r2, #3
 80026d8:	701a      	strb	r2, [r3, #0]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	440b      	add	r3, r1
 80026e8:	333d      	adds	r3, #61	; 0x3d
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d114      	bne.n	800271a <HCD_HC_OUT_IRQHandler+0x360>
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	440b      	add	r3, r1
 80026fe:	333c      	adds	r3, #60	; 0x3c
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d109      	bne.n	800271a <HCD_HC_OUT_IRQHandler+0x360>
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	440b      	add	r3, r1
 8002714:	333d      	adds	r3, #61	; 0x3d
 8002716:	2201      	movs	r2, #1
 8002718:	701a      	strb	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	015a      	lsls	r2, r3, #5
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4413      	add	r3, r2
 8002722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	0151      	lsls	r1, r2, #5
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	440a      	add	r2, r1
 8002730:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002734:	f043 0302 	orr.w	r3, r3, #2
 8002738:	60d3      	str	r3, [r2, #12]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	4611      	mov	r1, r2
 8002744:	4618      	mov	r0, r3
 8002746:	f004 f898 	bl	800687a <USB_HC_Halt>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4413      	add	r3, r2
 8002752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002756:	461a      	mov	r2, r3
 8002758:	2310      	movs	r3, #16
 800275a:	6093      	str	r3, [r2, #8]
 800275c:	e19e      	b.n	8002a9c <HCD_HC_OUT_IRQHandler+0x6e2>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4413      	add	r3, r2
 8002766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002770:	2b80      	cmp	r3, #128	; 0x80
 8002772:	d12b      	bne.n	80027cc <HCD_HC_OUT_IRQHandler+0x412>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	0151      	lsls	r1, r2, #5
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	440a      	add	r2, r1
 800278a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800278e:	f043 0302 	orr.w	r3, r3, #2
 8002792:	60d3      	str	r3, [r2, #12]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f004 f86b 	bl	800687a <USB_HC_Halt>
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	440b      	add	r3, r1
 80027b2:	335d      	adds	r3, #93	; 0x5d
 80027b4:	2206      	movs	r2, #6
 80027b6:	701a      	strb	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c4:	461a      	mov	r2, r3
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	6093      	str	r3, [r2, #8]
 80027ca:	e167      	b.n	8002a9c <HCD_HC_OUT_IRQHandler+0x6e2>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e2:	d135      	bne.n	8002850 <HCD_HC_OUT_IRQHandler+0x496>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	0151      	lsls	r1, r2, #5
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	440a      	add	r2, r1
 80027fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027fe:	f043 0302 	orr.w	r3, r3, #2
 8002802:	60d3      	str	r3, [r2, #12]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	4611      	mov	r1, r2
 800280e:	4618      	mov	r0, r3
 8002810:	f004 f833 	bl	800687a <USB_HC_Halt>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4413      	add	r3, r2
 800281c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002820:	461a      	mov	r2, r3
 8002822:	2310      	movs	r3, #16
 8002824:	6093      	str	r3, [r2, #8]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	015a      	lsls	r2, r3, #5
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4413      	add	r3, r2
 800282e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002832:	461a      	mov	r2, r3
 8002834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002838:	6093      	str	r3, [r2, #8]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	440b      	add	r3, r1
 8002848:	335d      	adds	r3, #93	; 0x5d
 800284a:	2208      	movs	r2, #8
 800284c:	701a      	strb	r2, [r3, #0]
 800284e:	e125      	b.n	8002a9c <HCD_HC_OUT_IRQHandler+0x6e2>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4413      	add	r3, r2
 8002858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b02      	cmp	r3, #2
 8002864:	f040 811a 	bne.w	8002a9c <HCD_HC_OUT_IRQHandler+0x6e2>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4413      	add	r3, r2
 8002870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	0151      	lsls	r1, r2, #5
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	440a      	add	r2, r1
 800287e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002882:	f023 0302 	bic.w	r3, r3, #2
 8002886:	60d3      	str	r3, [r2, #12]
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	440b      	add	r3, r1
 8002896:	335d      	adds	r3, #93	; 0x5d
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d137      	bne.n	800290e <HCD_HC_OUT_IRQHandler+0x554>
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	440b      	add	r3, r1
 80028ac:	335c      	adds	r3, #92	; 0x5c
 80028ae:	2201      	movs	r2, #1
 80028b0:	701a      	strb	r2, [r3, #0]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	4613      	mov	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	440b      	add	r3, r1
 80028c0:	333f      	adds	r3, #63	; 0x3f
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d00b      	beq.n	80028e0 <HCD_HC_OUT_IRQHandler+0x526>
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	440b      	add	r3, r1
 80028d6:	333f      	adds	r3, #63	; 0x3f
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b03      	cmp	r3, #3
 80028dc:	f040 80c5 	bne.w	8002a6a <HCD_HC_OUT_IRQHandler+0x6b0>
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	440b      	add	r3, r1
 80028ee:	3351      	adds	r3, #81	; 0x51
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	f083 0301 	eor.w	r3, r3, #1
 80028f6:	b2d8      	uxtb	r0, r3
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	440b      	add	r3, r1
 8002906:	3351      	adds	r3, #81	; 0x51
 8002908:	4602      	mov	r2, r0
 800290a:	701a      	strb	r2, [r3, #0]
 800290c:	e0ad      	b.n	8002a6a <HCD_HC_OUT_IRQHandler+0x6b0>
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	440b      	add	r3, r1
 800291c:	335d      	adds	r3, #93	; 0x5d
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b03      	cmp	r3, #3
 8002922:	d10a      	bne.n	800293a <HCD_HC_OUT_IRQHandler+0x580>
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	440b      	add	r3, r1
 8002932:	335c      	adds	r3, #92	; 0x5c
 8002934:	2202      	movs	r2, #2
 8002936:	701a      	strb	r2, [r3, #0]
 8002938:	e097      	b.n	8002a6a <HCD_HC_OUT_IRQHandler+0x6b0>
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	440b      	add	r3, r1
 8002948:	335d      	adds	r3, #93	; 0x5d
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b04      	cmp	r3, #4
 800294e:	d10a      	bne.n	8002966 <HCD_HC_OUT_IRQHandler+0x5ac>
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	440b      	add	r3, r1
 800295e:	335c      	adds	r3, #92	; 0x5c
 8002960:	2202      	movs	r2, #2
 8002962:	701a      	strb	r2, [r3, #0]
 8002964:	e081      	b.n	8002a6a <HCD_HC_OUT_IRQHandler+0x6b0>
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	440b      	add	r3, r1
 8002974:	335d      	adds	r3, #93	; 0x5d
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b05      	cmp	r3, #5
 800297a:	d10a      	bne.n	8002992 <HCD_HC_OUT_IRQHandler+0x5d8>
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	335c      	adds	r3, #92	; 0x5c
 800298c:	2205      	movs	r2, #5
 800298e:	701a      	strb	r2, [r3, #0]
 8002990:	e06b      	b.n	8002a6a <HCD_HC_OUT_IRQHandler+0x6b0>
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	440b      	add	r3, r1
 80029a0:	335d      	adds	r3, #93	; 0x5d
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b06      	cmp	r3, #6
 80029a6:	d00a      	beq.n	80029be <HCD_HC_OUT_IRQHandler+0x604>
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	440b      	add	r3, r1
 80029b6:	335d      	adds	r3, #93	; 0x5d
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d155      	bne.n	8002a6a <HCD_HC_OUT_IRQHandler+0x6b0>
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4613      	mov	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	440b      	add	r3, r1
 80029cc:	3358      	adds	r3, #88	; 0x58
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	1c59      	adds	r1, r3, #1
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	4403      	add	r3, r0
 80029e0:	3358      	adds	r3, #88	; 0x58
 80029e2:	6019      	str	r1, [r3, #0]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	440b      	add	r3, r1
 80029f2:	3358      	adds	r3, #88	; 0x58
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d914      	bls.n	8002a24 <HCD_HC_OUT_IRQHandler+0x66a>
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	440b      	add	r3, r1
 8002a08:	3358      	adds	r3, #88	; 0x58
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	440b      	add	r3, r1
 8002a1c:	335c      	adds	r3, #92	; 0x5c
 8002a1e:	2204      	movs	r2, #4
 8002a20:	701a      	strb	r2, [r3, #0]
 8002a22:	e009      	b.n	8002a38 <HCD_HC_OUT_IRQHandler+0x67e>
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	440b      	add	r3, r1
 8002a32:	335c      	adds	r3, #92	; 0x5c
 8002a34:	2202      	movs	r2, #2
 8002a36:	701a      	strb	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a64:	461a      	mov	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	015a      	lsls	r2, r3, #5
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a76:	461a      	mov	r2, r3
 8002a78:	2302      	movs	r3, #2
 8002a7a:	6093      	str	r3, [r2, #8]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	b2d8      	uxtb	r0, r3
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	440b      	add	r3, r1
 8002a8e:	335c      	adds	r3, #92	; 0x5c
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	4601      	mov	r1, r0
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f006 fdca 	bl	8009630 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a9c:	bf00      	nop
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HCD_RXQLVL_IRQHandler>:
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08a      	sub	sp, #40	; 0x28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	623b      	str	r3, [r7, #32]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	61fb      	str	r3, [r7, #28]
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	f003 030f 	and.w	r3, r3, #15
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	0c5b      	lsrs	r3, r3, #17
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	091b      	lsrs	r3, r3, #4
 8002ad4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d003      	beq.n	8002ae8 <HCD_RXQLVL_IRQHandler+0x44>
 8002ae0:	2b05      	cmp	r3, #5
 8002ae2:	f000 8082 	beq.w	8002bea <HCD_RXQLVL_IRQHandler+0x146>
 8002ae6:	e083      	b.n	8002bf0 <HCD_RXQLVL_IRQHandler+0x14c>
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d07f      	beq.n	8002bee <HCD_RXQLVL_IRQHandler+0x14a>
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	440b      	add	r3, r1
 8002afc:	3344      	adds	r3, #68	; 0x44
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d074      	beq.n	8002bee <HCD_RXQLVL_IRQHandler+0x14a>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	440b      	add	r3, r1
 8002b16:	3344      	adds	r3, #68	; 0x44
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	b292      	uxth	r2, r2
 8002b1e:	4619      	mov	r1, r3
 8002b20:	f003 fa4b 	bl	8005fba <USB_ReadPacket>
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	440b      	add	r3, r1
 8002b32:	3344      	adds	r3, #68	; 0x44
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	18d1      	adds	r1, r2, r3
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4403      	add	r3, r0
 8002b48:	3344      	adds	r3, #68	; 0x44
 8002b4a:	6019      	str	r1, [r3, #0]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	440b      	add	r3, r1
 8002b5a:	334c      	adds	r3, #76	; 0x4c
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	18d1      	adds	r1, r2, r3
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4403      	add	r3, r0
 8002b70:	334c      	adds	r3, #76	; 0x4c
 8002b72:	6019      	str	r1, [r3, #0]
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b80:	691a      	ldr	r2, [r3, #16]
 8002b82:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <HCD_RXQLVL_IRQHandler+0x154>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d031      	beq.n	8002bee <HCD_RXQLVL_IRQHandler+0x14a>
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6013      	str	r3, [r2, #0]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	440b      	add	r3, r1
 8002bca:	3350      	adds	r3, #80	; 0x50
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	f083 0301 	eor.w	r3, r3, #1
 8002bd2:	b2d8      	uxtb	r0, r3
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	440b      	add	r3, r1
 8002be2:	3350      	adds	r3, #80	; 0x50
 8002be4:	4602      	mov	r2, r0
 8002be6:	701a      	strb	r2, [r3, #0]
 8002be8:	e001      	b.n	8002bee <HCD_RXQLVL_IRQHandler+0x14a>
 8002bea:	bf00      	nop
 8002bec:	e000      	b.n	8002bf0 <HCD_RXQLVL_IRQHandler+0x14c>
 8002bee:	bf00      	nop
 8002bf0:	bf00      	nop
 8002bf2:	3728      	adds	r7, #40	; 0x28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	1ff80000 	.word	0x1ff80000

08002bfc <HCD_Port_IRQHandler>:
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d113      	bne.n	8002c5c <HCD_Port_IRQHandler+0x60>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d10a      	bne.n	8002c54 <HCD_Port_IRQHandler+0x58>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699a      	ldr	r2, [r3, #24]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002c4c:	619a      	str	r2, [r3, #24]
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f006 fcd2 	bl	80095f8 <HAL_HCD_Connect_Callback>
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f043 0302 	orr.w	r3, r3, #2
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d147      	bne.n	8002cf6 <HCD_Port_IRQHandler+0xfa>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	f043 0308 	orr.w	r3, r3, #8
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d129      	bne.n	8002ccc <HCD_Port_IRQHandler+0xd0>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d113      	bne.n	8002ca8 <HCD_Port_IRQHandler+0xac>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c8a:	d106      	bne.n	8002c9a <HCD_Port_IRQHandler+0x9e>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2102      	movs	r1, #2
 8002c92:	4618      	mov	r0, r3
 8002c94:	f003 facc 	bl	8006230 <USB_InitFSLSPClkSel>
 8002c98:	e011      	b.n	8002cbe <HCD_Port_IRQHandler+0xc2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f003 fac5 	bl	8006230 <USB_InitFSLSPClkSel>
 8002ca6:	e00a      	b.n	8002cbe <HCD_Port_IRQHandler+0xc2>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d106      	bne.n	8002cbe <HCD_Port_IRQHandler+0xc2>
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002cbc:	6053      	str	r3, [r2, #4]
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f006 fcc4 	bl	800964c <HAL_HCD_PortEnabled_Callback>
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f006 fc97 	bl	80095f8 <HAL_HCD_Connect_Callback>
 8002cca:	e014      	b.n	8002cf6 <HCD_Port_IRQHandler+0xfa>
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f006 fccb 	bl	8009668 <HAL_HCD_PortDisabled_Callback>
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002ce0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699a      	ldr	r2, [r3, #24]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002cf4:	619a      	str	r2, [r3, #24]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	2b20      	cmp	r3, #32
 8002cfe:	d103      	bne.n	8002d08 <HCD_Port_IRQHandler+0x10c>
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f043 0320 	orr.w	r3, r3, #32
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	bf00      	nop
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e11f      	b.n	8002f6e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d106      	bne.n	8002d48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f006 f94e 	bl	8008fe4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2224      	movs	r2, #36	; 0x24
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0201 	bic.w	r2, r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d80:	f001 f9de 	bl	8004140 <HAL_RCC_GetPCLK1Freq>
 8002d84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	4a7b      	ldr	r2, [pc, #492]	; (8002f78 <HAL_I2C_Init+0x25c>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d807      	bhi.n	8002da0 <HAL_I2C_Init+0x84>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4a7a      	ldr	r2, [pc, #488]	; (8002f7c <HAL_I2C_Init+0x260>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	bf94      	ite	ls
 8002d98:	2301      	movls	r3, #1
 8002d9a:	2300      	movhi	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e006      	b.n	8002dae <HAL_I2C_Init+0x92>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4a77      	ldr	r2, [pc, #476]	; (8002f80 <HAL_I2C_Init+0x264>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	bf94      	ite	ls
 8002da8:	2301      	movls	r3, #1
 8002daa:	2300      	movhi	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e0db      	b.n	8002f6e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	4a72      	ldr	r2, [pc, #456]	; (8002f84 <HAL_I2C_Init+0x268>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	0c9b      	lsrs	r3, r3, #18
 8002dc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	4a64      	ldr	r2, [pc, #400]	; (8002f78 <HAL_I2C_Init+0x25c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d802      	bhi.n	8002df0 <HAL_I2C_Init+0xd4>
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	3301      	adds	r3, #1
 8002dee:	e009      	b.n	8002e04 <HAL_I2C_Init+0xe8>
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002df6:	fb02 f303 	mul.w	r3, r2, r3
 8002dfa:	4a63      	ldr	r2, [pc, #396]	; (8002f88 <HAL_I2C_Init+0x26c>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	099b      	lsrs	r3, r3, #6
 8002e02:	3301      	adds	r3, #1
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	430b      	orrs	r3, r1
 8002e0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4956      	ldr	r1, [pc, #344]	; (8002f78 <HAL_I2C_Init+0x25c>)
 8002e20:	428b      	cmp	r3, r1
 8002e22:	d80d      	bhi.n	8002e40 <HAL_I2C_Init+0x124>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	1e59      	subs	r1, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e32:	3301      	adds	r3, #1
 8002e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	bf38      	it	cc
 8002e3c:	2304      	movcc	r3, #4
 8002e3e:	e04f      	b.n	8002ee0 <HAL_I2C_Init+0x1c4>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d111      	bne.n	8002e6c <HAL_I2C_Init+0x150>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1e58      	subs	r0, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6859      	ldr	r1, [r3, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	440b      	add	r3, r1
 8002e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	e012      	b.n	8002e92 <HAL_I2C_Init+0x176>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1e58      	subs	r0, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6859      	ldr	r1, [r3, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	0099      	lsls	r1, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e82:	3301      	adds	r3, #1
 8002e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf0c      	ite	eq
 8002e8c:	2301      	moveq	r3, #1
 8002e8e:	2300      	movne	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_I2C_Init+0x17e>
 8002e96:	2301      	movs	r3, #1
 8002e98:	e022      	b.n	8002ee0 <HAL_I2C_Init+0x1c4>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10e      	bne.n	8002ec0 <HAL_I2C_Init+0x1a4>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	1e58      	subs	r0, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6859      	ldr	r1, [r3, #4]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	440b      	add	r3, r1
 8002eb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ebe:	e00f      	b.n	8002ee0 <HAL_I2C_Init+0x1c4>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1e58      	subs	r0, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6859      	ldr	r1, [r3, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	0099      	lsls	r1, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002edc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	6809      	ldr	r1, [r1, #0]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69da      	ldr	r2, [r3, #28]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6911      	ldr	r1, [r2, #16]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68d2      	ldr	r2, [r2, #12]
 8002f1a:	4311      	orrs	r1, r2
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	430b      	orrs	r3, r1
 8002f22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	695a      	ldr	r2, [r3, #20]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0201 	orr.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	000186a0 	.word	0x000186a0
 8002f7c:	001e847f 	.word	0x001e847f
 8002f80:	003d08ff 	.word	0x003d08ff
 8002f84:	431bde83 	.word	0x431bde83
 8002f88:	10624dd3 	.word	0x10624dd3

08002f8c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e128      	b.n	80031f0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a90      	ldr	r2, [pc, #576]	; (80031f8 <HAL_I2S_Init+0x26c>)
 8002fb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f006 f85b 	bl	8009074 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002fd4:	f023 030f 	bic.w	r3, r3, #15
 8002fd8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d060      	beq.n	80030ac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d102      	bne.n	8002ff8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002ff2:	2310      	movs	r3, #16
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	e001      	b.n	8002ffc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002ff8:	2320      	movs	r3, #32
 8002ffa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2b20      	cmp	r3, #32
 8003002:	d802      	bhi.n	800300a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800300a:	2001      	movs	r0, #1
 800300c:	f001 f9a2 	bl	8004354 <HAL_RCCEx_GetPeriphCLKFreq>
 8003010:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800301a:	d125      	bne.n	8003068 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d010      	beq.n	8003046 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	fbb2 f2f3 	udiv	r2, r2, r3
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	461a      	mov	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003040:	3305      	adds	r3, #5
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	e01f      	b.n	8003086 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	461a      	mov	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003062:	3305      	adds	r3, #5
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	e00e      	b.n	8003086 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	461a      	mov	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003082:	3305      	adds	r3, #5
 8003084:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	4a5c      	ldr	r2, [pc, #368]	; (80031fc <HAL_I2S_Init+0x270>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	08db      	lsrs	r3, r3, #3
 8003090:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	085b      	lsrs	r3, r3, #1
 80030a2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	021b      	lsls	r3, r3, #8
 80030a8:	61bb      	str	r3, [r7, #24]
 80030aa:	e003      	b.n	80030b4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80030ac:	2302      	movs	r3, #2
 80030ae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d902      	bls.n	80030c0 <HAL_I2S_Init+0x134>
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	2bff      	cmp	r3, #255	; 0xff
 80030be:	d907      	bls.n	80030d0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c4:	f043 0210 	orr.w	r2, r3, #16
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e08f      	b.n	80031f0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	ea42 0103 	orr.w	r1, r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030ee:	f023 030f 	bic.w	r3, r3, #15
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6851      	ldr	r1, [r2, #4]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6892      	ldr	r2, [r2, #8]
 80030fa:	4311      	orrs	r1, r2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	68d2      	ldr	r2, [r2, #12]
 8003100:	4311      	orrs	r1, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6992      	ldr	r2, [r2, #24]
 8003106:	430a      	orrs	r2, r1
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003112:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d161      	bne.n	80031e0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a38      	ldr	r2, [pc, #224]	; (8003200 <HAL_I2S_Init+0x274>)
 8003120:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a37      	ldr	r2, [pc, #220]	; (8003204 <HAL_I2S_Init+0x278>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d101      	bne.n	8003130 <HAL_I2S_Init+0x1a4>
 800312c:	4b36      	ldr	r3, [pc, #216]	; (8003208 <HAL_I2S_Init+0x27c>)
 800312e:	e001      	b.n	8003134 <HAL_I2S_Init+0x1a8>
 8003130:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6812      	ldr	r2, [r2, #0]
 800313a:	4932      	ldr	r1, [pc, #200]	; (8003204 <HAL_I2S_Init+0x278>)
 800313c:	428a      	cmp	r2, r1
 800313e:	d101      	bne.n	8003144 <HAL_I2S_Init+0x1b8>
 8003140:	4a31      	ldr	r2, [pc, #196]	; (8003208 <HAL_I2S_Init+0x27c>)
 8003142:	e001      	b.n	8003148 <HAL_I2S_Init+0x1bc>
 8003144:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003148:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800314c:	f023 030f 	bic.w	r3, r3, #15
 8003150:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a2b      	ldr	r2, [pc, #172]	; (8003204 <HAL_I2S_Init+0x278>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d101      	bne.n	8003160 <HAL_I2S_Init+0x1d4>
 800315c:	4b2a      	ldr	r3, [pc, #168]	; (8003208 <HAL_I2S_Init+0x27c>)
 800315e:	e001      	b.n	8003164 <HAL_I2S_Init+0x1d8>
 8003160:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003164:	2202      	movs	r2, #2
 8003166:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a25      	ldr	r2, [pc, #148]	; (8003204 <HAL_I2S_Init+0x278>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d101      	bne.n	8003176 <HAL_I2S_Init+0x1ea>
 8003172:	4b25      	ldr	r3, [pc, #148]	; (8003208 <HAL_I2S_Init+0x27c>)
 8003174:	e001      	b.n	800317a <HAL_I2S_Init+0x1ee>
 8003176:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003186:	d003      	beq.n	8003190 <HAL_I2S_Init+0x204>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d103      	bne.n	8003198 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003190:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	e001      	b.n	800319c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003198:	2300      	movs	r3, #0
 800319a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	b299      	uxth	r1, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80031b2:	4303      	orrs	r3, r0
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	430b      	orrs	r3, r1
 80031b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80031ba:	4313      	orrs	r3, r2
 80031bc:	b29a      	uxth	r2, r3
 80031be:	897b      	ldrh	r3, [r7, #10]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031c8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a0d      	ldr	r2, [pc, #52]	; (8003204 <HAL_I2S_Init+0x278>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d101      	bne.n	80031d8 <HAL_I2S_Init+0x24c>
 80031d4:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <HAL_I2S_Init+0x27c>)
 80031d6:	e001      	b.n	80031dc <HAL_I2S_Init+0x250>
 80031d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031dc:	897a      	ldrh	r2, [r7, #10]
 80031de:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3720      	adds	r7, #32
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	08003303 	.word	0x08003303
 80031fc:	cccccccd 	.word	0xcccccccd
 8003200:	08003419 	.word	0x08003419
 8003204:	40003800 	.word	0x40003800
 8003208:	40003400 	.word	0x40003400

0800320c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	881a      	ldrh	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	1c9a      	adds	r2, r3, #2
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10e      	bne.n	800329c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800328c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff ffb8 	bl	800320c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b6:	b292      	uxth	r2, r2
 80032b8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032be:	1c9a      	adds	r2, r3, #2
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10e      	bne.n	80032fa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032ea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff ff93 	bl	8003220 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032fa:	bf00      	nop
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b086      	sub	sp, #24
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b04      	cmp	r3, #4
 800331c:	d13a      	bne.n	8003394 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b01      	cmp	r3, #1
 8003326:	d109      	bne.n	800333c <I2S_IRQHandler+0x3a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003332:	2b40      	cmp	r3, #64	; 0x40
 8003334:	d102      	bne.n	800333c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff ffb4 	bl	80032a4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003342:	2b40      	cmp	r3, #64	; 0x40
 8003344:	d126      	bne.n	8003394 <I2S_IRQHandler+0x92>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b20      	cmp	r3, #32
 8003352:	d11f      	bne.n	8003394 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003362:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003364:	2300      	movs	r3, #0
 8003366:	613b      	str	r3, [r7, #16]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	f043 0202 	orr.w	r2, r3, #2
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ff50 	bl	8003234 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b03      	cmp	r3, #3
 800339e:	d136      	bne.n	800340e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d109      	bne.n	80033be <I2S_IRQHandler+0xbc>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b4:	2b80      	cmp	r3, #128	; 0x80
 80033b6:	d102      	bne.n	80033be <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff ff45 	bl	8003248 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d122      	bne.n	800340e <I2S_IRQHandler+0x10c>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 0320 	and.w	r3, r3, #32
 80033d2:	2b20      	cmp	r3, #32
 80033d4:	d11b      	bne.n	800340e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033e4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003400:	f043 0204 	orr.w	r2, r3, #4
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7ff ff13 	bl	8003234 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800340e:	bf00      	nop
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4aa2      	ldr	r2, [pc, #648]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d101      	bne.n	8003436 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003432:	4ba2      	ldr	r3, [pc, #648]	; (80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003434:	e001      	b.n	800343a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003436:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a9b      	ldr	r2, [pc, #620]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d101      	bne.n	8003454 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003450:	4b9a      	ldr	r3, [pc, #616]	; (80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003452:	e001      	b.n	8003458 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003454:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003464:	d004      	beq.n	8003470 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	f040 8099 	bne.w	80035a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b02      	cmp	r3, #2
 8003478:	d107      	bne.n	800348a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f925 	bl	80036d4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b01      	cmp	r3, #1
 8003492:	d107      	bne.n	80034a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f9c8 	bl	8003834 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034aa:	2b40      	cmp	r3, #64	; 0x40
 80034ac:	d13a      	bne.n	8003524 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f003 0320 	and.w	r3, r3, #32
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d035      	beq.n	8003524 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a7e      	ldr	r2, [pc, #504]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d101      	bne.n	80034c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80034c2:	4b7e      	ldr	r3, [pc, #504]	; (80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034c4:	e001      	b.n	80034ca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80034c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4979      	ldr	r1, [pc, #484]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034d2:	428b      	cmp	r3, r1
 80034d4:	d101      	bne.n	80034da <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80034d6:	4b79      	ldr	r3, [pc, #484]	; (80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034d8:	e001      	b.n	80034de <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80034da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034e2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034f2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034f4:	2300      	movs	r3, #0
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	f043 0202 	orr.w	r2, r3, #2
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff fe88 	bl	8003234 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b08      	cmp	r3, #8
 800352c:	f040 80be 	bne.w	80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 80b8 	beq.w	80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800354a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a59      	ldr	r2, [pc, #356]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d101      	bne.n	800355a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003556:	4b59      	ldr	r3, [pc, #356]	; (80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003558:	e001      	b.n	800355e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800355a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4954      	ldr	r1, [pc, #336]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003566:	428b      	cmp	r3, r1
 8003568:	d101      	bne.n	800356e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800356a:	4b54      	ldr	r3, [pc, #336]	; (80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800356c:	e001      	b.n	8003572 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800356e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003572:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003576:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003578:	2300      	movs	r3, #0
 800357a:	60bb      	str	r3, [r7, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	60bb      	str	r3, [r7, #8]
 8003584:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003592:	f043 0204 	orr.w	r2, r3, #4
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff fe4a 	bl	8003234 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035a0:	e084      	b.n	80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d107      	bne.n	80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f8be 	bl	8003738 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d107      	bne.n	80035d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f8fd 	bl	80037d0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035dc:	2b40      	cmp	r3, #64	; 0x40
 80035de:	d12f      	bne.n	8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d02a      	beq.n	8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035f8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a2e      	ldr	r2, [pc, #184]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d101      	bne.n	8003608 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003604:	4b2d      	ldr	r3, [pc, #180]	; (80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003606:	e001      	b.n	800360c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003608:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4929      	ldr	r1, [pc, #164]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003614:	428b      	cmp	r3, r1
 8003616:	d101      	bne.n	800361c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003618:	4b28      	ldr	r3, [pc, #160]	; (80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800361a:	e001      	b.n	8003620 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800361c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003620:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003624:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	f043 0202 	orr.w	r2, r3, #2
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff fdfa 	bl	8003234 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b08      	cmp	r3, #8
 8003648:	d131      	bne.n	80036ae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d02c      	beq.n	80036ae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a17      	ldr	r2, [pc, #92]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d101      	bne.n	8003662 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800365e:	4b17      	ldr	r3, [pc, #92]	; (80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003660:	e001      	b.n	8003666 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003662:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4912      	ldr	r1, [pc, #72]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800366e:	428b      	cmp	r3, r1
 8003670:	d101      	bne.n	8003676 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003672:	4b12      	ldr	r3, [pc, #72]	; (80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003674:	e001      	b.n	800367a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003676:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800367a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800367e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800368e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369c:	f043 0204 	orr.w	r2, r3, #4
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff fdc5 	bl	8003234 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036aa:	e000      	b.n	80036ae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036ac:	bf00      	nop
}
 80036ae:	bf00      	nop
 80036b0:	3720      	adds	r7, #32
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40003800 	.word	0x40003800
 80036bc:	40003400 	.word	0x40003400

080036c0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	1c99      	adds	r1, r3, #2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6251      	str	r1, [r2, #36]	; 0x24
 80036e6:	881a      	ldrh	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d113      	bne.n	800372e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003714:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800371a:	b29b      	uxth	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d106      	bne.n	800372e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff ffc9 	bl	80036c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800372e:	bf00      	nop
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	1c99      	adds	r1, r3, #2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6251      	str	r1, [r2, #36]	; 0x24
 800374a:	8819      	ldrh	r1, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1d      	ldr	r2, [pc, #116]	; (80037c8 <I2SEx_TxISR_I2SExt+0x90>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d101      	bne.n	800375a <I2SEx_TxISR_I2SExt+0x22>
 8003756:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <I2SEx_TxISR_I2SExt+0x94>)
 8003758:	e001      	b.n	800375e <I2SEx_TxISR_I2SExt+0x26>
 800375a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800375e:	460a      	mov	r2, r1
 8003760:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003766:	b29b      	uxth	r3, r3
 8003768:	3b01      	subs	r3, #1
 800376a:	b29a      	uxth	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d121      	bne.n	80037be <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a12      	ldr	r2, [pc, #72]	; (80037c8 <I2SEx_TxISR_I2SExt+0x90>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d101      	bne.n	8003788 <I2SEx_TxISR_I2SExt+0x50>
 8003784:	4b11      	ldr	r3, [pc, #68]	; (80037cc <I2SEx_TxISR_I2SExt+0x94>)
 8003786:	e001      	b.n	800378c <I2SEx_TxISR_I2SExt+0x54>
 8003788:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	490d      	ldr	r1, [pc, #52]	; (80037c8 <I2SEx_TxISR_I2SExt+0x90>)
 8003794:	428b      	cmp	r3, r1
 8003796:	d101      	bne.n	800379c <I2SEx_TxISR_I2SExt+0x64>
 8003798:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <I2SEx_TxISR_I2SExt+0x94>)
 800379a:	e001      	b.n	80037a0 <I2SEx_TxISR_I2SExt+0x68>
 800379c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d106      	bne.n	80037be <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7ff ff81 	bl	80036c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40003800 	.word	0x40003800
 80037cc:	40003400 	.word	0x40003400

080037d0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68d8      	ldr	r0, [r3, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e2:	1c99      	adds	r1, r3, #2
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80037e8:	b282      	uxth	r2, r0
 80037ea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d113      	bne.n	800382c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003812:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7ff ff4a 	bl	80036c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800382c:	bf00      	nop
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a20      	ldr	r2, [pc, #128]	; (80038c4 <I2SEx_RxISR_I2SExt+0x90>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d101      	bne.n	800384a <I2SEx_RxISR_I2SExt+0x16>
 8003846:	4b20      	ldr	r3, [pc, #128]	; (80038c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003848:	e001      	b.n	800384e <I2SEx_RxISR_I2SExt+0x1a>
 800384a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800384e:	68d8      	ldr	r0, [r3, #12]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	1c99      	adds	r1, r3, #2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	62d1      	str	r1, [r2, #44]	; 0x2c
 800385a:	b282      	uxth	r2, r0
 800385c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003862:	b29b      	uxth	r3, r3
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d121      	bne.n	80038ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a12      	ldr	r2, [pc, #72]	; (80038c4 <I2SEx_RxISR_I2SExt+0x90>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d101      	bne.n	8003884 <I2SEx_RxISR_I2SExt+0x50>
 8003880:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003882:	e001      	b.n	8003888 <I2SEx_RxISR_I2SExt+0x54>
 8003884:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	490d      	ldr	r1, [pc, #52]	; (80038c4 <I2SEx_RxISR_I2SExt+0x90>)
 8003890:	428b      	cmp	r3, r1
 8003892:	d101      	bne.n	8003898 <I2SEx_RxISR_I2SExt+0x64>
 8003894:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003896:	e001      	b.n	800389c <I2SEx_RxISR_I2SExt+0x68>
 8003898:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800389c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d106      	bne.n	80038ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff ff03 	bl	80036c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40003800 	.word	0x40003800
 80038c8:	40003400 	.word	0x40003400

080038cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e25b      	b.n	8003d96 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d075      	beq.n	80039d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ea:	4ba3      	ldr	r3, [pc, #652]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d00c      	beq.n	8003910 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038f6:	4ba0      	ldr	r3, [pc, #640]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d112      	bne.n	8003928 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003902:	4b9d      	ldr	r3, [pc, #628]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800390e:	d10b      	bne.n	8003928 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003910:	4b99      	ldr	r3, [pc, #612]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d05b      	beq.n	80039d4 <HAL_RCC_OscConfig+0x108>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d157      	bne.n	80039d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e236      	b.n	8003d96 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003930:	d106      	bne.n	8003940 <HAL_RCC_OscConfig+0x74>
 8003932:	4b91      	ldr	r3, [pc, #580]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a90      	ldr	r2, [pc, #576]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	e01d      	b.n	800397c <HAL_RCC_OscConfig+0xb0>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003948:	d10c      	bne.n	8003964 <HAL_RCC_OscConfig+0x98>
 800394a:	4b8b      	ldr	r3, [pc, #556]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a8a      	ldr	r2, [pc, #552]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	4b88      	ldr	r3, [pc, #544]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a87      	ldr	r2, [pc, #540]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 800395c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e00b      	b.n	800397c <HAL_RCC_OscConfig+0xb0>
 8003964:	4b84      	ldr	r3, [pc, #528]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a83      	ldr	r2, [pc, #524]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 800396a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	4b81      	ldr	r3, [pc, #516]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a80      	ldr	r2, [pc, #512]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800397a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d013      	beq.n	80039ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7fd fa58 	bl	8000e38 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800398c:	f7fd fa54 	bl	8000e38 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b64      	cmp	r3, #100	; 0x64
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e1fb      	b.n	8003d96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399e:	4b76      	ldr	r3, [pc, #472]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0xc0>
 80039aa:	e014      	b.n	80039d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fd fa44 	bl	8000e38 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b4:	f7fd fa40 	bl	8000e38 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b64      	cmp	r3, #100	; 0x64
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e1e7      	b.n	8003d96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c6:	4b6c      	ldr	r3, [pc, #432]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0xe8>
 80039d2:	e000      	b.n	80039d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d063      	beq.n	8003aaa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039e2:	4b65      	ldr	r3, [pc, #404]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00b      	beq.n	8003a06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ee:	4b62      	ldr	r3, [pc, #392]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d11c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039fa:	4b5f      	ldr	r3, [pc, #380]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d116      	bne.n	8003a34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a06:	4b5c      	ldr	r3, [pc, #368]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <HAL_RCC_OscConfig+0x152>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d001      	beq.n	8003a1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e1bb      	b.n	8003d96 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1e:	4b56      	ldr	r3, [pc, #344]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4952      	ldr	r1, [pc, #328]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a32:	e03a      	b.n	8003aaa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d020      	beq.n	8003a7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a3c:	4b4f      	ldr	r3, [pc, #316]	; (8003b7c <HAL_RCC_OscConfig+0x2b0>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a42:	f7fd f9f9 	bl	8000e38 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a4a:	f7fd f9f5 	bl	8000e38 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e19c      	b.n	8003d96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5c:	4b46      	ldr	r3, [pc, #280]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a68:	4b43      	ldr	r3, [pc, #268]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	4940      	ldr	r1, [pc, #256]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	600b      	str	r3, [r1, #0]
 8003a7c:	e015      	b.n	8003aaa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a7e:	4b3f      	ldr	r3, [pc, #252]	; (8003b7c <HAL_RCC_OscConfig+0x2b0>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7fd f9d8 	bl	8000e38 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a8c:	f7fd f9d4 	bl	8000e38 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e17b      	b.n	8003d96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9e:	4b36      	ldr	r3, [pc, #216]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d030      	beq.n	8003b18 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d016      	beq.n	8003aec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003abe:	4b30      	ldr	r3, [pc, #192]	; (8003b80 <HAL_RCC_OscConfig+0x2b4>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac4:	f7fd f9b8 	bl	8000e38 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003acc:	f7fd f9b4 	bl	8000e38 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e15b      	b.n	8003d96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ade:	4b26      	ldr	r3, [pc, #152]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0x200>
 8003aea:	e015      	b.n	8003b18 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aec:	4b24      	ldr	r3, [pc, #144]	; (8003b80 <HAL_RCC_OscConfig+0x2b4>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af2:	f7fd f9a1 	bl	8000e38 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003afa:	f7fd f99d 	bl	8000e38 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e144      	b.n	8003d96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b0c:	4b1a      	ldr	r3, [pc, #104]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f0      	bne.n	8003afa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 80a0 	beq.w	8003c66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b26:	2300      	movs	r3, #0
 8003b28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b2a:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10f      	bne.n	8003b56 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b36:	2300      	movs	r3, #0
 8003b38:	60bb      	str	r3, [r7, #8]
 8003b3a:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	4a0e      	ldr	r2, [pc, #56]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b44:	6413      	str	r3, [r2, #64]	; 0x40
 8003b46:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	60bb      	str	r3, [r7, #8]
 8003b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b52:	2301      	movs	r3, #1
 8003b54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b56:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <HAL_RCC_OscConfig+0x2b8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d121      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b62:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <HAL_RCC_OscConfig+0x2b8>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a07      	ldr	r2, [pc, #28]	; (8003b84 <HAL_RCC_OscConfig+0x2b8>)
 8003b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b6e:	f7fd f963 	bl	8000e38 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b74:	e011      	b.n	8003b9a <HAL_RCC_OscConfig+0x2ce>
 8003b76:	bf00      	nop
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	42470000 	.word	0x42470000
 8003b80:	42470e80 	.word	0x42470e80
 8003b84:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b88:	f7fd f956 	bl	8000e38 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e0fd      	b.n	8003d96 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9a:	4b81      	ldr	r3, [pc, #516]	; (8003da0 <HAL_RCC_OscConfig+0x4d4>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d106      	bne.n	8003bbc <HAL_RCC_OscConfig+0x2f0>
 8003bae:	4b7d      	ldr	r3, [pc, #500]	; (8003da4 <HAL_RCC_OscConfig+0x4d8>)
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb2:	4a7c      	ldr	r2, [pc, #496]	; (8003da4 <HAL_RCC_OscConfig+0x4d8>)
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bba:	e01c      	b.n	8003bf6 <HAL_RCC_OscConfig+0x32a>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	2b05      	cmp	r3, #5
 8003bc2:	d10c      	bne.n	8003bde <HAL_RCC_OscConfig+0x312>
 8003bc4:	4b77      	ldr	r3, [pc, #476]	; (8003da4 <HAL_RCC_OscConfig+0x4d8>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc8:	4a76      	ldr	r2, [pc, #472]	; (8003da4 <HAL_RCC_OscConfig+0x4d8>)
 8003bca:	f043 0304 	orr.w	r3, r3, #4
 8003bce:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd0:	4b74      	ldr	r3, [pc, #464]	; (8003da4 <HAL_RCC_OscConfig+0x4d8>)
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd4:	4a73      	ldr	r2, [pc, #460]	; (8003da4 <HAL_RCC_OscConfig+0x4d8>)
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	6713      	str	r3, [r2, #112]	; 0x70
 8003bdc:	e00b      	b.n	8003bf6 <HAL_RCC_OscConfig+0x32a>
 8003bde:	4b71      	ldr	r3, [pc, #452]	; (8003da4 <HAL_RCC_OscConfig+0x4d8>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	4a70      	ldr	r2, [pc, #448]	; (8003da4 <HAL_RCC_OscConfig+0x4d8>)
 8003be4:	f023 0301 	bic.w	r3, r3, #1
 8003be8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bea:	4b6e      	ldr	r3, [pc, #440]	; (8003da4 <HAL_RCC_OscConfig+0x4d8>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bee:	4a6d      	ldr	r2, [pc, #436]	; (8003da4 <HAL_RCC_OscConfig+0x4d8>)
 8003bf0:	f023 0304 	bic.w	r3, r3, #4
 8003bf4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d015      	beq.n	8003c2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfe:	f7fd f91b 	bl	8000e38 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c04:	e00a      	b.n	8003c1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c06:	f7fd f917 	bl	8000e38 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e0bc      	b.n	8003d96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c1c:	4b61      	ldr	r3, [pc, #388]	; (8003da4 <HAL_RCC_OscConfig+0x4d8>)
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0ee      	beq.n	8003c06 <HAL_RCC_OscConfig+0x33a>
 8003c28:	e014      	b.n	8003c54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c2a:	f7fd f905 	bl	8000e38 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c30:	e00a      	b.n	8003c48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c32:	f7fd f901 	bl	8000e38 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e0a6      	b.n	8003d96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c48:	4b56      	ldr	r3, [pc, #344]	; (8003da4 <HAL_RCC_OscConfig+0x4d8>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1ee      	bne.n	8003c32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c54:	7dfb      	ldrb	r3, [r7, #23]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d105      	bne.n	8003c66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c5a:	4b52      	ldr	r3, [pc, #328]	; (8003da4 <HAL_RCC_OscConfig+0x4d8>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	4a51      	ldr	r2, [pc, #324]	; (8003da4 <HAL_RCC_OscConfig+0x4d8>)
 8003c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 8092 	beq.w	8003d94 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c70:	4b4c      	ldr	r3, [pc, #304]	; (8003da4 <HAL_RCC_OscConfig+0x4d8>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 030c 	and.w	r3, r3, #12
 8003c78:	2b08      	cmp	r3, #8
 8003c7a:	d05c      	beq.n	8003d36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d141      	bne.n	8003d08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c84:	4b48      	ldr	r3, [pc, #288]	; (8003da8 <HAL_RCC_OscConfig+0x4dc>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8a:	f7fd f8d5 	bl	8000e38 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c92:	f7fd f8d1 	bl	8000e38 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e078      	b.n	8003d96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca4:	4b3f      	ldr	r3, [pc, #252]	; (8003da4 <HAL_RCC_OscConfig+0x4d8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1f0      	bne.n	8003c92 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	019b      	lsls	r3, r3, #6
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc6:	085b      	lsrs	r3, r3, #1
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	041b      	lsls	r3, r3, #16
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	061b      	lsls	r3, r3, #24
 8003cd4:	4933      	ldr	r1, [pc, #204]	; (8003da4 <HAL_RCC_OscConfig+0x4d8>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cda:	4b33      	ldr	r3, [pc, #204]	; (8003da8 <HAL_RCC_OscConfig+0x4dc>)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce0:	f7fd f8aa 	bl	8000e38 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce8:	f7fd f8a6 	bl	8000e38 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e04d      	b.n	8003d96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfa:	4b2a      	ldr	r3, [pc, #168]	; (8003da4 <HAL_RCC_OscConfig+0x4d8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0f0      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x41c>
 8003d06:	e045      	b.n	8003d94 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d08:	4b27      	ldr	r3, [pc, #156]	; (8003da8 <HAL_RCC_OscConfig+0x4dc>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0e:	f7fd f893 	bl	8000e38 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d16:	f7fd f88f 	bl	8000e38 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e036      	b.n	8003d96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d28:	4b1e      	ldr	r3, [pc, #120]	; (8003da4 <HAL_RCC_OscConfig+0x4d8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1f0      	bne.n	8003d16 <HAL_RCC_OscConfig+0x44a>
 8003d34:	e02e      	b.n	8003d94 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e029      	b.n	8003d96 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d42:	4b18      	ldr	r3, [pc, #96]	; (8003da4 <HAL_RCC_OscConfig+0x4d8>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d11c      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d115      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d10d      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d106      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40007000 	.word	0x40007000
 8003da4:	40023800 	.word	0x40023800
 8003da8:	42470060 	.word	0x42470060

08003dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0cc      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc0:	4b68      	ldr	r3, [pc, #416]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 030f 	and.w	r3, r3, #15
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d90c      	bls.n	8003de8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dce:	4b65      	ldr	r3, [pc, #404]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd6:	4b63      	ldr	r3, [pc, #396]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d001      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e0b8      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d020      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e00:	4b59      	ldr	r3, [pc, #356]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	4a58      	ldr	r2, [pc, #352]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d005      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e18:	4b53      	ldr	r3, [pc, #332]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	4a52      	ldr	r2, [pc, #328]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e24:	4b50      	ldr	r3, [pc, #320]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	494d      	ldr	r1, [pc, #308]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d044      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d107      	bne.n	8003e5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4a:	4b47      	ldr	r3, [pc, #284]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d119      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e07f      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d003      	beq.n	8003e6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	d107      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6a:	4b3f      	ldr	r3, [pc, #252]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d109      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e06f      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7a:	4b3b      	ldr	r3, [pc, #236]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e067      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e8a:	4b37      	ldr	r3, [pc, #220]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f023 0203 	bic.w	r2, r3, #3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	4934      	ldr	r1, [pc, #208]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e9c:	f7fc ffcc 	bl	8000e38 <HAL_GetTick>
 8003ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea2:	e00a      	b.n	8003eba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea4:	f7fc ffc8 	bl	8000e38 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e04f      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eba:	4b2b      	ldr	r3, [pc, #172]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 020c 	and.w	r2, r3, #12
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d1eb      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ecc:	4b25      	ldr	r3, [pc, #148]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 030f 	and.w	r3, r3, #15
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d20c      	bcs.n	8003ef4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eda:	4b22      	ldr	r3, [pc, #136]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee2:	4b20      	ldr	r3, [pc, #128]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d001      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e032      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d008      	beq.n	8003f12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f00:	4b19      	ldr	r3, [pc, #100]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	4916      	ldr	r1, [pc, #88]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d009      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f1e:	4b12      	ldr	r3, [pc, #72]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	490e      	ldr	r1, [pc, #56]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f32:	f000 f821 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 8003f36:	4601      	mov	r1, r0
 8003f38:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	091b      	lsrs	r3, r3, #4
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	4a0a      	ldr	r2, [pc, #40]	; (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003f44:	5cd3      	ldrb	r3, [r2, r3]
 8003f46:	fa21 f303 	lsr.w	r3, r1, r3
 8003f4a:	4a09      	ldr	r2, [pc, #36]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f4e:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <HAL_RCC_ClockConfig+0x1c8>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fc ff2c 	bl	8000db0 <HAL_InitTick>

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40023c00 	.word	0x40023c00
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	0800a720 	.word	0x0800a720
 8003f70:	20000034 	.word	0x20000034
 8003f74:	20000000 	.word	0x20000000

08003f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	607b      	str	r3, [r7, #4]
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	2300      	movs	r3, #0
 8003f88:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f8e:	4b63      	ldr	r3, [pc, #396]	; (800411c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 030c 	and.w	r3, r3, #12
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d007      	beq.n	8003faa <HAL_RCC_GetSysClockFreq+0x32>
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d008      	beq.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x38>
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f040 80b4 	bne.w	800410c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fa4:	4b5e      	ldr	r3, [pc, #376]	; (8004120 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003fa6:	60bb      	str	r3, [r7, #8]
       break;
 8003fa8:	e0b3      	b.n	8004112 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003faa:	4b5e      	ldr	r3, [pc, #376]	; (8004124 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003fac:	60bb      	str	r3, [r7, #8]
      break;
 8003fae:	e0b0      	b.n	8004112 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fb0:	4b5a      	ldr	r3, [pc, #360]	; (800411c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fb8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fba:	4b58      	ldr	r3, [pc, #352]	; (800411c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d04a      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fc6:	4b55      	ldr	r3, [pc, #340]	; (800411c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	099b      	lsrs	r3, r3, #6
 8003fcc:	f04f 0400 	mov.w	r4, #0
 8003fd0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	ea03 0501 	and.w	r5, r3, r1
 8003fdc:	ea04 0602 	and.w	r6, r4, r2
 8003fe0:	4629      	mov	r1, r5
 8003fe2:	4632      	mov	r2, r6
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	f04f 0400 	mov.w	r4, #0
 8003fec:	0154      	lsls	r4, r2, #5
 8003fee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ff2:	014b      	lsls	r3, r1, #5
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4622      	mov	r2, r4
 8003ff8:	1b49      	subs	r1, r1, r5
 8003ffa:	eb62 0206 	sbc.w	r2, r2, r6
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	f04f 0400 	mov.w	r4, #0
 8004006:	0194      	lsls	r4, r2, #6
 8004008:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800400c:	018b      	lsls	r3, r1, #6
 800400e:	1a5b      	subs	r3, r3, r1
 8004010:	eb64 0402 	sbc.w	r4, r4, r2
 8004014:	f04f 0100 	mov.w	r1, #0
 8004018:	f04f 0200 	mov.w	r2, #0
 800401c:	00e2      	lsls	r2, r4, #3
 800401e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004022:	00d9      	lsls	r1, r3, #3
 8004024:	460b      	mov	r3, r1
 8004026:	4614      	mov	r4, r2
 8004028:	195b      	adds	r3, r3, r5
 800402a:	eb44 0406 	adc.w	r4, r4, r6
 800402e:	f04f 0100 	mov.w	r1, #0
 8004032:	f04f 0200 	mov.w	r2, #0
 8004036:	0262      	lsls	r2, r4, #9
 8004038:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800403c:	0259      	lsls	r1, r3, #9
 800403e:	460b      	mov	r3, r1
 8004040:	4614      	mov	r4, r2
 8004042:	4618      	mov	r0, r3
 8004044:	4621      	mov	r1, r4
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f04f 0400 	mov.w	r4, #0
 800404c:	461a      	mov	r2, r3
 800404e:	4623      	mov	r3, r4
 8004050:	f7fc fd0c 	bl	8000a6c <__aeabi_uldivmod>
 8004054:	4603      	mov	r3, r0
 8004056:	460c      	mov	r4, r1
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	e049      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800405c:	4b2f      	ldr	r3, [pc, #188]	; (800411c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	099b      	lsrs	r3, r3, #6
 8004062:	f04f 0400 	mov.w	r4, #0
 8004066:	f240 11ff 	movw	r1, #511	; 0x1ff
 800406a:	f04f 0200 	mov.w	r2, #0
 800406e:	ea03 0501 	and.w	r5, r3, r1
 8004072:	ea04 0602 	and.w	r6, r4, r2
 8004076:	4629      	mov	r1, r5
 8004078:	4632      	mov	r2, r6
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	f04f 0400 	mov.w	r4, #0
 8004082:	0154      	lsls	r4, r2, #5
 8004084:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004088:	014b      	lsls	r3, r1, #5
 800408a:	4619      	mov	r1, r3
 800408c:	4622      	mov	r2, r4
 800408e:	1b49      	subs	r1, r1, r5
 8004090:	eb62 0206 	sbc.w	r2, r2, r6
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	f04f 0400 	mov.w	r4, #0
 800409c:	0194      	lsls	r4, r2, #6
 800409e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80040a2:	018b      	lsls	r3, r1, #6
 80040a4:	1a5b      	subs	r3, r3, r1
 80040a6:	eb64 0402 	sbc.w	r4, r4, r2
 80040aa:	f04f 0100 	mov.w	r1, #0
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	00e2      	lsls	r2, r4, #3
 80040b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040b8:	00d9      	lsls	r1, r3, #3
 80040ba:	460b      	mov	r3, r1
 80040bc:	4614      	mov	r4, r2
 80040be:	195b      	adds	r3, r3, r5
 80040c0:	eb44 0406 	adc.w	r4, r4, r6
 80040c4:	f04f 0100 	mov.w	r1, #0
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	02a2      	lsls	r2, r4, #10
 80040ce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80040d2:	0299      	lsls	r1, r3, #10
 80040d4:	460b      	mov	r3, r1
 80040d6:	4614      	mov	r4, r2
 80040d8:	4618      	mov	r0, r3
 80040da:	4621      	mov	r1, r4
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f04f 0400 	mov.w	r4, #0
 80040e2:	461a      	mov	r2, r3
 80040e4:	4623      	mov	r3, r4
 80040e6:	f7fc fcc1 	bl	8000a6c <__aeabi_uldivmod>
 80040ea:	4603      	mov	r3, r0
 80040ec:	460c      	mov	r4, r1
 80040ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040f0:	4b0a      	ldr	r3, [pc, #40]	; (800411c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	0c1b      	lsrs	r3, r3, #16
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	3301      	adds	r3, #1
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	fbb2 f3f3 	udiv	r3, r2, r3
 8004108:	60bb      	str	r3, [r7, #8]
      break;
 800410a:	e002      	b.n	8004112 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800410c:	4b04      	ldr	r3, [pc, #16]	; (8004120 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800410e:	60bb      	str	r3, [r7, #8]
      break;
 8004110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004112:	68bb      	ldr	r3, [r7, #8]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800411c:	40023800 	.word	0x40023800
 8004120:	00f42400 	.word	0x00f42400
 8004124:	007a1200 	.word	0x007a1200

08004128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800412c:	4b03      	ldr	r3, [pc, #12]	; (800413c <HAL_RCC_GetHCLKFreq+0x14>)
 800412e:	681b      	ldr	r3, [r3, #0]
}
 8004130:	4618      	mov	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	20000034 	.word	0x20000034

08004140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004144:	f7ff fff0 	bl	8004128 <HAL_RCC_GetHCLKFreq>
 8004148:	4601      	mov	r1, r0
 800414a:	4b05      	ldr	r3, [pc, #20]	; (8004160 <HAL_RCC_GetPCLK1Freq+0x20>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	0a9b      	lsrs	r3, r3, #10
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	4a03      	ldr	r2, [pc, #12]	; (8004164 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004156:	5cd3      	ldrb	r3, [r2, r3]
 8004158:	fa21 f303 	lsr.w	r3, r1, r3
}
 800415c:	4618      	mov	r0, r3
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40023800 	.word	0x40023800
 8004164:	0800a730 	.word	0x0800a730

08004168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800416c:	f7ff ffdc 	bl	8004128 <HAL_RCC_GetHCLKFreq>
 8004170:	4601      	mov	r1, r0
 8004172:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	0b5b      	lsrs	r3, r3, #13
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	4a03      	ldr	r2, [pc, #12]	; (800418c <HAL_RCC_GetPCLK2Freq+0x24>)
 800417e:	5cd3      	ldrb	r3, [r2, r3]
 8004180:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004184:	4618      	mov	r0, r3
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40023800 	.word	0x40023800
 800418c:	0800a730 	.word	0x0800a730

08004190 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d105      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d035      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041b8:	4b62      	ldr	r3, [pc, #392]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041be:	f7fc fe3b 	bl	8000e38 <HAL_GetTick>
 80041c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041c4:	e008      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041c6:	f7fc fe37 	bl	8000e38 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e0b0      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041d8:	4b5b      	ldr	r3, [pc, #364]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1f0      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	019a      	lsls	r2, r3, #6
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	071b      	lsls	r3, r3, #28
 80041f0:	4955      	ldr	r1, [pc, #340]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041f8:	4b52      	ldr	r3, [pc, #328]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041fe:	f7fc fe1b 	bl	8000e38 <HAL_GetTick>
 8004202:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004204:	e008      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004206:	f7fc fe17 	bl	8000e38 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e090      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004218:	4b4b      	ldr	r3, [pc, #300]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8083 	beq.w	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004232:	2300      	movs	r3, #0
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	4b44      	ldr	r3, [pc, #272]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	4a43      	ldr	r2, [pc, #268]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800423c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004240:	6413      	str	r3, [r2, #64]	; 0x40
 8004242:	4b41      	ldr	r3, [pc, #260]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800424e:	4b3f      	ldr	r3, [pc, #252]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a3e      	ldr	r2, [pc, #248]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004258:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800425a:	f7fc fded 	bl	8000e38 <HAL_GetTick>
 800425e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004260:	e008      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004262:	f7fc fde9 	bl	8000e38 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e062      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004274:	4b35      	ldr	r3, [pc, #212]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0f0      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004280:	4b31      	ldr	r3, [pc, #196]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004284:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004288:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d02f      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	429a      	cmp	r2, r3
 800429c:	d028      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800429e:	4b2a      	ldr	r3, [pc, #168]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042a8:	4b29      	ldr	r3, [pc, #164]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042ae:	4b28      	ldr	r3, [pc, #160]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80042b4:	4a24      	ldr	r2, [pc, #144]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042ba:	4b23      	ldr	r3, [pc, #140]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d114      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80042c6:	f7fc fdb7 	bl	8000e38 <HAL_GetTick>
 80042ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042cc:	e00a      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ce:	f7fc fdb3 	bl	8000e38 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042dc:	4293      	cmp	r3, r2
 80042de:	d901      	bls.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e02a      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e4:	4b18      	ldr	r3, [pc, #96]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0ee      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042fc:	d10d      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80042fe:	4b12      	ldr	r3, [pc, #72]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800430e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004312:	490d      	ldr	r1, [pc, #52]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004314:	4313      	orrs	r3, r2
 8004316:	608b      	str	r3, [r1, #8]
 8004318:	e005      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800431a:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	4a0a      	ldr	r2, [pc, #40]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004320:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004324:	6093      	str	r3, [r2, #8]
 8004326:	4b08      	ldr	r3, [pc, #32]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004328:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004332:	4905      	ldr	r1, [pc, #20]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004334:	4313      	orrs	r3, r2
 8004336:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	42470068 	.word	0x42470068
 8004348:	40023800 	.word	0x40023800
 800434c:	40007000 	.word	0x40007000
 8004350:	42470e40 	.word	0x42470e40

08004354 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d13d      	bne.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004372:	4b22      	ldr	r3, [pc, #136]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800437a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d004      	beq.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004382:	2b01      	cmp	r3, #1
 8004384:	d12f      	bne.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004386:	4b1e      	ldr	r3, [pc, #120]	; (8004400 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004388:	617b      	str	r3, [r7, #20]
          break;
 800438a:	e02f      	b.n	80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800438c:	4b1b      	ldr	r3, [pc, #108]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004394:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004398:	d108      	bne.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800439a:	4b18      	ldr	r3, [pc, #96]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043a2:	4a18      	ldr	r2, [pc, #96]	; (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	e007      	b.n	80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043ac:	4b13      	ldr	r3, [pc, #76]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043b4:	4a14      	ldr	r2, [pc, #80]	; (8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80043b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ba:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80043bc:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c2:	099b      	lsrs	r3, r3, #6
 80043c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	fb02 f303 	mul.w	r3, r2, r3
 80043ce:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80043d0:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043d6:	0f1b      	lsrs	r3, r3, #28
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e2:	617b      	str	r3, [r7, #20]
          break;
 80043e4:	e002      	b.n	80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	617b      	str	r3, [r7, #20]
          break;
 80043ea:	bf00      	nop
        }
      }
      break;
 80043ec:	bf00      	nop
    }
  }
  return frequency;
 80043ee:	697b      	ldr	r3, [r7, #20]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	371c      	adds	r7, #28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	40023800 	.word	0x40023800
 8004400:	00bb8000 	.word	0x00bb8000
 8004404:	007a1200 	.word	0x007a1200
 8004408:	00f42400 	.word	0x00f42400

0800440c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e056      	b.n	80044cc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d106      	bne.n	800443e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f004 fe83 	bl	8009144 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2202      	movs	r2, #2
 8004442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004454:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	ea42 0103 	orr.w	r1, r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	0c1b      	lsrs	r3, r3, #16
 800449c:	f003 0104 	and.w	r1, r3, #4
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	69da      	ldr	r2, [r3, #28]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e01d      	b.n	8004522 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d106      	bne.n	8004500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f004 fe6a 	bl	80091d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2202      	movs	r2, #2
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3304      	adds	r3, #4
 8004510:	4619      	mov	r1, r3
 8004512:	4610      	mov	r0, r2
 8004514:	f000 fb34 	bl	8004b80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e01d      	b.n	8004578 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d106      	bne.n	8004556 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f815 	bl	8004580 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2202      	movs	r2, #2
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	3304      	adds	r3, #4
 8004566:	4619      	mov	r1, r3
 8004568:	4610      	mov	r0, r2
 800456a:	f000 fb09 	bl	8004b80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2201      	movs	r2, #1
 80045a4:	6839      	ldr	r1, [r7, #0]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fdd4 	bl	8005154 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a15      	ldr	r2, [pc, #84]	; (8004608 <HAL_TIM_PWM_Start+0x74>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d004      	beq.n	80045c0 <HAL_TIM_PWM_Start+0x2c>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a14      	ldr	r2, [pc, #80]	; (800460c <HAL_TIM_PWM_Start+0x78>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d101      	bne.n	80045c4 <HAL_TIM_PWM_Start+0x30>
 80045c0:	2301      	movs	r3, #1
 80045c2:	e000      	b.n	80045c6 <HAL_TIM_PWM_Start+0x32>
 80045c4:	2300      	movs	r3, #0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d007      	beq.n	80045da <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b06      	cmp	r3, #6
 80045ea:	d007      	beq.n	80045fc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0201 	orr.w	r2, r2, #1
 80045fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40010000 	.word	0x40010000
 800460c:	40010400 	.word	0x40010400

08004610 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b02      	cmp	r3, #2
 8004624:	d122      	bne.n	800466c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b02      	cmp	r3, #2
 8004632:	d11b      	bne.n	800466c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0202 	mvn.w	r2, #2
 800463c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 fa75 	bl	8004b42 <HAL_TIM_IC_CaptureCallback>
 8004658:	e005      	b.n	8004666 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fa67 	bl	8004b2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 fa78 	bl	8004b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b04      	cmp	r3, #4
 8004678:	d122      	bne.n	80046c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b04      	cmp	r3, #4
 8004686:	d11b      	bne.n	80046c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f06f 0204 	mvn.w	r2, #4
 8004690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2202      	movs	r2, #2
 8004696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fa4b 	bl	8004b42 <HAL_TIM_IC_CaptureCallback>
 80046ac:	e005      	b.n	80046ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fa3d 	bl	8004b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 fa4e 	bl	8004b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	d122      	bne.n	8004714 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d11b      	bne.n	8004714 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f06f 0208 	mvn.w	r2, #8
 80046e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2204      	movs	r2, #4
 80046ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 fa21 	bl	8004b42 <HAL_TIM_IC_CaptureCallback>
 8004700:	e005      	b.n	800470e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fa13 	bl	8004b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 fa24 	bl	8004b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	f003 0310 	and.w	r3, r3, #16
 800471e:	2b10      	cmp	r3, #16
 8004720:	d122      	bne.n	8004768 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f003 0310 	and.w	r3, r3, #16
 800472c:	2b10      	cmp	r3, #16
 800472e:	d11b      	bne.n	8004768 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f06f 0210 	mvn.w	r2, #16
 8004738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2208      	movs	r2, #8
 800473e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f9f7 	bl	8004b42 <HAL_TIM_IC_CaptureCallback>
 8004754:	e005      	b.n	8004762 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f9e9 	bl	8004b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f9fa 	bl	8004b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b01      	cmp	r3, #1
 8004774:	d10e      	bne.n	8004794 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b01      	cmp	r3, #1
 8004782:	d107      	bne.n	8004794 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f06f 0201 	mvn.w	r2, #1
 800478c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f9c3 	bl	8004b1a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479e:	2b80      	cmp	r3, #128	; 0x80
 80047a0:	d10e      	bne.n	80047c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ac:	2b80      	cmp	r3, #128	; 0x80
 80047ae:	d107      	bne.n	80047c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fd76 	bl	80052ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ca:	2b40      	cmp	r3, #64	; 0x40
 80047cc:	d10e      	bne.n	80047ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d8:	2b40      	cmp	r3, #64	; 0x40
 80047da:	d107      	bne.n	80047ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f9bf 	bl	8004b6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	2b20      	cmp	r3, #32
 80047f8:	d10e      	bne.n	8004818 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f003 0320 	and.w	r3, r3, #32
 8004804:	2b20      	cmp	r3, #32
 8004806:	d107      	bne.n	8004818 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f06f 0220 	mvn.w	r2, #32
 8004810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fd40 	bl	8005298 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004818:	bf00      	nop
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004832:	2b01      	cmp	r3, #1
 8004834:	d101      	bne.n	800483a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004836:	2302      	movs	r3, #2
 8004838:	e0b4      	b.n	80049a4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2202      	movs	r2, #2
 8004846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b0c      	cmp	r3, #12
 800484e:	f200 809f 	bhi.w	8004990 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004852:	a201      	add	r2, pc, #4	; (adr r2, 8004858 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004858:	0800488d 	.word	0x0800488d
 800485c:	08004991 	.word	0x08004991
 8004860:	08004991 	.word	0x08004991
 8004864:	08004991 	.word	0x08004991
 8004868:	080048cd 	.word	0x080048cd
 800486c:	08004991 	.word	0x08004991
 8004870:	08004991 	.word	0x08004991
 8004874:	08004991 	.word	0x08004991
 8004878:	0800490f 	.word	0x0800490f
 800487c:	08004991 	.word	0x08004991
 8004880:	08004991 	.word	0x08004991
 8004884:	08004991 	.word	0x08004991
 8004888:	0800494f 	.word	0x0800494f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68b9      	ldr	r1, [r7, #8]
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fa14 	bl	8004cc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699a      	ldr	r2, [r3, #24]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0208 	orr.w	r2, r2, #8
 80048a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699a      	ldr	r2, [r3, #24]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0204 	bic.w	r2, r2, #4
 80048b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6999      	ldr	r1, [r3, #24]
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	691a      	ldr	r2, [r3, #16]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	619a      	str	r2, [r3, #24]
      break;
 80048ca:	e062      	b.n	8004992 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68b9      	ldr	r1, [r7, #8]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fa64 	bl	8004da0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699a      	ldr	r2, [r3, #24]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699a      	ldr	r2, [r3, #24]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6999      	ldr	r1, [r3, #24]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	021a      	lsls	r2, r3, #8
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	619a      	str	r2, [r3, #24]
      break;
 800490c:	e041      	b.n	8004992 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68b9      	ldr	r1, [r7, #8]
 8004914:	4618      	mov	r0, r3
 8004916:	f000 fab9 	bl	8004e8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	69da      	ldr	r2, [r3, #28]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f042 0208 	orr.w	r2, r2, #8
 8004928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69da      	ldr	r2, [r3, #28]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0204 	bic.w	r2, r2, #4
 8004938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69d9      	ldr	r1, [r3, #28]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	61da      	str	r2, [r3, #28]
      break;
 800494c:	e021      	b.n	8004992 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68b9      	ldr	r1, [r7, #8]
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fb0d 	bl	8004f74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	69da      	ldr	r2, [r3, #28]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004968:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	69da      	ldr	r2, [r3, #28]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004978:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69d9      	ldr	r1, [r3, #28]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	021a      	lsls	r2, r3, #8
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	61da      	str	r2, [r3, #28]
      break;
 800498e:	e000      	b.n	8004992 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004990:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <HAL_TIM_ConfigClockSource+0x18>
 80049c0:	2302      	movs	r3, #2
 80049c2:	e0a6      	b.n	8004b12 <HAL_TIM_ConfigClockSource+0x166>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b40      	cmp	r3, #64	; 0x40
 80049fa:	d067      	beq.n	8004acc <HAL_TIM_ConfigClockSource+0x120>
 80049fc:	2b40      	cmp	r3, #64	; 0x40
 80049fe:	d80b      	bhi.n	8004a18 <HAL_TIM_ConfigClockSource+0x6c>
 8004a00:	2b10      	cmp	r3, #16
 8004a02:	d073      	beq.n	8004aec <HAL_TIM_ConfigClockSource+0x140>
 8004a04:	2b10      	cmp	r3, #16
 8004a06:	d802      	bhi.n	8004a0e <HAL_TIM_ConfigClockSource+0x62>
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d06f      	beq.n	8004aec <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004a0c:	e078      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004a0e:	2b20      	cmp	r3, #32
 8004a10:	d06c      	beq.n	8004aec <HAL_TIM_ConfigClockSource+0x140>
 8004a12:	2b30      	cmp	r3, #48	; 0x30
 8004a14:	d06a      	beq.n	8004aec <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004a16:	e073      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004a18:	2b70      	cmp	r3, #112	; 0x70
 8004a1a:	d00d      	beq.n	8004a38 <HAL_TIM_ConfigClockSource+0x8c>
 8004a1c:	2b70      	cmp	r3, #112	; 0x70
 8004a1e:	d804      	bhi.n	8004a2a <HAL_TIM_ConfigClockSource+0x7e>
 8004a20:	2b50      	cmp	r3, #80	; 0x50
 8004a22:	d033      	beq.n	8004a8c <HAL_TIM_ConfigClockSource+0xe0>
 8004a24:	2b60      	cmp	r3, #96	; 0x60
 8004a26:	d041      	beq.n	8004aac <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004a28:	e06a      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2e:	d066      	beq.n	8004afe <HAL_TIM_ConfigClockSource+0x152>
 8004a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a34:	d017      	beq.n	8004a66 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004a36:	e063      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6818      	ldr	r0, [r3, #0]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	6899      	ldr	r1, [r3, #8]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f000 fb64 	bl	8005114 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a5a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	609a      	str	r2, [r3, #8]
      break;
 8004a64:	e04c      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	6899      	ldr	r1, [r3, #8]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f000 fb4d 	bl	8005114 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a88:	609a      	str	r2, [r3, #8]
      break;
 8004a8a:	e039      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6818      	ldr	r0, [r3, #0]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	6859      	ldr	r1, [r3, #4]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	f000 fac1 	bl	8005020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2150      	movs	r1, #80	; 0x50
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 fb1a 	bl	80050de <TIM_ITRx_SetConfig>
      break;
 8004aaa:	e029      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6818      	ldr	r0, [r3, #0]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	6859      	ldr	r1, [r3, #4]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	f000 fae0 	bl	800507e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2160      	movs	r1, #96	; 0x60
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fb0a 	bl	80050de <TIM_ITRx_SetConfig>
      break;
 8004aca:	e019      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6818      	ldr	r0, [r3, #0]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	6859      	ldr	r1, [r3, #4]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	f000 faa1 	bl	8005020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2140      	movs	r1, #64	; 0x40
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 fafa 	bl	80050de <TIM_ITRx_SetConfig>
      break;
 8004aea:	e009      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4619      	mov	r1, r3
 8004af6:	4610      	mov	r0, r2
 8004af8:	f000 faf1 	bl	80050de <TIM_ITRx_SetConfig>
      break;
 8004afc:	e000      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004afe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
	...

08004b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a40      	ldr	r2, [pc, #256]	; (8004c94 <TIM_Base_SetConfig+0x114>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d013      	beq.n	8004bc0 <TIM_Base_SetConfig+0x40>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9e:	d00f      	beq.n	8004bc0 <TIM_Base_SetConfig+0x40>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a3d      	ldr	r2, [pc, #244]	; (8004c98 <TIM_Base_SetConfig+0x118>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00b      	beq.n	8004bc0 <TIM_Base_SetConfig+0x40>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a3c      	ldr	r2, [pc, #240]	; (8004c9c <TIM_Base_SetConfig+0x11c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d007      	beq.n	8004bc0 <TIM_Base_SetConfig+0x40>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a3b      	ldr	r2, [pc, #236]	; (8004ca0 <TIM_Base_SetConfig+0x120>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d003      	beq.n	8004bc0 <TIM_Base_SetConfig+0x40>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a3a      	ldr	r2, [pc, #232]	; (8004ca4 <TIM_Base_SetConfig+0x124>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d108      	bne.n	8004bd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a2f      	ldr	r2, [pc, #188]	; (8004c94 <TIM_Base_SetConfig+0x114>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d02b      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be0:	d027      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a2c      	ldr	r2, [pc, #176]	; (8004c98 <TIM_Base_SetConfig+0x118>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d023      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a2b      	ldr	r2, [pc, #172]	; (8004c9c <TIM_Base_SetConfig+0x11c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d01f      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a2a      	ldr	r2, [pc, #168]	; (8004ca0 <TIM_Base_SetConfig+0x120>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d01b      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a29      	ldr	r2, [pc, #164]	; (8004ca4 <TIM_Base_SetConfig+0x124>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d017      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a28      	ldr	r2, [pc, #160]	; (8004ca8 <TIM_Base_SetConfig+0x128>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d013      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a27      	ldr	r2, [pc, #156]	; (8004cac <TIM_Base_SetConfig+0x12c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d00f      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a26      	ldr	r2, [pc, #152]	; (8004cb0 <TIM_Base_SetConfig+0x130>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d00b      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a25      	ldr	r2, [pc, #148]	; (8004cb4 <TIM_Base_SetConfig+0x134>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d007      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a24      	ldr	r2, [pc, #144]	; (8004cb8 <TIM_Base_SetConfig+0x138>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d003      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a23      	ldr	r2, [pc, #140]	; (8004cbc <TIM_Base_SetConfig+0x13c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d108      	bne.n	8004c44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a0a      	ldr	r2, [pc, #40]	; (8004c94 <TIM_Base_SetConfig+0x114>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d003      	beq.n	8004c78 <TIM_Base_SetConfig+0xf8>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a0c      	ldr	r2, [pc, #48]	; (8004ca4 <TIM_Base_SetConfig+0x124>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d103      	bne.n	8004c80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	615a      	str	r2, [r3, #20]
}
 8004c86:	bf00      	nop
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40010000 	.word	0x40010000
 8004c98:	40000400 	.word	0x40000400
 8004c9c:	40000800 	.word	0x40000800
 8004ca0:	40000c00 	.word	0x40000c00
 8004ca4:	40010400 	.word	0x40010400
 8004ca8:	40014000 	.word	0x40014000
 8004cac:	40014400 	.word	0x40014400
 8004cb0:	40014800 	.word	0x40014800
 8004cb4:	40001800 	.word	0x40001800
 8004cb8:	40001c00 	.word	0x40001c00
 8004cbc:	40002000 	.word	0x40002000

08004cc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	f023 0201 	bic.w	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f023 0303 	bic.w	r3, r3, #3
 8004cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f023 0302 	bic.w	r3, r3, #2
 8004d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a20      	ldr	r2, [pc, #128]	; (8004d98 <TIM_OC1_SetConfig+0xd8>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d003      	beq.n	8004d24 <TIM_OC1_SetConfig+0x64>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a1f      	ldr	r2, [pc, #124]	; (8004d9c <TIM_OC1_SetConfig+0xdc>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d10c      	bne.n	8004d3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f023 0308 	bic.w	r3, r3, #8
 8004d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f023 0304 	bic.w	r3, r3, #4
 8004d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a15      	ldr	r2, [pc, #84]	; (8004d98 <TIM_OC1_SetConfig+0xd8>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d003      	beq.n	8004d4e <TIM_OC1_SetConfig+0x8e>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a14      	ldr	r2, [pc, #80]	; (8004d9c <TIM_OC1_SetConfig+0xdc>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d111      	bne.n	8004d72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	621a      	str	r2, [r3, #32]
}
 8004d8c:	bf00      	nop
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	40010000 	.word	0x40010000
 8004d9c:	40010400 	.word	0x40010400

08004da0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	f023 0210 	bic.w	r2, r3, #16
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	021b      	lsls	r3, r3, #8
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f023 0320 	bic.w	r3, r3, #32
 8004dea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a22      	ldr	r2, [pc, #136]	; (8004e84 <TIM_OC2_SetConfig+0xe4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d003      	beq.n	8004e08 <TIM_OC2_SetConfig+0x68>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a21      	ldr	r2, [pc, #132]	; (8004e88 <TIM_OC2_SetConfig+0xe8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d10d      	bne.n	8004e24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	011b      	lsls	r3, r3, #4
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a17      	ldr	r2, [pc, #92]	; (8004e84 <TIM_OC2_SetConfig+0xe4>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d003      	beq.n	8004e34 <TIM_OC2_SetConfig+0x94>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a16      	ldr	r2, [pc, #88]	; (8004e88 <TIM_OC2_SetConfig+0xe8>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d113      	bne.n	8004e5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	621a      	str	r2, [r3, #32]
}
 8004e76:	bf00      	nop
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	40010000 	.word	0x40010000
 8004e88:	40010400 	.word	0x40010400

08004e8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 0303 	bic.w	r3, r3, #3
 8004ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	021b      	lsls	r3, r3, #8
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a21      	ldr	r2, [pc, #132]	; (8004f6c <TIM_OC3_SetConfig+0xe0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d003      	beq.n	8004ef2 <TIM_OC3_SetConfig+0x66>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a20      	ldr	r2, [pc, #128]	; (8004f70 <TIM_OC3_SetConfig+0xe4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d10d      	bne.n	8004f0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	021b      	lsls	r3, r3, #8
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a16      	ldr	r2, [pc, #88]	; (8004f6c <TIM_OC3_SetConfig+0xe0>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d003      	beq.n	8004f1e <TIM_OC3_SetConfig+0x92>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a15      	ldr	r2, [pc, #84]	; (8004f70 <TIM_OC3_SetConfig+0xe4>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d113      	bne.n	8004f46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	011b      	lsls	r3, r3, #4
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	621a      	str	r2, [r3, #32]
}
 8004f60:	bf00      	nop
 8004f62:	371c      	adds	r7, #28
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	40010000 	.word	0x40010000
 8004f70:	40010400 	.word	0x40010400

08004f74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	021b      	lsls	r3, r3, #8
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	031b      	lsls	r3, r3, #12
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a12      	ldr	r2, [pc, #72]	; (8005018 <TIM_OC4_SetConfig+0xa4>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d003      	beq.n	8004fdc <TIM_OC4_SetConfig+0x68>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a11      	ldr	r2, [pc, #68]	; (800501c <TIM_OC4_SetConfig+0xa8>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d109      	bne.n	8004ff0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fe2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	019b      	lsls	r3, r3, #6
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	621a      	str	r2, [r3, #32]
}
 800500a:	bf00      	nop
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40010000 	.word	0x40010000
 800501c:	40010400 	.word	0x40010400

08005020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	f023 0201 	bic.w	r2, r3, #1
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800504a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f023 030a 	bic.w	r3, r3, #10
 800505c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	4313      	orrs	r3, r2
 8005064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	621a      	str	r2, [r3, #32]
}
 8005072:	bf00      	nop
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800507e:	b480      	push	{r7}
 8005080:	b087      	sub	sp, #28
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	f023 0210 	bic.w	r2, r3, #16
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	031b      	lsls	r3, r3, #12
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	621a      	str	r2, [r3, #32]
}
 80050d2:	bf00      	nop
 80050d4:	371c      	adds	r7, #28
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050de:	b480      	push	{r7}
 80050e0:	b085      	sub	sp, #20
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f043 0307 	orr.w	r3, r3, #7
 8005100:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	609a      	str	r2, [r3, #8]
}
 8005108:	bf00      	nop
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800512e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	021a      	lsls	r2, r3, #8
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	431a      	orrs	r2, r3
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	4313      	orrs	r3, r2
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	4313      	orrs	r3, r2
 8005140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	609a      	str	r2, [r3, #8]
}
 8005148:	bf00      	nop
 800514a:	371c      	adds	r7, #28
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f003 031f 	and.w	r3, r3, #31
 8005166:	2201      	movs	r2, #1
 8005168:	fa02 f303 	lsl.w	r3, r2, r3
 800516c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a1a      	ldr	r2, [r3, #32]
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	43db      	mvns	r3, r3
 8005176:	401a      	ands	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6a1a      	ldr	r2, [r3, #32]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f003 031f 	and.w	r3, r3, #31
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	fa01 f303 	lsl.w	r3, r1, r3
 800518c:	431a      	orrs	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	621a      	str	r2, [r3, #32]
}
 8005192:	bf00      	nop
 8005194:	371c      	adds	r7, #28
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
	...

080051a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e05a      	b.n	800526e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a21      	ldr	r2, [pc, #132]	; (800527c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d022      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005204:	d01d      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a1d      	ldr	r2, [pc, #116]	; (8005280 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d018      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a1b      	ldr	r2, [pc, #108]	; (8005284 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d013      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a1a      	ldr	r2, [pc, #104]	; (8005288 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d00e      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a18      	ldr	r2, [pc, #96]	; (800528c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d009      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a17      	ldr	r2, [pc, #92]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d004      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a15      	ldr	r2, [pc, #84]	; (8005294 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d10c      	bne.n	800525c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005248:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	4313      	orrs	r3, r2
 8005252:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40010000 	.word	0x40010000
 8005280:	40000400 	.word	0x40000400
 8005284:	40000800 	.word	0x40000800
 8005288:	40000c00 	.word	0x40000c00
 800528c:	40010400 	.word	0x40010400
 8005290:	40014000 	.word	0x40014000
 8005294:	40001800 	.word	0x40001800

08005298 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e03f      	b.n	8005352 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f003 ffec 	bl	80092c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2224      	movs	r2, #36	; 0x24
 80052f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005302:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 f9b1 	bl	800566c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	691a      	ldr	r2, [r3, #16]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005318:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695a      	ldr	r2, [r3, #20]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005328:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68da      	ldr	r2, [r3, #12]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005338:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2220      	movs	r2, #32
 8005344:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2220      	movs	r2, #32
 800534c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b088      	sub	sp, #32
 800535e:	af02      	add	r7, sp, #8
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	603b      	str	r3, [r7, #0]
 8005366:	4613      	mov	r3, r2
 8005368:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b20      	cmp	r3, #32
 8005378:	f040 8083 	bne.w	8005482 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <HAL_UART_Transmit+0x2e>
 8005382:	88fb      	ldrh	r3, [r7, #6]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e07b      	b.n	8005484 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005392:	2b01      	cmp	r3, #1
 8005394:	d101      	bne.n	800539a <HAL_UART_Transmit+0x40>
 8005396:	2302      	movs	r3, #2
 8005398:	e074      	b.n	8005484 <HAL_UART_Transmit+0x12a>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2221      	movs	r2, #33	; 0x21
 80053ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80053b0:	f7fb fd42 	bl	8000e38 <HAL_GetTick>
 80053b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	88fa      	ldrh	r2, [r7, #6]
 80053ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	88fa      	ldrh	r2, [r7, #6]
 80053c0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80053ca:	e042      	b.n	8005452 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	3b01      	subs	r3, #1
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e2:	d122      	bne.n	800542a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2200      	movs	r2, #0
 80053ec:	2180      	movs	r1, #128	; 0x80
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f000 f8f2 	bl	80055d8 <UART_WaitOnFlagUntilTimeout>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e042      	b.n	8005484 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	461a      	mov	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005410:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d103      	bne.n	8005422 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	3302      	adds	r3, #2
 800541e:	60bb      	str	r3, [r7, #8]
 8005420:	e017      	b.n	8005452 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	3301      	adds	r3, #1
 8005426:	60bb      	str	r3, [r7, #8]
 8005428:	e013      	b.n	8005452 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2200      	movs	r2, #0
 8005432:	2180      	movs	r1, #128	; 0x80
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 f8cf 	bl	80055d8 <UART_WaitOnFlagUntilTimeout>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e01f      	b.n	8005484 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	1c5a      	adds	r2, r3, #1
 8005448:	60ba      	str	r2, [r7, #8]
 800544a:	781a      	ldrb	r2, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005456:	b29b      	uxth	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1b7      	bne.n	80053cc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	2200      	movs	r2, #0
 8005464:	2140      	movs	r1, #64	; 0x40
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 f8b6 	bl	80055d8 <UART_WaitOnFlagUntilTimeout>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e006      	b.n	8005484 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2220      	movs	r2, #32
 800547a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800547e:	2300      	movs	r3, #0
 8005480:	e000      	b.n	8005484 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005482:	2302      	movs	r3, #2
  }
}
 8005484:	4618      	mov	r0, r3
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b088      	sub	sp, #32
 8005490:	af02      	add	r7, sp, #8
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	4613      	mov	r3, r2
 800549a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	f040 8090 	bne.w	80055ce <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <HAL_UART_Receive+0x2e>
 80054b4:	88fb      	ldrh	r3, [r7, #6]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e088      	b.n	80055d0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <HAL_UART_Receive+0x40>
 80054c8:	2302      	movs	r3, #2
 80054ca:	e081      	b.n	80055d0 <HAL_UART_Receive+0x144>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2222      	movs	r2, #34	; 0x22
 80054de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80054e2:	f7fb fca9 	bl	8000e38 <HAL_GetTick>
 80054e6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	88fa      	ldrh	r2, [r7, #6]
 80054ec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	88fa      	ldrh	r2, [r7, #6]
 80054f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80054fc:	e05c      	b.n	80055b8 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005502:	b29b      	uxth	r3, r3
 8005504:	3b01      	subs	r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005514:	d12b      	bne.n	800556e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2200      	movs	r2, #0
 800551e:	2120      	movs	r1, #32
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f000 f859 	bl	80055d8 <UART_WaitOnFlagUntilTimeout>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e04f      	b.n	80055d0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10c      	bne.n	8005556 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	b29b      	uxth	r3, r3
 8005544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005548:	b29a      	uxth	r2, r3
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	3302      	adds	r3, #2
 8005552:	60bb      	str	r3, [r7, #8]
 8005554:	e030      	b.n	80055b8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	b29b      	uxth	r3, r3
 800555e:	b2db      	uxtb	r3, r3
 8005560:	b29a      	uxth	r2, r3
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	3301      	adds	r3, #1
 800556a:	60bb      	str	r3, [r7, #8]
 800556c:	e024      	b.n	80055b8 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	2200      	movs	r2, #0
 8005576:	2120      	movs	r1, #32
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 f82d 	bl	80055d8 <UART_WaitOnFlagUntilTimeout>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e023      	b.n	80055d0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d108      	bne.n	80055a2 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6859      	ldr	r1, [r3, #4]
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	1c5a      	adds	r2, r3, #1
 800559a:	60ba      	str	r2, [r7, #8]
 800559c:	b2ca      	uxtb	r2, r1
 800559e:	701a      	strb	r2, [r3, #0]
 80055a0:	e00a      	b.n	80055b8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	1c59      	adds	r1, r3, #1
 80055ae:	60b9      	str	r1, [r7, #8]
 80055b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055bc:	b29b      	uxth	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d19d      	bne.n	80054fe <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	e000      	b.n	80055d0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80055ce:	2302      	movs	r3, #2
  }
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	4613      	mov	r3, r2
 80055e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055e8:	e02c      	b.n	8005644 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055f0:	d028      	beq.n	8005644 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d007      	beq.n	8005608 <UART_WaitOnFlagUntilTimeout+0x30>
 80055f8:	f7fb fc1e 	bl	8000e38 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	429a      	cmp	r2, r3
 8005606:	d21d      	bcs.n	8005644 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005616:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695a      	ldr	r2, [r3, #20]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0201 	bic.w	r2, r2, #1
 8005626:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2220      	movs	r2, #32
 8005634:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e00f      	b.n	8005664 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	4013      	ands	r3, r2
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	429a      	cmp	r2, r3
 8005652:	bf0c      	ite	eq
 8005654:	2301      	moveq	r3, #1
 8005656:	2300      	movne	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	461a      	mov	r2, r3
 800565c:	79fb      	ldrb	r3, [r7, #7]
 800565e:	429a      	cmp	r2, r3
 8005660:	d0c3      	beq.n	80055ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800566c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005670:	b085      	sub	sp, #20
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68da      	ldr	r2, [r3, #12]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	431a      	orrs	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80056ae:	f023 030c 	bic.w	r3, r3, #12
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6812      	ldr	r2, [r2, #0]
 80056b6:	68f9      	ldr	r1, [r7, #12]
 80056b8:	430b      	orrs	r3, r1
 80056ba:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	699a      	ldr	r2, [r3, #24]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056da:	f040 818b 	bne.w	80059f4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4ac1      	ldr	r2, [pc, #772]	; (80059e8 <UART_SetConfig+0x37c>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d005      	beq.n	80056f4 <UART_SetConfig+0x88>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4abf      	ldr	r2, [pc, #764]	; (80059ec <UART_SetConfig+0x380>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	f040 80bd 	bne.w	800586e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056f4:	f7fe fd38 	bl	8004168 <HAL_RCC_GetPCLK2Freq>
 80056f8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	461d      	mov	r5, r3
 80056fe:	f04f 0600 	mov.w	r6, #0
 8005702:	46a8      	mov	r8, r5
 8005704:	46b1      	mov	r9, r6
 8005706:	eb18 0308 	adds.w	r3, r8, r8
 800570a:	eb49 0409 	adc.w	r4, r9, r9
 800570e:	4698      	mov	r8, r3
 8005710:	46a1      	mov	r9, r4
 8005712:	eb18 0805 	adds.w	r8, r8, r5
 8005716:	eb49 0906 	adc.w	r9, r9, r6
 800571a:	f04f 0100 	mov.w	r1, #0
 800571e:	f04f 0200 	mov.w	r2, #0
 8005722:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005726:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800572a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800572e:	4688      	mov	r8, r1
 8005730:	4691      	mov	r9, r2
 8005732:	eb18 0005 	adds.w	r0, r8, r5
 8005736:	eb49 0106 	adc.w	r1, r9, r6
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	461d      	mov	r5, r3
 8005740:	f04f 0600 	mov.w	r6, #0
 8005744:	196b      	adds	r3, r5, r5
 8005746:	eb46 0406 	adc.w	r4, r6, r6
 800574a:	461a      	mov	r2, r3
 800574c:	4623      	mov	r3, r4
 800574e:	f7fb f98d 	bl	8000a6c <__aeabi_uldivmod>
 8005752:	4603      	mov	r3, r0
 8005754:	460c      	mov	r4, r1
 8005756:	461a      	mov	r2, r3
 8005758:	4ba5      	ldr	r3, [pc, #660]	; (80059f0 <UART_SetConfig+0x384>)
 800575a:	fba3 2302 	umull	r2, r3, r3, r2
 800575e:	095b      	lsrs	r3, r3, #5
 8005760:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	461d      	mov	r5, r3
 8005768:	f04f 0600 	mov.w	r6, #0
 800576c:	46a9      	mov	r9, r5
 800576e:	46b2      	mov	sl, r6
 8005770:	eb19 0309 	adds.w	r3, r9, r9
 8005774:	eb4a 040a 	adc.w	r4, sl, sl
 8005778:	4699      	mov	r9, r3
 800577a:	46a2      	mov	sl, r4
 800577c:	eb19 0905 	adds.w	r9, r9, r5
 8005780:	eb4a 0a06 	adc.w	sl, sl, r6
 8005784:	f04f 0100 	mov.w	r1, #0
 8005788:	f04f 0200 	mov.w	r2, #0
 800578c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005790:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005794:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005798:	4689      	mov	r9, r1
 800579a:	4692      	mov	sl, r2
 800579c:	eb19 0005 	adds.w	r0, r9, r5
 80057a0:	eb4a 0106 	adc.w	r1, sl, r6
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	461d      	mov	r5, r3
 80057aa:	f04f 0600 	mov.w	r6, #0
 80057ae:	196b      	adds	r3, r5, r5
 80057b0:	eb46 0406 	adc.w	r4, r6, r6
 80057b4:	461a      	mov	r2, r3
 80057b6:	4623      	mov	r3, r4
 80057b8:	f7fb f958 	bl	8000a6c <__aeabi_uldivmod>
 80057bc:	4603      	mov	r3, r0
 80057be:	460c      	mov	r4, r1
 80057c0:	461a      	mov	r2, r3
 80057c2:	4b8b      	ldr	r3, [pc, #556]	; (80059f0 <UART_SetConfig+0x384>)
 80057c4:	fba3 1302 	umull	r1, r3, r3, r2
 80057c8:	095b      	lsrs	r3, r3, #5
 80057ca:	2164      	movs	r1, #100	; 0x64
 80057cc:	fb01 f303 	mul.w	r3, r1, r3
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	3332      	adds	r3, #50	; 0x32
 80057d6:	4a86      	ldr	r2, [pc, #536]	; (80059f0 <UART_SetConfig+0x384>)
 80057d8:	fba2 2303 	umull	r2, r3, r2, r3
 80057dc:	095b      	lsrs	r3, r3, #5
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057e4:	4498      	add	r8, r3
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	461d      	mov	r5, r3
 80057ea:	f04f 0600 	mov.w	r6, #0
 80057ee:	46a9      	mov	r9, r5
 80057f0:	46b2      	mov	sl, r6
 80057f2:	eb19 0309 	adds.w	r3, r9, r9
 80057f6:	eb4a 040a 	adc.w	r4, sl, sl
 80057fa:	4699      	mov	r9, r3
 80057fc:	46a2      	mov	sl, r4
 80057fe:	eb19 0905 	adds.w	r9, r9, r5
 8005802:	eb4a 0a06 	adc.w	sl, sl, r6
 8005806:	f04f 0100 	mov.w	r1, #0
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005812:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005816:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800581a:	4689      	mov	r9, r1
 800581c:	4692      	mov	sl, r2
 800581e:	eb19 0005 	adds.w	r0, r9, r5
 8005822:	eb4a 0106 	adc.w	r1, sl, r6
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	461d      	mov	r5, r3
 800582c:	f04f 0600 	mov.w	r6, #0
 8005830:	196b      	adds	r3, r5, r5
 8005832:	eb46 0406 	adc.w	r4, r6, r6
 8005836:	461a      	mov	r2, r3
 8005838:	4623      	mov	r3, r4
 800583a:	f7fb f917 	bl	8000a6c <__aeabi_uldivmod>
 800583e:	4603      	mov	r3, r0
 8005840:	460c      	mov	r4, r1
 8005842:	461a      	mov	r2, r3
 8005844:	4b6a      	ldr	r3, [pc, #424]	; (80059f0 <UART_SetConfig+0x384>)
 8005846:	fba3 1302 	umull	r1, r3, r3, r2
 800584a:	095b      	lsrs	r3, r3, #5
 800584c:	2164      	movs	r1, #100	; 0x64
 800584e:	fb01 f303 	mul.w	r3, r1, r3
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	3332      	adds	r3, #50	; 0x32
 8005858:	4a65      	ldr	r2, [pc, #404]	; (80059f0 <UART_SetConfig+0x384>)
 800585a:	fba2 2303 	umull	r2, r3, r2, r3
 800585e:	095b      	lsrs	r3, r3, #5
 8005860:	f003 0207 	and.w	r2, r3, #7
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4442      	add	r2, r8
 800586a:	609a      	str	r2, [r3, #8]
 800586c:	e26f      	b.n	8005d4e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800586e:	f7fe fc67 	bl	8004140 <HAL_RCC_GetPCLK1Freq>
 8005872:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	461d      	mov	r5, r3
 8005878:	f04f 0600 	mov.w	r6, #0
 800587c:	46a8      	mov	r8, r5
 800587e:	46b1      	mov	r9, r6
 8005880:	eb18 0308 	adds.w	r3, r8, r8
 8005884:	eb49 0409 	adc.w	r4, r9, r9
 8005888:	4698      	mov	r8, r3
 800588a:	46a1      	mov	r9, r4
 800588c:	eb18 0805 	adds.w	r8, r8, r5
 8005890:	eb49 0906 	adc.w	r9, r9, r6
 8005894:	f04f 0100 	mov.w	r1, #0
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80058a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80058a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80058a8:	4688      	mov	r8, r1
 80058aa:	4691      	mov	r9, r2
 80058ac:	eb18 0005 	adds.w	r0, r8, r5
 80058b0:	eb49 0106 	adc.w	r1, r9, r6
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	461d      	mov	r5, r3
 80058ba:	f04f 0600 	mov.w	r6, #0
 80058be:	196b      	adds	r3, r5, r5
 80058c0:	eb46 0406 	adc.w	r4, r6, r6
 80058c4:	461a      	mov	r2, r3
 80058c6:	4623      	mov	r3, r4
 80058c8:	f7fb f8d0 	bl	8000a6c <__aeabi_uldivmod>
 80058cc:	4603      	mov	r3, r0
 80058ce:	460c      	mov	r4, r1
 80058d0:	461a      	mov	r2, r3
 80058d2:	4b47      	ldr	r3, [pc, #284]	; (80059f0 <UART_SetConfig+0x384>)
 80058d4:	fba3 2302 	umull	r2, r3, r3, r2
 80058d8:	095b      	lsrs	r3, r3, #5
 80058da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	461d      	mov	r5, r3
 80058e2:	f04f 0600 	mov.w	r6, #0
 80058e6:	46a9      	mov	r9, r5
 80058e8:	46b2      	mov	sl, r6
 80058ea:	eb19 0309 	adds.w	r3, r9, r9
 80058ee:	eb4a 040a 	adc.w	r4, sl, sl
 80058f2:	4699      	mov	r9, r3
 80058f4:	46a2      	mov	sl, r4
 80058f6:	eb19 0905 	adds.w	r9, r9, r5
 80058fa:	eb4a 0a06 	adc.w	sl, sl, r6
 80058fe:	f04f 0100 	mov.w	r1, #0
 8005902:	f04f 0200 	mov.w	r2, #0
 8005906:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800590a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800590e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005912:	4689      	mov	r9, r1
 8005914:	4692      	mov	sl, r2
 8005916:	eb19 0005 	adds.w	r0, r9, r5
 800591a:	eb4a 0106 	adc.w	r1, sl, r6
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	461d      	mov	r5, r3
 8005924:	f04f 0600 	mov.w	r6, #0
 8005928:	196b      	adds	r3, r5, r5
 800592a:	eb46 0406 	adc.w	r4, r6, r6
 800592e:	461a      	mov	r2, r3
 8005930:	4623      	mov	r3, r4
 8005932:	f7fb f89b 	bl	8000a6c <__aeabi_uldivmod>
 8005936:	4603      	mov	r3, r0
 8005938:	460c      	mov	r4, r1
 800593a:	461a      	mov	r2, r3
 800593c:	4b2c      	ldr	r3, [pc, #176]	; (80059f0 <UART_SetConfig+0x384>)
 800593e:	fba3 1302 	umull	r1, r3, r3, r2
 8005942:	095b      	lsrs	r3, r3, #5
 8005944:	2164      	movs	r1, #100	; 0x64
 8005946:	fb01 f303 	mul.w	r3, r1, r3
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	00db      	lsls	r3, r3, #3
 800594e:	3332      	adds	r3, #50	; 0x32
 8005950:	4a27      	ldr	r2, [pc, #156]	; (80059f0 <UART_SetConfig+0x384>)
 8005952:	fba2 2303 	umull	r2, r3, r2, r3
 8005956:	095b      	lsrs	r3, r3, #5
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800595e:	4498      	add	r8, r3
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	461d      	mov	r5, r3
 8005964:	f04f 0600 	mov.w	r6, #0
 8005968:	46a9      	mov	r9, r5
 800596a:	46b2      	mov	sl, r6
 800596c:	eb19 0309 	adds.w	r3, r9, r9
 8005970:	eb4a 040a 	adc.w	r4, sl, sl
 8005974:	4699      	mov	r9, r3
 8005976:	46a2      	mov	sl, r4
 8005978:	eb19 0905 	adds.w	r9, r9, r5
 800597c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005980:	f04f 0100 	mov.w	r1, #0
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800598c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005990:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005994:	4689      	mov	r9, r1
 8005996:	4692      	mov	sl, r2
 8005998:	eb19 0005 	adds.w	r0, r9, r5
 800599c:	eb4a 0106 	adc.w	r1, sl, r6
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	461d      	mov	r5, r3
 80059a6:	f04f 0600 	mov.w	r6, #0
 80059aa:	196b      	adds	r3, r5, r5
 80059ac:	eb46 0406 	adc.w	r4, r6, r6
 80059b0:	461a      	mov	r2, r3
 80059b2:	4623      	mov	r3, r4
 80059b4:	f7fb f85a 	bl	8000a6c <__aeabi_uldivmod>
 80059b8:	4603      	mov	r3, r0
 80059ba:	460c      	mov	r4, r1
 80059bc:	461a      	mov	r2, r3
 80059be:	4b0c      	ldr	r3, [pc, #48]	; (80059f0 <UART_SetConfig+0x384>)
 80059c0:	fba3 1302 	umull	r1, r3, r3, r2
 80059c4:	095b      	lsrs	r3, r3, #5
 80059c6:	2164      	movs	r1, #100	; 0x64
 80059c8:	fb01 f303 	mul.w	r3, r1, r3
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	3332      	adds	r3, #50	; 0x32
 80059d2:	4a07      	ldr	r2, [pc, #28]	; (80059f0 <UART_SetConfig+0x384>)
 80059d4:	fba2 2303 	umull	r2, r3, r2, r3
 80059d8:	095b      	lsrs	r3, r3, #5
 80059da:	f003 0207 	and.w	r2, r3, #7
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4442      	add	r2, r8
 80059e4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80059e6:	e1b2      	b.n	8005d4e <UART_SetConfig+0x6e2>
 80059e8:	40011000 	.word	0x40011000
 80059ec:	40011400 	.word	0x40011400
 80059f0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4ad7      	ldr	r2, [pc, #860]	; (8005d58 <UART_SetConfig+0x6ec>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d005      	beq.n	8005a0a <UART_SetConfig+0x39e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4ad6      	ldr	r2, [pc, #856]	; (8005d5c <UART_SetConfig+0x6f0>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	f040 80d1 	bne.w	8005bac <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a0a:	f7fe fbad 	bl	8004168 <HAL_RCC_GetPCLK2Freq>
 8005a0e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	469a      	mov	sl, r3
 8005a14:	f04f 0b00 	mov.w	fp, #0
 8005a18:	46d0      	mov	r8, sl
 8005a1a:	46d9      	mov	r9, fp
 8005a1c:	eb18 0308 	adds.w	r3, r8, r8
 8005a20:	eb49 0409 	adc.w	r4, r9, r9
 8005a24:	4698      	mov	r8, r3
 8005a26:	46a1      	mov	r9, r4
 8005a28:	eb18 080a 	adds.w	r8, r8, sl
 8005a2c:	eb49 090b 	adc.w	r9, r9, fp
 8005a30:	f04f 0100 	mov.w	r1, #0
 8005a34:	f04f 0200 	mov.w	r2, #0
 8005a38:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a3c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a40:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a44:	4688      	mov	r8, r1
 8005a46:	4691      	mov	r9, r2
 8005a48:	eb1a 0508 	adds.w	r5, sl, r8
 8005a4c:	eb4b 0609 	adc.w	r6, fp, r9
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	4619      	mov	r1, r3
 8005a56:	f04f 0200 	mov.w	r2, #0
 8005a5a:	f04f 0300 	mov.w	r3, #0
 8005a5e:	f04f 0400 	mov.w	r4, #0
 8005a62:	0094      	lsls	r4, r2, #2
 8005a64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a68:	008b      	lsls	r3, r1, #2
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	4623      	mov	r3, r4
 8005a6e:	4628      	mov	r0, r5
 8005a70:	4631      	mov	r1, r6
 8005a72:	f7fa fffb 	bl	8000a6c <__aeabi_uldivmod>
 8005a76:	4603      	mov	r3, r0
 8005a78:	460c      	mov	r4, r1
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	4bb8      	ldr	r3, [pc, #736]	; (8005d60 <UART_SetConfig+0x6f4>)
 8005a7e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	469b      	mov	fp, r3
 8005a8c:	f04f 0c00 	mov.w	ip, #0
 8005a90:	46d9      	mov	r9, fp
 8005a92:	46e2      	mov	sl, ip
 8005a94:	eb19 0309 	adds.w	r3, r9, r9
 8005a98:	eb4a 040a 	adc.w	r4, sl, sl
 8005a9c:	4699      	mov	r9, r3
 8005a9e:	46a2      	mov	sl, r4
 8005aa0:	eb19 090b 	adds.w	r9, r9, fp
 8005aa4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005aa8:	f04f 0100 	mov.w	r1, #0
 8005aac:	f04f 0200 	mov.w	r2, #0
 8005ab0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ab4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ab8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005abc:	4689      	mov	r9, r1
 8005abe:	4692      	mov	sl, r2
 8005ac0:	eb1b 0509 	adds.w	r5, fp, r9
 8005ac4:	eb4c 060a 	adc.w	r6, ip, sl
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	4619      	mov	r1, r3
 8005ace:	f04f 0200 	mov.w	r2, #0
 8005ad2:	f04f 0300 	mov.w	r3, #0
 8005ad6:	f04f 0400 	mov.w	r4, #0
 8005ada:	0094      	lsls	r4, r2, #2
 8005adc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ae0:	008b      	lsls	r3, r1, #2
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	4623      	mov	r3, r4
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	4631      	mov	r1, r6
 8005aea:	f7fa ffbf 	bl	8000a6c <__aeabi_uldivmod>
 8005aee:	4603      	mov	r3, r0
 8005af0:	460c      	mov	r4, r1
 8005af2:	461a      	mov	r2, r3
 8005af4:	4b9a      	ldr	r3, [pc, #616]	; (8005d60 <UART_SetConfig+0x6f4>)
 8005af6:	fba3 1302 	umull	r1, r3, r3, r2
 8005afa:	095b      	lsrs	r3, r3, #5
 8005afc:	2164      	movs	r1, #100	; 0x64
 8005afe:	fb01 f303 	mul.w	r3, r1, r3
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	011b      	lsls	r3, r3, #4
 8005b06:	3332      	adds	r3, #50	; 0x32
 8005b08:	4a95      	ldr	r2, [pc, #596]	; (8005d60 <UART_SetConfig+0x6f4>)
 8005b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0e:	095b      	lsrs	r3, r3, #5
 8005b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b14:	4498      	add	r8, r3
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	469b      	mov	fp, r3
 8005b1a:	f04f 0c00 	mov.w	ip, #0
 8005b1e:	46d9      	mov	r9, fp
 8005b20:	46e2      	mov	sl, ip
 8005b22:	eb19 0309 	adds.w	r3, r9, r9
 8005b26:	eb4a 040a 	adc.w	r4, sl, sl
 8005b2a:	4699      	mov	r9, r3
 8005b2c:	46a2      	mov	sl, r4
 8005b2e:	eb19 090b 	adds.w	r9, r9, fp
 8005b32:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b36:	f04f 0100 	mov.w	r1, #0
 8005b3a:	f04f 0200 	mov.w	r2, #0
 8005b3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b4a:	4689      	mov	r9, r1
 8005b4c:	4692      	mov	sl, r2
 8005b4e:	eb1b 0509 	adds.w	r5, fp, r9
 8005b52:	eb4c 060a 	adc.w	r6, ip, sl
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	f04f 0200 	mov.w	r2, #0
 8005b60:	f04f 0300 	mov.w	r3, #0
 8005b64:	f04f 0400 	mov.w	r4, #0
 8005b68:	0094      	lsls	r4, r2, #2
 8005b6a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b6e:	008b      	lsls	r3, r1, #2
 8005b70:	461a      	mov	r2, r3
 8005b72:	4623      	mov	r3, r4
 8005b74:	4628      	mov	r0, r5
 8005b76:	4631      	mov	r1, r6
 8005b78:	f7fa ff78 	bl	8000a6c <__aeabi_uldivmod>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	460c      	mov	r4, r1
 8005b80:	461a      	mov	r2, r3
 8005b82:	4b77      	ldr	r3, [pc, #476]	; (8005d60 <UART_SetConfig+0x6f4>)
 8005b84:	fba3 1302 	umull	r1, r3, r3, r2
 8005b88:	095b      	lsrs	r3, r3, #5
 8005b8a:	2164      	movs	r1, #100	; 0x64
 8005b8c:	fb01 f303 	mul.w	r3, r1, r3
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	011b      	lsls	r3, r3, #4
 8005b94:	3332      	adds	r3, #50	; 0x32
 8005b96:	4a72      	ldr	r2, [pc, #456]	; (8005d60 <UART_SetConfig+0x6f4>)
 8005b98:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9c:	095b      	lsrs	r3, r3, #5
 8005b9e:	f003 020f 	and.w	r2, r3, #15
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4442      	add	r2, r8
 8005ba8:	609a      	str	r2, [r3, #8]
 8005baa:	e0d0      	b.n	8005d4e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bac:	f7fe fac8 	bl	8004140 <HAL_RCC_GetPCLK1Freq>
 8005bb0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	469a      	mov	sl, r3
 8005bb6:	f04f 0b00 	mov.w	fp, #0
 8005bba:	46d0      	mov	r8, sl
 8005bbc:	46d9      	mov	r9, fp
 8005bbe:	eb18 0308 	adds.w	r3, r8, r8
 8005bc2:	eb49 0409 	adc.w	r4, r9, r9
 8005bc6:	4698      	mov	r8, r3
 8005bc8:	46a1      	mov	r9, r4
 8005bca:	eb18 080a 	adds.w	r8, r8, sl
 8005bce:	eb49 090b 	adc.w	r9, r9, fp
 8005bd2:	f04f 0100 	mov.w	r1, #0
 8005bd6:	f04f 0200 	mov.w	r2, #0
 8005bda:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005bde:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005be2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005be6:	4688      	mov	r8, r1
 8005be8:	4691      	mov	r9, r2
 8005bea:	eb1a 0508 	adds.w	r5, sl, r8
 8005bee:	eb4b 0609 	adc.w	r6, fp, r9
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	f04f 0200 	mov.w	r2, #0
 8005bfc:	f04f 0300 	mov.w	r3, #0
 8005c00:	f04f 0400 	mov.w	r4, #0
 8005c04:	0094      	lsls	r4, r2, #2
 8005c06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c0a:	008b      	lsls	r3, r1, #2
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	4623      	mov	r3, r4
 8005c10:	4628      	mov	r0, r5
 8005c12:	4631      	mov	r1, r6
 8005c14:	f7fa ff2a 	bl	8000a6c <__aeabi_uldivmod>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	460c      	mov	r4, r1
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	4b50      	ldr	r3, [pc, #320]	; (8005d60 <UART_SetConfig+0x6f4>)
 8005c20:	fba3 2302 	umull	r2, r3, r3, r2
 8005c24:	095b      	lsrs	r3, r3, #5
 8005c26:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	469b      	mov	fp, r3
 8005c2e:	f04f 0c00 	mov.w	ip, #0
 8005c32:	46d9      	mov	r9, fp
 8005c34:	46e2      	mov	sl, ip
 8005c36:	eb19 0309 	adds.w	r3, r9, r9
 8005c3a:	eb4a 040a 	adc.w	r4, sl, sl
 8005c3e:	4699      	mov	r9, r3
 8005c40:	46a2      	mov	sl, r4
 8005c42:	eb19 090b 	adds.w	r9, r9, fp
 8005c46:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c4a:	f04f 0100 	mov.w	r1, #0
 8005c4e:	f04f 0200 	mov.w	r2, #0
 8005c52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c5e:	4689      	mov	r9, r1
 8005c60:	4692      	mov	sl, r2
 8005c62:	eb1b 0509 	adds.w	r5, fp, r9
 8005c66:	eb4c 060a 	adc.w	r6, ip, sl
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	4619      	mov	r1, r3
 8005c70:	f04f 0200 	mov.w	r2, #0
 8005c74:	f04f 0300 	mov.w	r3, #0
 8005c78:	f04f 0400 	mov.w	r4, #0
 8005c7c:	0094      	lsls	r4, r2, #2
 8005c7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c82:	008b      	lsls	r3, r1, #2
 8005c84:	461a      	mov	r2, r3
 8005c86:	4623      	mov	r3, r4
 8005c88:	4628      	mov	r0, r5
 8005c8a:	4631      	mov	r1, r6
 8005c8c:	f7fa feee 	bl	8000a6c <__aeabi_uldivmod>
 8005c90:	4603      	mov	r3, r0
 8005c92:	460c      	mov	r4, r1
 8005c94:	461a      	mov	r2, r3
 8005c96:	4b32      	ldr	r3, [pc, #200]	; (8005d60 <UART_SetConfig+0x6f4>)
 8005c98:	fba3 1302 	umull	r1, r3, r3, r2
 8005c9c:	095b      	lsrs	r3, r3, #5
 8005c9e:	2164      	movs	r1, #100	; 0x64
 8005ca0:	fb01 f303 	mul.w	r3, r1, r3
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	011b      	lsls	r3, r3, #4
 8005ca8:	3332      	adds	r3, #50	; 0x32
 8005caa:	4a2d      	ldr	r2, [pc, #180]	; (8005d60 <UART_SetConfig+0x6f4>)
 8005cac:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb0:	095b      	lsrs	r3, r3, #5
 8005cb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cb6:	4498      	add	r8, r3
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	469b      	mov	fp, r3
 8005cbc:	f04f 0c00 	mov.w	ip, #0
 8005cc0:	46d9      	mov	r9, fp
 8005cc2:	46e2      	mov	sl, ip
 8005cc4:	eb19 0309 	adds.w	r3, r9, r9
 8005cc8:	eb4a 040a 	adc.w	r4, sl, sl
 8005ccc:	4699      	mov	r9, r3
 8005cce:	46a2      	mov	sl, r4
 8005cd0:	eb19 090b 	adds.w	r9, r9, fp
 8005cd4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005cd8:	f04f 0100 	mov.w	r1, #0
 8005cdc:	f04f 0200 	mov.w	r2, #0
 8005ce0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ce4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ce8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cec:	4689      	mov	r9, r1
 8005cee:	4692      	mov	sl, r2
 8005cf0:	eb1b 0509 	adds.w	r5, fp, r9
 8005cf4:	eb4c 060a 	adc.w	r6, ip, sl
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	f04f 0200 	mov.w	r2, #0
 8005d02:	f04f 0300 	mov.w	r3, #0
 8005d06:	f04f 0400 	mov.w	r4, #0
 8005d0a:	0094      	lsls	r4, r2, #2
 8005d0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d10:	008b      	lsls	r3, r1, #2
 8005d12:	461a      	mov	r2, r3
 8005d14:	4623      	mov	r3, r4
 8005d16:	4628      	mov	r0, r5
 8005d18:	4631      	mov	r1, r6
 8005d1a:	f7fa fea7 	bl	8000a6c <__aeabi_uldivmod>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	460c      	mov	r4, r1
 8005d22:	461a      	mov	r2, r3
 8005d24:	4b0e      	ldr	r3, [pc, #56]	; (8005d60 <UART_SetConfig+0x6f4>)
 8005d26:	fba3 1302 	umull	r1, r3, r3, r2
 8005d2a:	095b      	lsrs	r3, r3, #5
 8005d2c:	2164      	movs	r1, #100	; 0x64
 8005d2e:	fb01 f303 	mul.w	r3, r1, r3
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	3332      	adds	r3, #50	; 0x32
 8005d38:	4a09      	ldr	r2, [pc, #36]	; (8005d60 <UART_SetConfig+0x6f4>)
 8005d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3e:	095b      	lsrs	r3, r3, #5
 8005d40:	f003 020f 	and.w	r2, r3, #15
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4442      	add	r2, r8
 8005d4a:	609a      	str	r2, [r3, #8]
}
 8005d4c:	e7ff      	b.n	8005d4e <UART_SetConfig+0x6e2>
 8005d4e:	bf00      	nop
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d58:	40011000 	.word	0x40011000
 8005d5c:	40011400 	.word	0x40011400
 8005d60:	51eb851f 	.word	0x51eb851f

08005d64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d64:	b084      	sub	sp, #16
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	f107 001c 	add.w	r0, r7, #28
 8005d72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d122      	bne.n	8005dc2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d105      	bne.n	8005db6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f94a 	bl	8006050 <USB_CoreReset>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	73fb      	strb	r3, [r7, #15]
 8005dc0:	e01a      	b.n	8005df8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f93e 	bl	8006050 <USB_CoreReset>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d106      	bne.n	8005dec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	639a      	str	r2, [r3, #56]	; 0x38
 8005dea:	e005      	b.n	8005df8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d10b      	bne.n	8005e16 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f043 0206 	orr.w	r2, r3, #6
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f043 0220 	orr.w	r2, r3, #32
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e22:	b004      	add	sp, #16
 8005e24:	4770      	bx	lr

08005e26 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b083      	sub	sp, #12
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f043 0201 	orr.w	r2, r3, #1
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f023 0201 	bic.w	r2, r3, #1
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b082      	sub	sp, #8
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	460b      	mov	r3, r1
 8005e74:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e82:	78fb      	ldrb	r3, [r7, #3]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d106      	bne.n	8005e96 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	60da      	str	r2, [r3, #12]
 8005e94:	e00b      	b.n	8005eae <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e96:	78fb      	ldrb	r3, [r7, #3]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d106      	bne.n	8005eaa <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	60da      	str	r2, [r3, #12]
 8005ea8:	e001      	b.n	8005eae <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e003      	b.n	8005eb6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005eae:	2032      	movs	r0, #50	; 0x32
 8005eb0:	f7fa ffce 	bl	8000e50 <HAL_Delay>

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	019b      	lsls	r3, r3, #6
 8005ed2:	f043 0220 	orr.w	r2, r3, #32
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	3301      	adds	r3, #1
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4a09      	ldr	r2, [pc, #36]	; (8005f08 <USB_FlushTxFifo+0x48>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d901      	bls.n	8005eec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e006      	b.n	8005efa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	f003 0320 	and.w	r3, r3, #32
 8005ef4:	2b20      	cmp	r3, #32
 8005ef6:	d0f0      	beq.n	8005eda <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	00030d40 	.word	0x00030d40

08005f0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005f14:	2300      	movs	r3, #0
 8005f16:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2210      	movs	r2, #16
 8005f1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	3301      	adds	r3, #1
 8005f22:	60fb      	str	r3, [r7, #12]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4a09      	ldr	r2, [pc, #36]	; (8005f4c <USB_FlushRxFifo+0x40>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d901      	bls.n	8005f30 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e006      	b.n	8005f3e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	f003 0310 	and.w	r3, r3, #16
 8005f38:	2b10      	cmp	r3, #16
 8005f3a:	d0f0      	beq.n	8005f1e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	00030d40 	.word	0x00030d40

08005f50 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b089      	sub	sp, #36	; 0x24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	460b      	mov	r3, r1
 8005f60:	71fb      	strb	r3, [r7, #7]
 8005f62:	4613      	mov	r3, r2
 8005f64:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005f6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d11a      	bne.n	8005fac <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f76:	88bb      	ldrh	r3, [r7, #4]
 8005f78:	3303      	adds	r3, #3
 8005f7a:	089b      	lsrs	r3, r3, #2
 8005f7c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f7e:	2300      	movs	r3, #0
 8005f80:	61bb      	str	r3, [r7, #24]
 8005f82:	e00f      	b.n	8005fa4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f84:	79fb      	ldrb	r3, [r7, #7]
 8005f86:	031a      	lsls	r2, r3, #12
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f90:	461a      	mov	r2, r3
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	61bb      	str	r3, [r7, #24]
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d3eb      	bcc.n	8005f84 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3724      	adds	r7, #36	; 0x24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b089      	sub	sp, #36	; 0x24
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	60f8      	str	r0, [r7, #12]
 8005fc2:	60b9      	str	r1, [r7, #8]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005fd0:	88fb      	ldrh	r3, [r7, #6]
 8005fd2:	3303      	adds	r3, #3
 8005fd4:	089b      	lsrs	r3, r3, #2
 8005fd6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005fd8:	2300      	movs	r3, #0
 8005fda:	61bb      	str	r3, [r7, #24]
 8005fdc:	e00b      	b.n	8005ff6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	601a      	str	r2, [r3, #0]
    pDest++;
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	3304      	adds	r3, #4
 8005fee:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	61bb      	str	r3, [r7, #24]
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d3ef      	bcc.n	8005fde <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005ffe:	69fb      	ldr	r3, [r7, #28]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3724      	adds	r7, #36	; 0x24
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	4013      	ands	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006024:	68fb      	ldr	r3, [r7, #12]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006032:	b480      	push	{r7}
 8006034:	b083      	sub	sp, #12
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	f003 0301 	and.w	r3, r3, #1
}
 8006042:	4618      	mov	r0, r3
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
	...

08006050 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006058:	2300      	movs	r3, #0
 800605a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	3301      	adds	r3, #1
 8006060:	60fb      	str	r3, [r7, #12]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4a13      	ldr	r2, [pc, #76]	; (80060b4 <USB_CoreReset+0x64>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d901      	bls.n	800606e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e01b      	b.n	80060a6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	daf2      	bge.n	800605c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006076:	2300      	movs	r3, #0
 8006078:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	f043 0201 	orr.w	r2, r3, #1
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	3301      	adds	r3, #1
 800608a:	60fb      	str	r3, [r7, #12]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4a09      	ldr	r2, [pc, #36]	; (80060b4 <USB_CoreReset+0x64>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d901      	bls.n	8006098 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e006      	b.n	80060a6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d0f0      	beq.n	8006086 <USB_CoreReset+0x36>

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	00030d40 	.word	0x00030d40

080060b8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060b8:	b084      	sub	sp, #16
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b084      	sub	sp, #16
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
 80060c2:	f107 001c 	add.w	r0, r7, #28
 80060c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060d4:	461a      	mov	r2, r3
 80060d6:	2300      	movs	r3, #0
 80060d8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ea:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006106:	2b00      	cmp	r3, #0
 8006108:	d018      	beq.n	800613c <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	2b03      	cmp	r3, #3
 800610e:	d10a      	bne.n	8006126 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800611e:	f043 0304 	orr.w	r3, r3, #4
 8006122:	6013      	str	r3, [r2, #0]
 8006124:	e014      	b.n	8006150 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006134:	f023 0304 	bic.w	r3, r3, #4
 8006138:	6013      	str	r3, [r2, #0]
 800613a:	e009      	b.n	8006150 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800614a:	f023 0304 	bic.w	r3, r3, #4
 800614e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006150:	2110      	movs	r1, #16
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7ff feb4 	bl	8005ec0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f7ff fed7 	bl	8005f0c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800615e:	2300      	movs	r3, #0
 8006160:	60fb      	str	r3, [r7, #12]
 8006162:	e015      	b.n	8006190 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	4413      	add	r3, r2
 800616c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006170:	461a      	mov	r2, r3
 8006172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006176:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	4413      	add	r3, r2
 8006180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006184:	461a      	mov	r2, r3
 8006186:	2300      	movs	r3, #0
 8006188:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	3301      	adds	r3, #1
 800618e:	60fb      	str	r3, [r7, #12]
 8006190:	6a3b      	ldr	r3, [r7, #32]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	429a      	cmp	r2, r3
 8006196:	d3e5      	bcc.n	8006164 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006198:	2101      	movs	r1, #1
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f8ac 	bl	80062f8 <USB_DriveVbus>

  HAL_Delay(200U);
 80061a0:	20c8      	movs	r0, #200	; 0xc8
 80061a2:	f7fa fe55 	bl	8000e50 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061b2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00b      	beq.n	80061d8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061c6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a14      	ldr	r2, [pc, #80]	; (800621c <USB_HostInit+0x164>)
 80061cc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a13      	ldr	r2, [pc, #76]	; (8006220 <USB_HostInit+0x168>)
 80061d2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80061d6:	e009      	b.n	80061ec <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2280      	movs	r2, #128	; 0x80
 80061dc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a10      	ldr	r2, [pc, #64]	; (8006224 <USB_HostInit+0x16c>)
 80061e2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a10      	ldr	r2, [pc, #64]	; (8006228 <USB_HostInit+0x170>)
 80061e8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80061ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d105      	bne.n	80061fe <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	f043 0210 	orr.w	r2, r3, #16
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	699a      	ldr	r2, [r3, #24]
 8006202:	4b0a      	ldr	r3, [pc, #40]	; (800622c <USB_HostInit+0x174>)
 8006204:	4313      	orrs	r3, r2
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006216:	b004      	add	sp, #16
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	01000200 	.word	0x01000200
 8006220:	00e00300 	.word	0x00e00300
 8006224:	00600080 	.word	0x00600080
 8006228:	004000e0 	.word	0x004000e0
 800622c:	a3200008 	.word	0xa3200008

08006230 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	460b      	mov	r3, r1
 800623a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800624e:	f023 0303 	bic.w	r3, r3, #3
 8006252:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	78fb      	ldrb	r3, [r7, #3]
 800625e:	f003 0303 	and.w	r3, r3, #3
 8006262:	68f9      	ldr	r1, [r7, #12]
 8006264:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006268:	4313      	orrs	r3, r2
 800626a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800626c:	78fb      	ldrb	r3, [r7, #3]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d107      	bne.n	8006282 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006278:	461a      	mov	r2, r3
 800627a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800627e:	6053      	str	r3, [r2, #4]
 8006280:	e009      	b.n	8006296 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	2b02      	cmp	r3, #2
 8006286:	d106      	bne.n	8006296 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800628e:	461a      	mov	r2, r3
 8006290:	f241 7370 	movw	r3, #6000	; 0x1770
 8006294:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80062b0:	2300      	movs	r3, #0
 80062b2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80062c4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80062ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062d2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80062d4:	2064      	movs	r0, #100	; 0x64
 80062d6:	f7fa fdbb 	bl	8000e50 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80062e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062e6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80062e8:	200a      	movs	r0, #10
 80062ea:	f7fa fdb1 	bl	8000e50 <HAL_Delay>

  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	460b      	mov	r3, r1
 8006302:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800631c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d109      	bne.n	800633c <USB_DriveVbus+0x44>
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d106      	bne.n	800633c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006336:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800633a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006346:	d109      	bne.n	800635c <USB_DriveVbus+0x64>
 8006348:	78fb      	ldrb	r3, [r7, #3]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d106      	bne.n	800635c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006356:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800635a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800636a:	b480      	push	{r7}
 800636c:	b085      	sub	sp, #20
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006376:	2300      	movs	r3, #0
 8006378:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	0c5b      	lsrs	r3, r3, #17
 8006388:	f003 0303 	and.w	r3, r3, #3
}
 800638c:	4618      	mov	r0, r3
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	b29b      	uxth	r3, r3
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
	...

080063bc <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	4608      	mov	r0, r1
 80063c6:	4611      	mov	r1, r2
 80063c8:	461a      	mov	r2, r3
 80063ca:	4603      	mov	r3, r0
 80063cc:	70fb      	strb	r3, [r7, #3]
 80063ce:	460b      	mov	r3, r1
 80063d0:	70bb      	strb	r3, [r7, #2]
 80063d2:	4613      	mov	r3, r2
 80063d4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80063d6:	2300      	movs	r3, #0
 80063d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80063de:	78fb      	ldrb	r3, [r7, #3]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ea:	461a      	mov	r2, r3
 80063ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063f0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80063f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80063f6:	2b03      	cmp	r3, #3
 80063f8:	d87e      	bhi.n	80064f8 <USB_HC_Init+0x13c>
 80063fa:	a201      	add	r2, pc, #4	; (adr r2, 8006400 <USB_HC_Init+0x44>)
 80063fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006400:	08006411 	.word	0x08006411
 8006404:	080064bb 	.word	0x080064bb
 8006408:	08006411 	.word	0x08006411
 800640c:	0800647d 	.word	0x0800647d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006410:	78fb      	ldrb	r3, [r7, #3]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	4413      	add	r3, r2
 8006418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800641c:	461a      	mov	r2, r3
 800641e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006422:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006424:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006428:	2b00      	cmp	r3, #0
 800642a:	da10      	bge.n	800644e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800642c:	78fb      	ldrb	r3, [r7, #3]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	4413      	add	r3, r2
 8006434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	78fa      	ldrb	r2, [r7, #3]
 800643c:	0151      	lsls	r1, r2, #5
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	440a      	add	r2, r1
 8006442:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800644a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800644c:	e057      	b.n	80064fe <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006456:	2b00      	cmp	r3, #0
 8006458:	d051      	beq.n	80064fe <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800645a:	78fb      	ldrb	r3, [r7, #3]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	4413      	add	r3, r2
 8006462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	78fa      	ldrb	r2, [r7, #3]
 800646a:	0151      	lsls	r1, r2, #5
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	440a      	add	r2, r1
 8006470:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006474:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006478:	60d3      	str	r3, [r2, #12]
      break;
 800647a:	e040      	b.n	80064fe <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800647c:	78fb      	ldrb	r3, [r7, #3]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	4413      	add	r3, r2
 8006484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006488:	461a      	mov	r2, r3
 800648a:	f240 639d 	movw	r3, #1693	; 0x69d
 800648e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006490:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006494:	2b00      	cmp	r3, #0
 8006496:	da34      	bge.n	8006502 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006498:	78fb      	ldrb	r3, [r7, #3]
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	78fa      	ldrb	r2, [r7, #3]
 80064a8:	0151      	lsls	r1, r2, #5
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	440a      	add	r2, r1
 80064ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064b6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80064b8:	e023      	b.n	8006502 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80064ba:	78fb      	ldrb	r3, [r7, #3]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c6:	461a      	mov	r2, r3
 80064c8:	f240 2325 	movw	r3, #549	; 0x225
 80064cc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80064ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	da17      	bge.n	8006506 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80064d6:	78fb      	ldrb	r3, [r7, #3]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	78fa      	ldrb	r2, [r7, #3]
 80064e6:	0151      	lsls	r1, r2, #5
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	440a      	add	r2, r1
 80064ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064f0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80064f4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80064f6:	e006      	b.n	8006506 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	75fb      	strb	r3, [r7, #23]
      break;
 80064fc:	e004      	b.n	8006508 <USB_HC_Init+0x14c>
      break;
 80064fe:	bf00      	nop
 8006500:	e002      	b.n	8006508 <USB_HC_Init+0x14c>
      break;
 8006502:	bf00      	nop
 8006504:	e000      	b.n	8006508 <USB_HC_Init+0x14c>
      break;
 8006506:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800650e:	699a      	ldr	r2, [r3, #24]
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	f003 030f 	and.w	r3, r3, #15
 8006516:	2101      	movs	r1, #1
 8006518:	fa01 f303 	lsl.w	r3, r1, r3
 800651c:	68b9      	ldr	r1, [r7, #8]
 800651e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006522:	4313      	orrs	r3, r2
 8006524:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006532:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006536:	2b00      	cmp	r3, #0
 8006538:	da03      	bge.n	8006542 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800653a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800653e:	613b      	str	r3, [r7, #16]
 8006540:	e001      	b.n	8006546 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006546:	f897 3020 	ldrb.w	r3, [r7, #32]
 800654a:	2b02      	cmp	r3, #2
 800654c:	d103      	bne.n	8006556 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800654e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006552:	60fb      	str	r3, [r7, #12]
 8006554:	e001      	b.n	800655a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800655a:	787b      	ldrb	r3, [r7, #1]
 800655c:	059b      	lsls	r3, r3, #22
 800655e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006562:	78bb      	ldrb	r3, [r7, #2]
 8006564:	02db      	lsls	r3, r3, #11
 8006566:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800656a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800656c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006570:	049b      	lsls	r3, r3, #18
 8006572:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006576:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006578:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800657a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800657e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006584:	78fb      	ldrb	r3, [r7, #3]
 8006586:	0159      	lsls	r1, r3, #5
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	440b      	add	r3, r1
 800658c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006590:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006596:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006598:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800659c:	2b03      	cmp	r3, #3
 800659e:	d10f      	bne.n	80065c0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80065a0:	78fb      	ldrb	r3, [r7, #3]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	78fa      	ldrb	r2, [r7, #3]
 80065b0:	0151      	lsls	r1, r2, #5
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	440a      	add	r2, r1
 80065b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065be:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80065c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	371c      	adds	r7, #28
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop

080065d0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b08c      	sub	sp, #48	; 0x30
 80065d4:	af02      	add	r7, sp, #8
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	4613      	mov	r3, r2
 80065dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	785b      	ldrb	r3, [r3, #1]
 80065e6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80065e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065ec:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d028      	beq.n	800664c <USB_HC_StartXfer+0x7c>
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	791b      	ldrb	r3, [r3, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d124      	bne.n	800664c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006602:	79fb      	ldrb	r3, [r7, #7]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10b      	bne.n	8006620 <USB_HC_StartXfer+0x50>
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	795b      	ldrb	r3, [r3, #5]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d107      	bne.n	8006620 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	785b      	ldrb	r3, [r3, #1]
 8006614:	4619      	mov	r1, r3
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 fa2e 	bl	8006a78 <USB_DoPing>
      return HAL_OK;
 800661c:	2300      	movs	r3, #0
 800661e:	e112      	b.n	8006846 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8006620:	79fb      	ldrb	r3, [r7, #7]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d112      	bne.n	800664c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	4413      	add	r3, r2
 800662e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	69fa      	ldr	r2, [r7, #28]
 8006636:	0151      	lsls	r1, r2, #5
 8006638:	6a3a      	ldr	r2, [r7, #32]
 800663a:	440a      	add	r2, r1
 800663c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006640:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006644:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2200      	movs	r2, #0
 800664a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d018      	beq.n	8006686 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	8912      	ldrh	r2, [r2, #8]
 800665c:	4413      	add	r3, r2
 800665e:	3b01      	subs	r3, #1
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	8912      	ldrh	r2, [r2, #8]
 8006664:	fbb3 f3f2 	udiv	r3, r3, r2
 8006668:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800666a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800666c:	8b7b      	ldrh	r3, [r7, #26]
 800666e:	429a      	cmp	r2, r3
 8006670:	d90b      	bls.n	800668a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006672:	8b7b      	ldrh	r3, [r7, #26]
 8006674:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006676:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	8912      	ldrh	r2, [r2, #8]
 800667c:	fb02 f203 	mul.w	r2, r2, r3
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	611a      	str	r2, [r3, #16]
 8006684:	e001      	b.n	800668a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006686:	2301      	movs	r3, #1
 8006688:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	78db      	ldrb	r3, [r3, #3]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d006      	beq.n	80066a0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006692:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	8912      	ldrh	r2, [r2, #8]
 8006698:	fb02 f203 	mul.w	r2, r2, r3
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80066a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066aa:	04d9      	lsls	r1, r3, #19
 80066ac:	4b68      	ldr	r3, [pc, #416]	; (8006850 <USB_HC_StartXfer+0x280>)
 80066ae:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80066b0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	7a9b      	ldrb	r3, [r3, #10]
 80066b6:	075b      	lsls	r3, r3, #29
 80066b8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80066bc:	69f9      	ldr	r1, [r7, #28]
 80066be:	0148      	lsls	r0, r1, #5
 80066c0:	6a39      	ldr	r1, [r7, #32]
 80066c2:	4401      	add	r1, r0
 80066c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80066c8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80066ca:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80066cc:	79fb      	ldrb	r3, [r7, #7]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d009      	beq.n	80066e6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	68d9      	ldr	r1, [r3, #12]
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e2:	460a      	mov	r2, r1
 80066e4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	bf0c      	ite	eq
 80066f6:	2301      	moveq	r3, #1
 80066f8:	2300      	movne	r3, #0
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	6a3b      	ldr	r3, [r7, #32]
 8006704:	4413      	add	r3, r2
 8006706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	69fa      	ldr	r2, [r7, #28]
 800670e:	0151      	lsls	r1, r2, #5
 8006710:	6a3a      	ldr	r2, [r7, #32]
 8006712:	440a      	add	r2, r1
 8006714:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006718:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800671c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	4413      	add	r3, r2
 8006726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	7e7b      	ldrb	r3, [r7, #25]
 800672e:	075b      	lsls	r3, r3, #29
 8006730:	69f9      	ldr	r1, [r7, #28]
 8006732:	0148      	lsls	r0, r1, #5
 8006734:	6a39      	ldr	r1, [r7, #32]
 8006736:	4401      	add	r1, r0
 8006738:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800673c:	4313      	orrs	r3, r2
 800673e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	4413      	add	r3, r2
 8006748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a41      	ldr	r2, [pc, #260]	; (8006854 <USB_HC_StartXfer+0x284>)
 8006750:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006752:	4b40      	ldr	r3, [pc, #256]	; (8006854 <USB_HC_StartXfer+0x284>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800675a:	4a3e      	ldr	r2, [pc, #248]	; (8006854 <USB_HC_StartXfer+0x284>)
 800675c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	78db      	ldrb	r3, [r3, #3]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d006      	beq.n	8006774 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006766:	4b3b      	ldr	r3, [pc, #236]	; (8006854 <USB_HC_StartXfer+0x284>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800676e:	4a39      	ldr	r2, [pc, #228]	; (8006854 <USB_HC_StartXfer+0x284>)
 8006770:	6013      	str	r3, [r2, #0]
 8006772:	e005      	b.n	8006780 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006774:	4b37      	ldr	r3, [pc, #220]	; (8006854 <USB_HC_StartXfer+0x284>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800677c:	4a35      	ldr	r2, [pc, #212]	; (8006854 <USB_HC_StartXfer+0x284>)
 800677e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006780:	4b34      	ldr	r3, [pc, #208]	; (8006854 <USB_HC_StartXfer+0x284>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006788:	4a32      	ldr	r2, [pc, #200]	; (8006854 <USB_HC_StartXfer+0x284>)
 800678a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	6a3b      	ldr	r3, [r7, #32]
 8006792:	4413      	add	r3, r2
 8006794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006798:	461a      	mov	r2, r3
 800679a:	4b2e      	ldr	r3, [pc, #184]	; (8006854 <USB_HC_StartXfer+0x284>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 80067a0:	79fb      	ldrb	r3, [r7, #7]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d14e      	bne.n	8006844 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	78db      	ldrb	r3, [r3, #3]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d14a      	bne.n	8006844 <USB_HC_StartXfer+0x274>
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d046      	beq.n	8006844 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	79db      	ldrb	r3, [r3, #7]
 80067ba:	2b03      	cmp	r3, #3
 80067bc:	d830      	bhi.n	8006820 <USB_HC_StartXfer+0x250>
 80067be:	a201      	add	r2, pc, #4	; (adr r2, 80067c4 <USB_HC_StartXfer+0x1f4>)
 80067c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c4:	080067d5 	.word	0x080067d5
 80067c8:	080067f9 	.word	0x080067f9
 80067cc:	080067d5 	.word	0x080067d5
 80067d0:	080067f9 	.word	0x080067f9
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	3303      	adds	r3, #3
 80067da:	089b      	lsrs	r3, r3, #2
 80067dc:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80067de:	8afa      	ldrh	r2, [r7, #22]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d91c      	bls.n	8006824 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	f043 0220 	orr.w	r2, r3, #32
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	619a      	str	r2, [r3, #24]
          }
          break;
 80067f6:	e015      	b.n	8006824 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	3303      	adds	r3, #3
 80067fe:	089b      	lsrs	r3, r3, #2
 8006800:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006802:	8afa      	ldrh	r2, [r7, #22]
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	b29b      	uxth	r3, r3
 800680e:	429a      	cmp	r2, r3
 8006810:	d90a      	bls.n	8006828 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	619a      	str	r2, [r3, #24]
          }
          break;
 800681e:	e003      	b.n	8006828 <USB_HC_StartXfer+0x258>

        default:
          break;
 8006820:	bf00      	nop
 8006822:	e002      	b.n	800682a <USB_HC_StartXfer+0x25a>
          break;
 8006824:	bf00      	nop
 8006826:	e000      	b.n	800682a <USB_HC_StartXfer+0x25a>
          break;
 8006828:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	68d9      	ldr	r1, [r3, #12]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	785a      	ldrb	r2, [r3, #1]
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	b298      	uxth	r0, r3
 8006838:	2300      	movs	r3, #0
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	4603      	mov	r3, r0
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f7ff fb86 	bl	8005f50 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3728      	adds	r7, #40	; 0x28
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	1ff80000 	.word	0x1ff80000
 8006854:	20000224 	.word	0x20000224

08006858 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800686a:	695b      	ldr	r3, [r3, #20]
 800686c:	b29b      	uxth	r3, r3
}
 800686e:	4618      	mov	r0, r3
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800687a:	b480      	push	{r7}
 800687c:	b087      	sub	sp, #28
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	460b      	mov	r3, r1
 8006884:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800688a:	78fb      	ldrb	r3, [r7, #3]
 800688c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800688e:	2300      	movs	r3, #0
 8006890:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	4413      	add	r3, r2
 800689a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	0c9b      	lsrs	r3, r3, #18
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <USB_HC_Halt+0x3a>
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d16c      	bne.n	800698e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	0151      	lsls	r1, r2, #5
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	440a      	add	r2, r1
 80068ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068d2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d143      	bne.n	8006968 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	0151      	lsls	r1, r2, #5
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	440a      	add	r2, r1
 80068f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068fe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	4413      	add	r3, r2
 8006908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	0151      	lsls	r1, r2, #5
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	440a      	add	r2, r1
 8006916:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800691a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800691e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	4413      	add	r3, r2
 8006928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	0151      	lsls	r1, r2, #5
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	440a      	add	r2, r1
 8006936:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800693a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800693e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	3301      	adds	r3, #1
 8006944:	617b      	str	r3, [r7, #20]
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800694c:	d81d      	bhi.n	800698a <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	4413      	add	r3, r2
 8006956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006960:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006964:	d0ec      	beq.n	8006940 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006966:	e080      	b.n	8006a6a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	015a      	lsls	r2, r3, #5
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	4413      	add	r3, r2
 8006970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	0151      	lsls	r1, r2, #5
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	440a      	add	r2, r1
 800697e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006982:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006986:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006988:	e06f      	b.n	8006a6a <USB_HC_Halt+0x1f0>
          break;
 800698a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800698c:	e06d      	b.n	8006a6a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	015a      	lsls	r2, r3, #5
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	4413      	add	r3, r2
 8006996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	0151      	lsls	r1, r2, #5
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	440a      	add	r2, r1
 80069a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069ac:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d143      	bne.n	8006a46 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	015a      	lsls	r2, r3, #5
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	0151      	lsls	r1, r2, #5
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	440a      	add	r2, r1
 80069d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069dc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	0151      	lsls	r1, r2, #5
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	440a      	add	r2, r1
 80069f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069fc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	0151      	lsls	r1, r2, #5
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	440a      	add	r2, r1
 8006a14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a1c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	3301      	adds	r3, #1
 8006a22:	617b      	str	r3, [r7, #20]
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a2a:	d81d      	bhi.n	8006a68 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a42:	d0ec      	beq.n	8006a1e <USB_HC_Halt+0x1a4>
 8006a44:	e011      	b.n	8006a6a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	0151      	lsls	r1, r2, #5
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	440a      	add	r2, r1
 8006a5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a64:	6013      	str	r3, [r2, #0]
 8006a66:	e000      	b.n	8006a6a <USB_HC_Halt+0x1f0>
          break;
 8006a68:	bf00      	nop
    }
  }

  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	371c      	adds	r7, #28
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	460b      	mov	r3, r1
 8006a82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006a88:	78fb      	ldrb	r3, [r7, #3]
 8006a8a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	04da      	lsls	r2, r3, #19
 8006a94:	4b15      	ldr	r3, [pc, #84]	; (8006aec <USB_DoPing+0x74>)
 8006a96:	4013      	ands	r3, r2
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	0151      	lsls	r1, r2, #5
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	440a      	add	r2, r1
 8006aa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aa4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006aa8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	015a      	lsls	r2, r3, #5
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ac0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ac8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	371c      	adds	r7, #28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	1ff80000 	.word	0x1ff80000

08006af0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006afc:	2300      	movs	r3, #0
 8006afe:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7ff f9a1 	bl	8005e48 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006b06:	2110      	movs	r1, #16
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7ff f9d9 	bl	8005ec0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7ff f9fc 	bl	8005f0c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006b14:	2300      	movs	r3, #0
 8006b16:	613b      	str	r3, [r7, #16]
 8006b18:	e01f      	b.n	8006b5a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b30:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b38:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b40:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	015a      	lsls	r2, r3, #5
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	4413      	add	r3, r2
 8006b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b4e:	461a      	mov	r2, r3
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	3301      	adds	r3, #1
 8006b58:	613b      	str	r3, [r7, #16]
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	2b0f      	cmp	r3, #15
 8006b5e:	d9dc      	bls.n	8006b1a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006b60:	2300      	movs	r3, #0
 8006b62:	613b      	str	r3, [r7, #16]
 8006b64:	e034      	b.n	8006bd0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	015a      	lsls	r2, r3, #5
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b7c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b84:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b8c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	015a      	lsls	r2, r3, #5
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	617b      	str	r3, [r7, #20]
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bac:	d80c      	bhi.n	8006bc8 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	015a      	lsls	r2, r3, #5
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bc4:	d0ec      	beq.n	8006ba0 <USB_StopHost+0xb0>
 8006bc6:	e000      	b.n	8006bca <USB_StopHost+0xda>
        break;
 8006bc8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	613b      	str	r3, [r7, #16]
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	2b0f      	cmp	r3, #15
 8006bd4:	d9c7      	bls.n	8006b66 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bdc:	461a      	mov	r2, r3
 8006bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006be2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bea:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7ff f91a 	bl	8005e26 <USB_EnableGlobalInt>

  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3718      	adds	r7, #24
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8006bfc:	b590      	push	{r4, r7, lr}
 8006bfe:	b089      	sub	sp, #36	; 0x24
 8006c00:	af04      	add	r7, sp, #16
 8006c02:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8006c04:	2302      	movs	r3, #2
 8006c06:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8006c08:	2301      	movs	r3, #1
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	2102      	movs	r1, #2
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fc3a 	bl	8007488 <USBH_FindInterface>
 8006c14:	4603      	mov	r3, r0
 8006c16:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8006c18:	7bbb      	ldrb	r3, [r7, #14]
 8006c1a:	2bff      	cmp	r3, #255	; 0xff
 8006c1c:	f000 812a 	beq.w	8006e74 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8006c20:	7bbb      	ldrb	r3, [r7, #14]
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fc13 	bl	8007450 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8006c30:	2050      	movs	r0, #80	; 0x50
 8006c32:	f002 ff6f 	bl	8009b14 <malloc>
 8006c36:	4603      	mov	r3, r0
 8006c38:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006c44:	7bbb      	ldrb	r3, [r7, #14]
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	211a      	movs	r1, #26
 8006c4a:	fb01 f303 	mul.w	r3, r1, r3
 8006c4e:	4413      	add	r3, r2
 8006c50:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	b25b      	sxtb	r3, r3
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	da15      	bge.n	8006c88 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c5c:	7bbb      	ldrb	r3, [r7, #14]
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	211a      	movs	r1, #26
 8006c62:	fb01 f303 	mul.w	r3, r1, r3
 8006c66:	4413      	add	r3, r2
 8006c68:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006c6c:	781a      	ldrb	r2, [r3, #0]
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c72:	7bbb      	ldrb	r3, [r7, #14]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	211a      	movs	r1, #26
 8006c78:	fb01 f303 	mul.w	r3, r1, r3
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006c82:	881a      	ldrh	r2, [r3, #0]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	785b      	ldrb	r3, [r3, #1]
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f001 fd21 	bl	80086d6 <USBH_AllocPipe>
 8006c94:	4603      	mov	r3, r0
 8006c96:	461a      	mov	r2, r3
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	7819      	ldrb	r1, [r3, #0]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	7858      	ldrb	r0, [r3, #1]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	8952      	ldrh	r2, [r2, #10]
 8006cb4:	9202      	str	r2, [sp, #8]
 8006cb6:	2203      	movs	r2, #3
 8006cb8:	9201      	str	r2, [sp, #4]
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	4623      	mov	r3, r4
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f001 fcd9 	bl	8008678 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	4619      	mov	r1, r3
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f002 fe46 	bl	8009960 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	210a      	movs	r1, #10
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fbd4 	bl	8007488 <USBH_FindInterface>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	2bff      	cmp	r3, #255	; 0xff
 8006ce8:	f000 80c4 	beq.w	8006e74 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006cec:	7bbb      	ldrb	r3, [r7, #14]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	211a      	movs	r1, #26
 8006cf2:	fb01 f303 	mul.w	r3, r1, r3
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	b25b      	sxtb	r3, r3
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	da16      	bge.n	8006d32 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d04:	7bbb      	ldrb	r3, [r7, #14]
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	211a      	movs	r1, #26
 8006d0a:	fb01 f303 	mul.w	r3, r1, r3
 8006d0e:	4413      	add	r3, r2
 8006d10:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006d14:	781a      	ldrb	r2, [r3, #0]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d1a:	7bbb      	ldrb	r3, [r7, #14]
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	211a      	movs	r1, #26
 8006d20:	fb01 f303 	mul.w	r3, r1, r3
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006d2a:	881a      	ldrh	r2, [r3, #0]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	835a      	strh	r2, [r3, #26]
 8006d30:	e015      	b.n	8006d5e <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d32:	7bbb      	ldrb	r3, [r7, #14]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	211a      	movs	r1, #26
 8006d38:	fb01 f303 	mul.w	r3, r1, r3
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006d42:	781a      	ldrb	r2, [r3, #0]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d48:	7bbb      	ldrb	r3, [r7, #14]
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	211a      	movs	r1, #26
 8006d4e:	fb01 f303 	mul.w	r3, r1, r3
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006d58:	881a      	ldrh	r2, [r3, #0]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006d5e:	7bbb      	ldrb	r3, [r7, #14]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	211a      	movs	r1, #26
 8006d64:	fb01 f303 	mul.w	r3, r1, r3
 8006d68:	4413      	add	r3, r2
 8006d6a:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	b25b      	sxtb	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	da16      	bge.n	8006da4 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006d76:	7bbb      	ldrb	r3, [r7, #14]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	211a      	movs	r1, #26
 8006d7c:	fb01 f303 	mul.w	r3, r1, r3
 8006d80:	4413      	add	r3, r2
 8006d82:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006d86:	781a      	ldrb	r2, [r3, #0]
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006d8c:	7bbb      	ldrb	r3, [r7, #14]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	211a      	movs	r1, #26
 8006d92:	fb01 f303 	mul.w	r3, r1, r3
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006d9c:	881a      	ldrh	r2, [r3, #0]
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	835a      	strh	r2, [r3, #26]
 8006da2:	e015      	b.n	8006dd0 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006da4:	7bbb      	ldrb	r3, [r7, #14]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	211a      	movs	r1, #26
 8006daa:	fb01 f303 	mul.w	r3, r1, r3
 8006dae:	4413      	add	r3, r2
 8006db0:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006db4:	781a      	ldrb	r2, [r3, #0]
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006dba:	7bbb      	ldrb	r3, [r7, #14]
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	211a      	movs	r1, #26
 8006dc0:	fb01 f303 	mul.w	r3, r1, r3
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006dca:	881a      	ldrh	r2, [r3, #0]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	7b9b      	ldrb	r3, [r3, #14]
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f001 fc7d 	bl	80086d6 <USBH_AllocPipe>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	461a      	mov	r2, r3
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	7bdb      	ldrb	r3, [r3, #15]
 8006de8:	4619      	mov	r1, r3
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f001 fc73 	bl	80086d6 <USBH_AllocPipe>
 8006df0:	4603      	mov	r3, r0
 8006df2:	461a      	mov	r2, r3
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	7b59      	ldrb	r1, [r3, #13]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	7b98      	ldrb	r0, [r3, #14]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	8b12      	ldrh	r2, [r2, #24]
 8006e10:	9202      	str	r2, [sp, #8]
 8006e12:	2202      	movs	r2, #2
 8006e14:	9201      	str	r2, [sp, #4]
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	4623      	mov	r3, r4
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f001 fc2b 	bl	8008678 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	7b19      	ldrb	r1, [r3, #12]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	7bd8      	ldrb	r0, [r3, #15]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e36:	68ba      	ldr	r2, [r7, #8]
 8006e38:	8b52      	ldrh	r2, [r2, #26]
 8006e3a:	9202      	str	r2, [sp, #8]
 8006e3c:	2202      	movs	r2, #2
 8006e3e:	9201      	str	r2, [sp, #4]
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	4623      	mov	r3, r4
 8006e44:	4602      	mov	r2, r0
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f001 fc16 	bl	8008678 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	7b5b      	ldrb	r3, [r3, #13]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f002 fd7f 	bl	8009960 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	7b1b      	ldrb	r3, [r3, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f002 fd78 	bl	8009960 <USBH_LL_SetToggle>
      status = USBH_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd90      	pop	{r4, r7, pc}

08006e7e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b084      	sub	sp, #16
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00e      	beq.n	8006eb6 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f001 fc09 	bl	80086b6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f001 fc31 	bl	8008712 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	7b1b      	ldrb	r3, [r3, #12]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00e      	beq.n	8006edc <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	7b1b      	ldrb	r3, [r3, #12]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f001 fbf6 	bl	80086b6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	7b1b      	ldrb	r3, [r3, #12]
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f001 fc1e 	bl	8008712 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	7b5b      	ldrb	r3, [r3, #13]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00e      	beq.n	8006f02 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	7b5b      	ldrb	r3, [r3, #13]
 8006ee8:	4619      	mov	r1, r3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f001 fbe3 	bl	80086b6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	7b5b      	ldrb	r3, [r3, #13]
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f001 fc0b 	bl	8008712 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00b      	beq.n	8006f26 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f14:	69db      	ldr	r3, [r3, #28]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f002 fe04 	bl	8009b24 <free>
    phost->pActiveClass->pData = 0U;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f22:	2200      	movs	r2, #0
 8006f24:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8006f38:	2302      	movs	r3, #2
 8006f3a:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f42:	69db      	ldr	r3, [r3, #28]
 8006f44:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	3340      	adds	r3, #64	; 0x40
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f8b2 	bl	80070b6 <GetLineCoding>
 8006f52:	4603      	mov	r3, r0
 8006f54:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d105      	bne.n	8006f68 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f62:	2102      	movs	r1, #2
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	4798      	blx	r3
  }
  return status;
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
	...

08006f74 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006f80:	2300      	movs	r3, #0
 8006f82:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006f94:	2b04      	cmp	r3, #4
 8006f96:	d877      	bhi.n	8007088 <USBH_CDC_Process+0x114>
 8006f98:	a201      	add	r2, pc, #4	; (adr r2, 8006fa0 <USBH_CDC_Process+0x2c>)
 8006f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9e:	bf00      	nop
 8006fa0:	08006fb5 	.word	0x08006fb5
 8006fa4:	08006fbb 	.word	0x08006fbb
 8006fa8:	08006feb 	.word	0x08006feb
 8006fac:	0800705f 	.word	0x0800705f
 8006fb0:	0800706d 	.word	0x0800706d
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	73fb      	strb	r3, [r7, #15]
    break;
 8006fb8:	e06d      	b.n	8007096 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f897 	bl	80070f4 <SetLineCoding>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8006fca:	7bbb      	ldrb	r3, [r7, #14]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d104      	bne.n	8006fda <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006fd8:	e058      	b.n	800708c <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8006fda:	7bbb      	ldrb	r3, [r7, #14]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d055      	beq.n	800708c <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	2204      	movs	r2, #4
 8006fe4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006fe8:	e050      	b.n	800708c <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	3340      	adds	r3, #64	; 0x40
 8006fee:	4619      	mov	r1, r3
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f860 	bl	80070b6 <GetLineCoding>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d126      	bne.n	800704e <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007012:	791b      	ldrb	r3, [r3, #4]
 8007014:	429a      	cmp	r2, r3
 8007016:	d13b      	bne.n	8007090 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007022:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007024:	429a      	cmp	r2, r3
 8007026:	d133      	bne.n	8007090 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007032:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007034:	429a      	cmp	r2, r3
 8007036:	d12b      	bne.n	8007090 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007040:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007042:	429a      	cmp	r2, r3
 8007044:	d124      	bne.n	8007090 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f95a 	bl	8007300 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800704c:	e020      	b.n	8007090 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800704e:	7bbb      	ldrb	r3, [r7, #14]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d01d      	beq.n	8007090 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	2204      	movs	r2, #4
 8007058:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800705c:	e018      	b.n	8007090 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f867 	bl	8007132 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f8dc 	bl	8007222 <CDC_ProcessReception>
    break;
 800706a:	e014      	b.n	8007096 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 800706c:	2100      	movs	r1, #0
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fece 	bl	8007e10 <USBH_ClrFeature>
 8007074:	4603      	mov	r3, r0
 8007076:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8007078:	7bbb      	ldrb	r3, [r7, #14]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10a      	bne.n	8007094 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8007086:	e005      	b.n	8007094 <USBH_CDC_Process+0x120>

  default:
    break;
 8007088:	bf00      	nop
 800708a:	e004      	b.n	8007096 <USBH_CDC_Process+0x122>
    break;
 800708c:	bf00      	nop
 800708e:	e002      	b.n	8007096 <USBH_CDC_Process+0x122>
    break;
 8007090:	bf00      	nop
 8007092:	e000      	b.n	8007096 <USBH_CDC_Process+0x122>
    break;
 8007094:	bf00      	nop

  }

  return status;
 8007096:	7bfb      	ldrb	r3, [r7, #15]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b082      	sub	sp, #8
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	22a1      	movs	r2, #161	; 0xa1
 80070c4:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2221      	movs	r2, #33	; 0x21
 80070ca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2207      	movs	r2, #7
 80070dc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2207      	movs	r2, #7
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f001 f873 	bl	80081d0 <USBH_CtlReq>
 80070ea:	4603      	mov	r3, r0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2221      	movs	r2, #33	; 0x21
 8007102:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2220      	movs	r2, #32
 8007108:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2207      	movs	r2, #7
 800711a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	2207      	movs	r2, #7
 8007120:	4619      	mov	r1, r3
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f001 f854 	bl	80081d0 <USBH_CtlReq>
 8007128:	4603      	mov	r3, r0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b086      	sub	sp, #24
 8007136:	af02      	add	r7, sp, #8
 8007138:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007144:	2300      	movs	r3, #0
 8007146:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800714e:	2b01      	cmp	r3, #1
 8007150:	d002      	beq.n	8007158 <CDC_ProcessTransmission+0x26>
 8007152:	2b02      	cmp	r3, #2
 8007154:	d025      	beq.n	80071a2 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8007156:	e060      	b.n	800721a <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	8b12      	ldrh	r2, [r2, #24]
 8007160:	4293      	cmp	r3, r2
 8007162:	d90c      	bls.n	800717e <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	69d9      	ldr	r1, [r3, #28]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	8b1a      	ldrh	r2, [r3, #24]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	7b58      	ldrb	r0, [r3, #13]
 8007170:	2301      	movs	r3, #1
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	4603      	mov	r3, r0
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f001 fa3b 	bl	80085f2 <USBH_BulkSendData>
 800717c:	e00c      	b.n	8007198 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8007186:	b29a      	uxth	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	7b58      	ldrb	r0, [r3, #13]
 800718c:	2301      	movs	r3, #1
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	4603      	mov	r3, r0
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f001 fa2d 	bl	80085f2 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2202      	movs	r2, #2
 800719c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80071a0:	e03b      	b.n	800721a <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	7b5b      	ldrb	r3, [r3, #13]
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f002 fbaf 	bl	800990c <USBH_LL_GetURBState>
 80071ae:	4603      	mov	r3, r0
 80071b0:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 80071b2:	7afb      	ldrb	r3, [r7, #11]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d128      	bne.n	800720a <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	8b12      	ldrh	r2, [r2, #24]
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d90e      	bls.n	80071e2 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	8b12      	ldrh	r2, [r2, #24]
 80071cc:	1a9a      	subs	r2, r3, r2
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	8b12      	ldrh	r2, [r2, #24]
 80071da:	441a      	add	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	61da      	str	r2, [r3, #28]
 80071e0:	e002      	b.n	80071e8 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d004      	beq.n	80071fa <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80071f8:	e00e      	b.n	8007218 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f868 	bl	80072d8 <USBH_CDC_TransmitCallback>
    break;
 8007208:	e006      	b.n	8007218 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 800720a:	7afb      	ldrb	r3, [r7, #11]
 800720c:	2b02      	cmp	r3, #2
 800720e:	d103      	bne.n	8007218 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8007218:	bf00      	nop
  }
}
 800721a:	bf00      	nop
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b086      	sub	sp, #24
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007234:	2300      	movs	r3, #0
 8007236:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800723e:	2b03      	cmp	r3, #3
 8007240:	d002      	beq.n	8007248 <CDC_ProcessReception+0x26>
 8007242:	2b04      	cmp	r3, #4
 8007244:	d00e      	beq.n	8007264 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8007246:	e043      	b.n	80072d0 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	6a19      	ldr	r1, [r3, #32]
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	8b5a      	ldrh	r2, [r3, #26]
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	7b1b      	ldrb	r3, [r3, #12]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f001 f9f1 	bl	800863c <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2204      	movs	r2, #4
 800725e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8007262:	e035      	b.n	80072d0 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	7b1b      	ldrb	r3, [r3, #12]
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f002 fb4e 	bl	800990c <USBH_LL_GetURBState>
 8007270:	4603      	mov	r3, r0
 8007272:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8007274:	7cfb      	ldrb	r3, [r7, #19]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d129      	bne.n	80072ce <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	7b1b      	ldrb	r3, [r3, #12]
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f002 fab1 	bl	80097e8 <USBH_LL_GetLastXferSize>
 8007286:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	429a      	cmp	r2, r3
 8007290:	d016      	beq.n	80072c0 <CDC_ProcessReception+0x9e>
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	8b5b      	ldrh	r3, [r3, #26]
 8007296:	461a      	mov	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	4293      	cmp	r3, r2
 800729c:	d910      	bls.n	80072c0 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	1ad2      	subs	r2, r2, r3
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	6a1a      	ldr	r2, [r3, #32]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	441a      	add	r2, r3
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	2203      	movs	r2, #3
 80072ba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80072be:	e006      	b.n	80072ce <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f80f 	bl	80072ec <USBH_CDC_ReceiveCallback>
    break;
 80072ce:	bf00      	nop
  }
}
 80072d0:	bf00      	nop
 80072d2:	3718      	adds	r7, #24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]

}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]

}
 80072f4:	bf00      	nop
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]

}
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	4613      	mov	r3, r2
 8007320:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d101      	bne.n	800732c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007328:	2302      	movs	r3, #2
 800732a:	e019      	b.n	8007360 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	79fa      	ldrb	r2, [r7, #7]
 8007330:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f000 f80f 	bl	8007368 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d003      	beq.n	8007358 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f002 f993 	bl	8009684 <USBH_LL_Init>

  return USBH_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007370:	2300      	movs	r3, #0
 8007372:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8007374:	e008      	b.n	8007388 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	32e0      	adds	r2, #224	; 0xe0
 800737c:	2100      	movs	r1, #0
 800737e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	3301      	adds	r3, #1
 8007386:	60fb      	str	r3, [r7, #12]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2b0e      	cmp	r3, #14
 800738c:	d9f3      	bls.n	8007376 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800738e:	2300      	movs	r3, #0
 8007390:	60fb      	str	r3, [r7, #12]
 8007392:	e009      	b.n	80073a8 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	4413      	add	r3, r2
 800739a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800739e:	2200      	movs	r2, #0
 80073a0:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	3301      	adds	r3, #1
 80073a6:	60fb      	str	r3, [r7, #12]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073ae:	d3f1      	bcc.n	8007394 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2240      	movs	r2, #64	; 0x40
 80073d4:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b085      	sub	sp, #20
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8007404:	2300      	movs	r3, #0
 8007406:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d017      	beq.n	800743e <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10f      	bne.n	8007438 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800741e:	1c59      	adds	r1, r3, #1
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	33dc      	adds	r3, #220	; 0xdc
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8007432:	2300      	movs	r3, #0
 8007434:	73fb      	strb	r3, [r7, #15]
 8007436:	e004      	b.n	8007442 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007438:	2302      	movs	r3, #2
 800743a:	73fb      	strb	r3, [r7, #15]
 800743c:	e001      	b.n	8007442 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800743e:	2302      	movs	r3, #2
 8007440:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007442:	7bfb      	ldrb	r3, [r7, #15]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	460b      	mov	r3, r1
 800745a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800745c:	2300      	movs	r3, #0
 800745e:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8007466:	78fa      	ldrb	r2, [r7, #3]
 8007468:	429a      	cmp	r2, r3
 800746a:	d204      	bcs.n	8007476 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	78fa      	ldrb	r2, [r7, #3]
 8007470:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8007474:	e001      	b.n	800747a <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007476:	2302      	movs	r3, #2
 8007478:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800747a:	7bfb      	ldrb	r3, [r7, #15]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3714      	adds	r7, #20
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007488:	b480      	push	{r7}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	4608      	mov	r0, r1
 8007492:	4611      	mov	r1, r2
 8007494:	461a      	mov	r2, r3
 8007496:	4603      	mov	r3, r0
 8007498:	70fb      	strb	r3, [r7, #3]
 800749a:	460b      	mov	r3, r1
 800749c:	70bb      	strb	r3, [r7, #2]
 800749e:	4613      	mov	r3, r2
 80074a0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80074a6:	2300      	movs	r3, #0
 80074a8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80074b0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80074b2:	e025      	b.n	8007500 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80074b4:	7dfb      	ldrb	r3, [r7, #23]
 80074b6:	221a      	movs	r2, #26
 80074b8:	fb02 f303 	mul.w	r3, r2, r3
 80074bc:	3308      	adds	r3, #8
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	4413      	add	r3, r2
 80074c2:	3302      	adds	r3, #2
 80074c4:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	795b      	ldrb	r3, [r3, #5]
 80074ca:	78fa      	ldrb	r2, [r7, #3]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d002      	beq.n	80074d6 <USBH_FindInterface+0x4e>
 80074d0:	78fb      	ldrb	r3, [r7, #3]
 80074d2:	2bff      	cmp	r3, #255	; 0xff
 80074d4:	d111      	bne.n	80074fa <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80074da:	78ba      	ldrb	r2, [r7, #2]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d002      	beq.n	80074e6 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80074e0:	78bb      	ldrb	r3, [r7, #2]
 80074e2:	2bff      	cmp	r3, #255	; 0xff
 80074e4:	d109      	bne.n	80074fa <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80074ea:	787a      	ldrb	r2, [r7, #1]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d002      	beq.n	80074f6 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80074f0:	787b      	ldrb	r3, [r7, #1]
 80074f2:	2bff      	cmp	r3, #255	; 0xff
 80074f4:	d101      	bne.n	80074fa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80074f6:	7dfb      	ldrb	r3, [r7, #23]
 80074f8:	e006      	b.n	8007508 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80074fa:	7dfb      	ldrb	r3, [r7, #23]
 80074fc:	3301      	adds	r3, #1
 80074fe:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007500:	7dfb      	ldrb	r3, [r7, #23]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d9d6      	bls.n	80074b4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007506:	23ff      	movs	r3, #255	; 0xff
}
 8007508:	4618      	mov	r0, r3
 800750a:	371c      	adds	r7, #28
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f002 f8ed 	bl	80096fc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8007522:	2101      	movs	r1, #1
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f002 fa04 	bl	8009932 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b088      	sub	sp, #32
 8007538:	af04      	add	r7, sp, #16
 800753a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800753c:	2302      	movs	r3, #2
 800753e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007540:	2300      	movs	r3, #0
 8007542:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 faec 	bl	8007b22 <USBH_IsPortEnabled>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10c      	bne.n	800756a <USBH_Process+0x36>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	d007      	beq.n	800756a <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	b2db      	uxtb	r3, r3
 8007560:	2b03      	cmp	r3, #3
 8007562:	d002      	beq.n	800756a <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2203      	movs	r2, #3
 8007568:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b0b      	cmp	r3, #11
 8007572:	f200 814c 	bhi.w	800780e <USBH_Process+0x2da>
 8007576:	a201      	add	r2, pc, #4	; (adr r2, 800757c <USBH_Process+0x48>)
 8007578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757c:	080075ad 	.word	0x080075ad
 8007580:	080075cf 	.word	0x080075cf
 8007584:	080075e3 	.word	0x080075e3
 8007588:	080077e9 	.word	0x080077e9
 800758c:	0800780f 	.word	0x0800780f
 8007590:	08007671 	.word	0x08007671
 8007594:	0800779f 	.word	0x0800779f
 8007598:	080076a1 	.word	0x080076a1
 800759c:	080076c1 	.word	0x080076c1
 80075a0:	080076e1 	.word	0x080076e1
 80075a4:	0800770f 	.word	0x0800770f
 80075a8:	080077d1 	.word	0x080077d1
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 812c 	beq.w	8007812 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 80075c0:	20c8      	movs	r0, #200	; 0xc8
 80075c2:	f002 fa00 	bl	80099c6 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f002 f8f3 	bl	80097b2 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80075cc:	e121      	b.n	8007812 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	f040 811e 	bne.w	8007816 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2202      	movs	r2, #2
 80075de:	701a      	strb	r2, [r3, #0]
    }
    break;
 80075e0:	e119      	b.n	8007816 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 80075e2:	2064      	movs	r0, #100	; 0x64
 80075e4:	f002 f9ef 	bl	80099c6 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f002 f8bd 	bl	8009768 <USBH_LL_GetSpeed>
 80075ee:	4603      	mov	r3, r0
 80075f0:	461a      	mov	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2205      	movs	r2, #5
 80075fc:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80075fe:	2100      	movs	r1, #0
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f001 f868 	bl	80086d6 <USBH_AllocPipe>
 8007606:	4603      	mov	r3, r0
 8007608:	461a      	mov	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800760e:	2180      	movs	r1, #128	; 0x80
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f001 f860 	bl	80086d6 <USBH_AllocPipe>
 8007616:	4603      	mov	r3, r0
 8007618:	461a      	mov	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	7919      	ldrb	r1, [r3, #4]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8007632:	b292      	uxth	r2, r2
 8007634:	9202      	str	r2, [sp, #8]
 8007636:	2200      	movs	r2, #0
 8007638:	9201      	str	r2, [sp, #4]
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	4603      	mov	r3, r0
 800763e:	2280      	movs	r2, #128	; 0x80
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f001 f819 	bl	8008678 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	7959      	ldrb	r1, [r3, #5]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800765a:	b292      	uxth	r2, r2
 800765c:	9202      	str	r2, [sp, #8]
 800765e:	2200      	movs	r2, #0
 8007660:	9201      	str	r2, [sp, #4]
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	4603      	mov	r3, r0
 8007666:	2200      	movs	r2, #0
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f001 f805 	bl	8008678 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800766e:	e0e3      	b.n	8007838 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f8e7 	bl	8007844 <USBH_HandleEnum>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	f040 80ce 	bne.w	800781a <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800768c:	2b01      	cmp	r3, #1
 800768e:	d103      	bne.n	8007698 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2208      	movs	r2, #8
 8007694:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8007696:	e0c0      	b.n	800781a <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2207      	movs	r2, #7
 800769c:	701a      	strb	r2, [r3, #0]
    break;
 800769e:	e0bc      	b.n	800781a <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f000 80b9 	beq.w	800781e <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80076b2:	2101      	movs	r1, #1
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2208      	movs	r2, #8
 80076bc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80076be:	e0ae      	b.n	800781e <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	4619      	mov	r1, r3
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fb59 	bl	8007d82 <USBH_SetCfg>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f040 80a5 	bne.w	8007822 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2209      	movs	r2, #9
 80076dc:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80076de:	e0a0      	b.n	8007822 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 80076e6:	f003 0320 	and.w	r3, r3, #32
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00b      	beq.n	8007706 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80076ee:	2101      	movs	r1, #1
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fb69 	bl	8007dc8 <USBH_SetFeature>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f040 8094 	bne.w	8007826 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	220a      	movs	r2, #10
 8007702:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007704:	e08f      	b.n	8007826 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	220a      	movs	r2, #10
 800770a:	701a      	strb	r2, [r3, #0]
    break;
 800770c:	e08b      	b.n	8007826 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007714:	2b00      	cmp	r3, #0
 8007716:	f000 8088 	beq.w	800782a <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007722:	2300      	movs	r3, #0
 8007724:	73fb      	strb	r3, [r7, #15]
 8007726:	e017      	b.n	8007758 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007728:	7bfb      	ldrb	r3, [r7, #15]
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	33dc      	adds	r3, #220	; 0xdc
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	791a      	ldrb	r2, [r3, #4]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 800773c:	429a      	cmp	r2, r3
 800773e:	d108      	bne.n	8007752 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8007740:	7bfb      	ldrb	r3, [r7, #15]
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	33dc      	adds	r3, #220	; 0xdc
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007752:	7bfb      	ldrb	r3, [r7, #15]
 8007754:	3301      	adds	r3, #1
 8007756:	73fb      	strb	r3, [r7, #15]
 8007758:	7bfb      	ldrb	r3, [r7, #15]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d0e4      	beq.n	8007728 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007764:	2b00      	cmp	r3, #0
 8007766:	d016      	beq.n	8007796 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	4798      	blx	r3
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d109      	bne.n	800778e <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2206      	movs	r2, #6
 800777e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007786:	2103      	movs	r1, #3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800778c:	e04d      	b.n	800782a <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	220d      	movs	r2, #13
 8007792:	701a      	strb	r2, [r3, #0]
    break;
 8007794:	e049      	b.n	800782a <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	220d      	movs	r2, #13
 800779a:	701a      	strb	r2, [r3, #0]
    break;
 800779c:	e045      	b.n	800782a <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00f      	beq.n	80077c8 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	4798      	blx	r3
 80077b4:	4603      	mov	r3, r0
 80077b6:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 80077b8:	7bbb      	ldrb	r3, [r7, #14]
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d136      	bne.n	800782e <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	220b      	movs	r2, #11
 80077c4:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 80077c6:	e032      	b.n	800782e <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	220d      	movs	r2, #13
 80077cc:	701a      	strb	r2, [r3, #0]
    break;
 80077ce:	e02e      	b.n	800782e <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d02b      	beq.n	8007832 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	4798      	blx	r3
    }
    break;
 80077e6:	e024      	b.n	8007832 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7ff fdbd 	bl	8007368 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d01e      	beq.n	8007836 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 800780c:	e013      	b.n	8007836 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 800780e:	bf00      	nop
 8007810:	e012      	b.n	8007838 <USBH_Process+0x304>
    break;
 8007812:	bf00      	nop
 8007814:	e010      	b.n	8007838 <USBH_Process+0x304>
    break;
 8007816:	bf00      	nop
 8007818:	e00e      	b.n	8007838 <USBH_Process+0x304>
    break;
 800781a:	bf00      	nop
 800781c:	e00c      	b.n	8007838 <USBH_Process+0x304>
    break;
 800781e:	bf00      	nop
 8007820:	e00a      	b.n	8007838 <USBH_Process+0x304>
    break;
 8007822:	bf00      	nop
 8007824:	e008      	b.n	8007838 <USBH_Process+0x304>
    break;
 8007826:	bf00      	nop
 8007828:	e006      	b.n	8007838 <USBH_Process+0x304>
    break;
 800782a:	bf00      	nop
 800782c:	e004      	b.n	8007838 <USBH_Process+0x304>
    break;
 800782e:	bf00      	nop
 8007830:	e002      	b.n	8007838 <USBH_Process+0x304>
    break;
 8007832:	bf00      	nop
 8007834:	e000      	b.n	8007838 <USBH_Process+0x304>
    break;
 8007836:	bf00      	nop
  }
 return USBH_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop

08007844 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b088      	sub	sp, #32
 8007848:	af04      	add	r7, sp, #16
 800784a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800784c:	2301      	movs	r3, #1
 800784e:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	785b      	ldrb	r3, [r3, #1]
 8007854:	2b07      	cmp	r3, #7
 8007856:	f200 80f8 	bhi.w	8007a4a <USBH_HandleEnum+0x206>
 800785a:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <USBH_HandleEnum+0x1c>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	08007881 	.word	0x08007881
 8007864:	080078f3 	.word	0x080078f3
 8007868:	0800790b 	.word	0x0800790b
 800786c:	08007981 	.word	0x08007981
 8007870:	08007997 	.word	0x08007997
 8007874:	080079b3 	.word	0x080079b3
 8007878:	080079e7 	.word	0x080079e7
 800787c:	08007a1b 	.word	0x08007a1b
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8007880:	2108      	movs	r1, #8
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f9ad 	bl	8007be2 <USBH_Get_DevDesc>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	f040 80df 	bne.w	8007a4e <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2201      	movs	r2, #1
 800789e:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	7919      	ldrb	r1, [r3, #4]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80078b4:	b292      	uxth	r2, r2
 80078b6:	9202      	str	r2, [sp, #8]
 80078b8:	2200      	movs	r2, #0
 80078ba:	9201      	str	r2, [sp, #4]
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	4603      	mov	r3, r0
 80078c0:	2280      	movs	r2, #128	; 0x80
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 fed8 	bl	8008678 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	7959      	ldrb	r1, [r3, #5]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80078dc:	b292      	uxth	r2, r2
 80078de:	9202      	str	r2, [sp, #8]
 80078e0:	2200      	movs	r2, #0
 80078e2:	9201      	str	r2, [sp, #4]
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	4603      	mov	r3, r0
 80078e8:	2200      	movs	r2, #0
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fec4 	bl	8008678 <USBH_OpenPipe>

    }
    break;
 80078f0:	e0ad      	b.n	8007a4e <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 80078f2:	2112      	movs	r1, #18
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f974 	bl	8007be2 <USBH_Get_DevDesc>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f040 80a8 	bne.w	8007a52 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2202      	movs	r2, #2
 8007906:	705a      	strb	r2, [r3, #1]

    }
    break;
 8007908:	e0a3      	b.n	8007a52 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800790a:	2101      	movs	r1, #1
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fa14 	bl	8007d3a <USBH_SetAddress>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	f040 809e 	bne.w	8007a56 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 800791a:	2002      	movs	r0, #2
 800791c:	f002 f853 	bl	80099c6 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2203      	movs	r2, #3
 800792c:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	7919      	ldrb	r1, [r3, #4]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007942:	b292      	uxth	r2, r2
 8007944:	9202      	str	r2, [sp, #8]
 8007946:	2200      	movs	r2, #0
 8007948:	9201      	str	r2, [sp, #4]
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	4603      	mov	r3, r0
 800794e:	2280      	movs	r2, #128	; 0x80
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fe91 	bl	8008678 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	7959      	ldrb	r1, [r3, #5]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800796a:	b292      	uxth	r2, r2
 800796c:	9202      	str	r2, [sp, #8]
 800796e:	2200      	movs	r2, #0
 8007970:	9201      	str	r2, [sp, #4]
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	4603      	mov	r3, r0
 8007976:	2200      	movs	r2, #0
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fe7d 	bl	8008678 <USBH_OpenPipe>
    }
    break;
 800797e:	e06a      	b.n	8007a56 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8007980:	2109      	movs	r1, #9
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f955 	bl	8007c32 <USBH_Get_CfgDesc>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d165      	bne.n	8007a5a <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2204      	movs	r2, #4
 8007992:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007994:	e061      	b.n	8007a5a <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800799c:	4619      	mov	r1, r3
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f947 	bl	8007c32 <USBH_Get_CfgDesc>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d159      	bne.n	8007a5e <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2205      	movs	r2, #5
 80079ae:	705a      	strb	r2, [r3, #1]
    }
    break;
 80079b0:	e055      	b.n	8007a5e <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d010      	beq.n	80079de <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80079c8:	23ff      	movs	r3, #255	; 0xff
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f955 	bl	8007c7a <USBH_Get_StringDesc>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d145      	bne.n	8007a62 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2206      	movs	r2, #6
 80079da:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80079dc:	e041      	b.n	8007a62 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2206      	movs	r2, #6
 80079e2:	705a      	strb	r2, [r3, #1]
    break;
 80079e4:	e03d      	b.n	8007a62 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d010      	beq.n	8007a12 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80079fc:	23ff      	movs	r3, #255	; 0xff
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f93b 	bl	8007c7a <USBH_Get_StringDesc>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d12d      	bne.n	8007a66 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2207      	movs	r2, #7
 8007a0e:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007a10:	e029      	b.n	8007a66 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2207      	movs	r2, #7
 8007a16:	705a      	strb	r2, [r3, #1]
    break;
 8007a18:	e025      	b.n	8007a66 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00f      	beq.n	8007a44 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007a30:	23ff      	movs	r3, #255	; 0xff
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f921 	bl	8007c7a <USBH_Get_StringDesc>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d115      	bne.n	8007a6a <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007a42:	e012      	b.n	8007a6a <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	73fb      	strb	r3, [r7, #15]
    break;
 8007a48:	e00f      	b.n	8007a6a <USBH_HandleEnum+0x226>

  default:
    break;
 8007a4a:	bf00      	nop
 8007a4c:	e00e      	b.n	8007a6c <USBH_HandleEnum+0x228>
    break;
 8007a4e:	bf00      	nop
 8007a50:	e00c      	b.n	8007a6c <USBH_HandleEnum+0x228>
    break;
 8007a52:	bf00      	nop
 8007a54:	e00a      	b.n	8007a6c <USBH_HandleEnum+0x228>
    break;
 8007a56:	bf00      	nop
 8007a58:	e008      	b.n	8007a6c <USBH_HandleEnum+0x228>
    break;
 8007a5a:	bf00      	nop
 8007a5c:	e006      	b.n	8007a6c <USBH_HandleEnum+0x228>
    break;
 8007a5e:	bf00      	nop
 8007a60:	e004      	b.n	8007a6c <USBH_HandleEnum+0x228>
    break;
 8007a62:	bf00      	nop
 8007a64:	e002      	b.n	8007a6c <USBH_HandleEnum+0x228>
    break;
 8007a66:	bf00      	nop
 8007a68:	e000      	b.n	8007a6c <USBH_HandleEnum+0x228>
    break;
 8007a6a:	bf00      	nop
  }
  return Status;
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop

08007a78 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8007a8a:	bf00      	nop
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b082      	sub	sp, #8
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007aa4:	1c5a      	adds	r2, r3, #1
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f804 	bl	8007aba <USBH_HandleSof>
}
 8007ab2:	bf00      	nop
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b082      	sub	sp, #8
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b0b      	cmp	r3, #11
 8007aca:	d10a      	bne.n	8007ae2 <USBH_HandleSof+0x28>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d005      	beq.n	8007ae2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	4798      	blx	r3
  }
}
 8007ae2:	bf00      	nop
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b083      	sub	sp, #12
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007afa:	bf00      	nop
}
 8007afc:	370c      	adds	r7, #12
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b083      	sub	sp, #12
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007b16:	bf00      	nop
}
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr

08007b22 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b083      	sub	sp, #12
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10f      	bne.n	8007b6e <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00e      	beq.n	8007b7e <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b66:	2104      	movs	r1, #4
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	4798      	blx	r3
 8007b6c:	e007      	b.n	8007b7e <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d102      	bne.n	8007b7e <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f001 fdce 	bl	8009732 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	791b      	ldrb	r3, [r3, #4]
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fdb8 	bl	8008712 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	795b      	ldrb	r3, [r3, #5]
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 fdb2 	bl	8008712 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d005      	beq.n	8007bcc <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007bc6:	2105      	movs	r1, #5
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f001 fd95 	bl	80096fc <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2203      	movs	r2, #3
 8007bd6:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b086      	sub	sp, #24
 8007be6:	af02      	add	r7, sp, #8
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	460b      	mov	r3, r1
 8007bec:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007bf4:	78fb      	ldrb	r3, [r7, #3]
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c00:	2100      	movs	r1, #0
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f864 	bl	8007cd0 <USBH_GetDescriptor>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	73fb      	strb	r3, [r7, #15]
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d10a      	bne.n	8007c28 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f203 3022 	addw	r0, r3, #802	; 0x322
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c1e:	78fa      	ldrb	r2, [r7, #3]
 8007c20:	b292      	uxth	r2, r2
 8007c22:	4619      	mov	r1, r3
 8007c24:	f000 f918 	bl	8007e58 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b086      	sub	sp, #24
 8007c36:	af02      	add	r7, sp, #8
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	331c      	adds	r3, #28
 8007c42:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8007c44:	887b      	ldrh	r3, [r7, #2]
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c4e:	2100      	movs	r1, #0
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 f83d 	bl	8007cd0 <USBH_GetDescriptor>
 8007c56:	4603      	mov	r3, r0
 8007c58:	72fb      	strb	r3, [r7, #11]
 8007c5a:	7afb      	ldrb	r3, [r7, #11]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d107      	bne.n	8007c70 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007c66:	887a      	ldrh	r2, [r7, #2]
 8007c68:	68f9      	ldr	r1, [r7, #12]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 f964 	bl	8007f38 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8007c70:	7afb      	ldrb	r3, [r7, #11]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b088      	sub	sp, #32
 8007c7e:	af02      	add	r7, sp, #8
 8007c80:	60f8      	str	r0, [r7, #12]
 8007c82:	607a      	str	r2, [r7, #4]
 8007c84:	461a      	mov	r2, r3
 8007c86:	460b      	mov	r3, r1
 8007c88:	72fb      	strb	r3, [r7, #11]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8007c8e:	7afb      	ldrb	r3, [r7, #11]
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007c96:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007c9e:	893b      	ldrh	r3, [r7, #8]
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f000 f812 	bl	8007cd0 <USBH_GetDescriptor>
 8007cac:	4603      	mov	r3, r0
 8007cae:	75fb      	strb	r3, [r7, #23]
 8007cb0:	7dfb      	ldrb	r3, [r7, #23]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d107      	bne.n	8007cc6 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007cbc:	893a      	ldrh	r2, [r7, #8]
 8007cbe:	6879      	ldr	r1, [r7, #4]
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f000 fa37 	bl	8008134 <USBH_ParseStringDesc>
  }
  return status;
 8007cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3718      	adds	r7, #24
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	607b      	str	r3, [r7, #4]
 8007cda:	460b      	mov	r3, r1
 8007cdc:	72fb      	strb	r3, [r7, #11]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	789b      	ldrb	r3, [r3, #2]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d11c      	bne.n	8007d24 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007cea:	7afb      	ldrb	r3, [r7, #11]
 8007cec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007cf0:	b2da      	uxtb	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2206      	movs	r2, #6
 8007cfa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	893a      	ldrh	r2, [r7, #8]
 8007d00:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007d02:	893b      	ldrh	r3, [r7, #8]
 8007d04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d0c:	d104      	bne.n	8007d18 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f240 4209 	movw	r2, #1033	; 0x409
 8007d14:	829a      	strh	r2, [r3, #20]
 8007d16:	e002      	b.n	8007d1e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	8b3a      	ldrh	r2, [r7, #24]
 8007d22:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8007d24:	8b3b      	ldrh	r3, [r7, #24]
 8007d26:	461a      	mov	r2, r3
 8007d28:	6879      	ldr	r1, [r7, #4]
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f000 fa50 	bl	80081d0 <USBH_CtlReq>
 8007d30:	4603      	mov	r3, r0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b082      	sub	sp, #8
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
 8007d42:	460b      	mov	r3, r1
 8007d44:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	789b      	ldrb	r3, [r3, #2]
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d10f      	bne.n	8007d6e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2205      	movs	r2, #5
 8007d58:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007d5a:	78fb      	ldrb	r3, [r7, #3]
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007d6e:	2200      	movs	r2, #0
 8007d70:	2100      	movs	r1, #0
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fa2c 	bl	80081d0 <USBH_CtlReq>
 8007d78:	4603      	mov	r3, r0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b082      	sub	sp, #8
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	789b      	ldrb	r3, [r3, #2]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d10e      	bne.n	8007db4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2209      	movs	r2, #9
 8007da0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	887a      	ldrh	r2, [r7, #2]
 8007da6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8007db4:	2200      	movs	r2, #0
 8007db6:	2100      	movs	r1, #0
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fa09 	bl	80081d0 <USBH_CtlReq>
 8007dbe:	4603      	mov	r3, r0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	789b      	ldrb	r3, [r3, #2]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d10f      	bne.n	8007dfc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2203      	movs	r2, #3
 8007de6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007de8:	78fb      	ldrb	r3, [r7, #3]
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	2100      	movs	r1, #0
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f9e5 	bl	80081d0 <USBH_CtlReq>
 8007e06:	4603      	mov	r3, r0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	789b      	ldrb	r3, [r3, #2]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d10f      	bne.n	8007e44 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2202      	movs	r2, #2
 8007e28:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007e36:	78fb      	ldrb	r3, [r7, #3]
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8007e44:	2200      	movs	r2, #0
 8007e46:	2100      	movs	r1, #0
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f9c1 	bl	80081d0 <USBH_CtlReq>
 8007e4e:	4603      	mov	r3, r0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	4613      	mov	r3, r2
 8007e64:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	781a      	ldrb	r2, [r3, #0]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	785a      	ldrb	r2, [r3, #1]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	3302      	adds	r3, #2
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	3303      	adds	r3, #3
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	021b      	lsls	r3, r3, #8
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	791a      	ldrb	r2, [r3, #4]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	795a      	ldrb	r2, [r3, #5]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	799a      	ldrb	r2, [r3, #6]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	79da      	ldrb	r2, [r3, #7]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007eb2:	88fb      	ldrh	r3, [r7, #6]
 8007eb4:	2b08      	cmp	r3, #8
 8007eb6:	d939      	bls.n	8007f2c <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	3308      	adds	r3, #8
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	3309      	adds	r3, #9
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	021b      	lsls	r3, r3, #8
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	330a      	adds	r3, #10
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	b29a      	uxth	r2, r3
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	330b      	adds	r3, #11
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	021b      	lsls	r3, r3, #8
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	330c      	adds	r3, #12
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	330d      	adds	r3, #13
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	021b      	lsls	r3, r3, #8
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	4313      	orrs	r3, r2
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	7b9a      	ldrb	r2, [r3, #14]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	7bda      	ldrb	r2, [r3, #15]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	7c1a      	ldrb	r2, [r3, #16]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	7c5a      	ldrb	r2, [r3, #17]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	745a      	strb	r2, [r3, #17]
  }
}
 8007f2c:	bf00      	nop
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b08a      	sub	sp, #40	; 0x28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	4613      	mov	r3, r2
 8007f44:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007f50:	2300      	movs	r3, #0
 8007f52:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	781a      	ldrb	r2, [r3, #0]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	785a      	ldrb	r2, [r3, #1]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	3302      	adds	r3, #2
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	3303      	adds	r3, #3
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	021b      	lsls	r3, r3, #8
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	791a      	ldrb	r2, [r3, #4]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	795a      	ldrb	r2, [r3, #5]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	799a      	ldrb	r2, [r3, #6]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	79da      	ldrb	r2, [r3, #7]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	7a1a      	ldrb	r2, [r3, #8]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007fae:	88fb      	ldrh	r3, [r7, #6]
 8007fb0:	2b09      	cmp	r3, #9
 8007fb2:	d95f      	bls.n	8008074 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007fb4:	2309      	movs	r3, #9
 8007fb6:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007fbc:	e051      	b.n	8008062 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007fbe:	f107 0316 	add.w	r3, r7, #22
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fc6:	f000 f8e8 	bl	800819a <USBH_GetNextDesc>
 8007fca:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fce:	785b      	ldrb	r3, [r3, #1]
 8007fd0:	2b04      	cmp	r3, #4
 8007fd2:	d146      	bne.n	8008062 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007fd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fd8:	221a      	movs	r2, #26
 8007fda:	fb02 f303 	mul.w	r3, r2, r3
 8007fde:	3308      	adds	r3, #8
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	3302      	adds	r3, #2
 8007fe6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8007fe8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fea:	69f8      	ldr	r0, [r7, #28]
 8007fec:	f000 f846 	bl	800807c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ffa:	e022      	b.n	8008042 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8007ffc:	f107 0316 	add.w	r3, r7, #22
 8008000:	4619      	mov	r1, r3
 8008002:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008004:	f000 f8c9 	bl	800819a <USBH_GetNextDesc>
 8008008:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	785b      	ldrb	r3, [r3, #1]
 800800e:	2b05      	cmp	r3, #5
 8008010:	d117      	bne.n	8008042 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008012:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008016:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800801a:	3201      	adds	r2, #1
 800801c:	00d2      	lsls	r2, r2, #3
 800801e:	211a      	movs	r1, #26
 8008020:	fb01 f303 	mul.w	r3, r1, r3
 8008024:	4413      	add	r3, r2
 8008026:	3308      	adds	r3, #8
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	4413      	add	r3, r2
 800802c:	3304      	adds	r3, #4
 800802e:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8008030:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008032:	69b8      	ldr	r0, [r7, #24]
 8008034:	f000 f851 	bl	80080da <USBH_ParseEPDesc>
            ep_ix++;
 8008038:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800803c:	3301      	adds	r3, #1
 800803e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	791b      	ldrb	r3, [r3, #4]
 8008046:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800804a:	429a      	cmp	r2, r3
 800804c:	d204      	bcs.n	8008058 <USBH_ParseCfgDesc+0x120>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	885a      	ldrh	r2, [r3, #2]
 8008052:	8afb      	ldrh	r3, [r7, #22]
 8008054:	429a      	cmp	r2, r3
 8008056:	d8d1      	bhi.n	8007ffc <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008058:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800805c:	3301      	adds	r3, #1
 800805e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008062:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008066:	2b01      	cmp	r3, #1
 8008068:	d804      	bhi.n	8008074 <USBH_ParseCfgDesc+0x13c>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	885a      	ldrh	r2, [r3, #2]
 800806e:	8afb      	ldrh	r3, [r7, #22]
 8008070:	429a      	cmp	r2, r3
 8008072:	d8a4      	bhi.n	8007fbe <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008074:	bf00      	nop
 8008076:	3728      	adds	r7, #40	; 0x28
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	781a      	ldrb	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	785a      	ldrb	r2, [r3, #1]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	789a      	ldrb	r2, [r3, #2]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	78da      	ldrb	r2, [r3, #3]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	791a      	ldrb	r2, [r3, #4]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	795a      	ldrb	r2, [r3, #5]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	799a      	ldrb	r2, [r3, #6]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	79da      	ldrb	r2, [r3, #7]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	7a1a      	ldrb	r2, [r3, #8]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	721a      	strb	r2, [r3, #8]
}
 80080ce:	bf00      	nop
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 80080da:	b480      	push	{r7}
 80080dc:	b083      	sub	sp, #12
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	781a      	ldrb	r2, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	785a      	ldrb	r2, [r3, #1]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	789a      	ldrb	r2, [r3, #2]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	78da      	ldrb	r2, [r3, #3]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	3304      	adds	r3, #4
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	b29a      	uxth	r2, r3
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	3305      	adds	r3, #5
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	b29b      	uxth	r3, r3
 8008114:	021b      	lsls	r3, r3, #8
 8008116:	b29b      	uxth	r3, r3
 8008118:	4313      	orrs	r3, r2
 800811a:	b29a      	uxth	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	799a      	ldrb	r2, [r3, #6]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	719a      	strb	r2, [r3, #6]
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8008134:	b480      	push	{r7}
 8008136:	b087      	sub	sp, #28
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	4613      	mov	r3, r2
 8008140:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	3301      	adds	r3, #1
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	2b03      	cmp	r3, #3
 800814a:	d120      	bne.n	800818e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	1e9a      	subs	r2, r3, #2
 8008152:	88fb      	ldrh	r3, [r7, #6]
 8008154:	4293      	cmp	r3, r2
 8008156:	bf28      	it	cs
 8008158:	4613      	movcs	r3, r2
 800815a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	3302      	adds	r3, #2
 8008160:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008162:	2300      	movs	r3, #0
 8008164:	82fb      	strh	r3, [r7, #22]
 8008166:	e00b      	b.n	8008180 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008168:	8afb      	ldrh	r3, [r7, #22]
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	4413      	add	r3, r2
 800816e:	781a      	ldrb	r2, [r3, #0]
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	3301      	adds	r3, #1
 8008178:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800817a:	8afb      	ldrh	r3, [r7, #22]
 800817c:	3302      	adds	r3, #2
 800817e:	82fb      	strh	r3, [r7, #22]
 8008180:	8afa      	ldrh	r2, [r7, #22]
 8008182:	8abb      	ldrh	r3, [r7, #20]
 8008184:	429a      	cmp	r2, r3
 8008186:	d3ef      	bcc.n	8008168 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	2200      	movs	r2, #0
 800818c:	701a      	strb	r2, [r3, #0]
  }
}
 800818e:	bf00      	nop
 8008190:	371c      	adds	r7, #28
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800819a:	b480      	push	{r7}
 800819c:	b085      	sub	sp, #20
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	881a      	ldrh	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	4413      	add	r3, r2
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4413      	add	r3, r2
 80081c0:	60fb      	str	r3, [r7, #12]

  return(pnext);
 80081c2:	68fb      	ldr	r3, [r7, #12]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3714      	adds	r7, #20
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	4613      	mov	r3, r2
 80081dc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80081de:	2301      	movs	r3, #1
 80081e0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	789b      	ldrb	r3, [r3, #2]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d002      	beq.n	80081f0 <USBH_CtlReq+0x20>
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	d00f      	beq.n	800820e <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 80081ee:	e034      	b.n	800825a <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	68ba      	ldr	r2, [r7, #8]
 80081f4:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	88fa      	ldrh	r2, [r7, #6]
 80081fa:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2201      	movs	r2, #1
 8008200:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2202      	movs	r2, #2
 8008206:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8008208:	2301      	movs	r3, #1
 800820a:	75fb      	strb	r3, [r7, #23]
    break;
 800820c:	e025      	b.n	800825a <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f000 f828 	bl	8008264 <USBH_HandleControl>
 8008214:	4603      	mov	r3, r0
 8008216:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8008218:	7dfb      	ldrb	r3, [r7, #23]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d108      	bne.n	8008230 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2201      	movs	r2, #1
 8008222:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800822a:	2300      	movs	r3, #0
 800822c:	75fb      	strb	r3, [r7, #23]
    break;
 800822e:	e013      	b.n	8008258 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8008230:	7dfb      	ldrb	r3, [r7, #23]
 8008232:	2b03      	cmp	r3, #3
 8008234:	d108      	bne.n	8008248 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2201      	movs	r2, #1
 800823a:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2200      	movs	r2, #0
 8008240:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8008242:	2303      	movs	r3, #3
 8008244:	75fb      	strb	r3, [r7, #23]
    break;
 8008246:	e007      	b.n	8008258 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8008248:	7dfb      	ldrb	r3, [r7, #23]
 800824a:	2b02      	cmp	r3, #2
 800824c:	d104      	bne.n	8008258 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2201      	movs	r2, #1
 8008252:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8008254:	2302      	movs	r3, #2
 8008256:	75fb      	strb	r3, [r7, #23]
    break;
 8008258:	bf00      	nop
  }
  return status;
 800825a:	7dfb      	ldrb	r3, [r7, #23]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3718      	adds	r7, #24
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b086      	sub	sp, #24
 8008268:	af02      	add	r7, sp, #8
 800826a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800826c:	2301      	movs	r3, #1
 800826e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008270:	2300      	movs	r3, #0
 8008272:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	7e1b      	ldrb	r3, [r3, #24]
 8008278:	3b01      	subs	r3, #1
 800827a:	2b0a      	cmp	r3, #10
 800827c:	f200 814c 	bhi.w	8008518 <USBH_HandleControl+0x2b4>
 8008280:	a201      	add	r2, pc, #4	; (adr r2, 8008288 <USBH_HandleControl+0x24>)
 8008282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008286:	bf00      	nop
 8008288:	080082b5 	.word	0x080082b5
 800828c:	080082cf 	.word	0x080082cf
 8008290:	08008339 	.word	0x08008339
 8008294:	0800835f 	.word	0x0800835f
 8008298:	08008397 	.word	0x08008397
 800829c:	080083c3 	.word	0x080083c3
 80082a0:	08008415 	.word	0x08008415
 80082a4:	08008437 	.word	0x08008437
 80082a8:	08008473 	.word	0x08008473
 80082ac:	0800849b 	.word	0x0800849b
 80082b0:	080084d9 	.word	0x080084d9
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f103 0110 	add.w	r1, r3, #16
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	795b      	ldrb	r3, [r3, #5]
 80082be:	461a      	mov	r2, r3
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f939 	bl	8008538 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2202      	movs	r2, #2
 80082ca:	761a      	strb	r2, [r3, #24]
    break;
 80082cc:	e12f      	b.n	800852e <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	795b      	ldrb	r3, [r3, #5]
 80082d2:	4619      	mov	r1, r3
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f001 fb19 	bl	800990c <USBH_LL_GetURBState>
 80082da:	4603      	mov	r3, r0
 80082dc:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 80082de:	7bbb      	ldrb	r3, [r7, #14]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d11e      	bne.n	8008322 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	7c1b      	ldrb	r3, [r3, #16]
 80082e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082ec:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	8adb      	ldrh	r3, [r3, #22]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00a      	beq.n	800830c <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 80082f6:	7b7b      	ldrb	r3, [r7, #13]
 80082f8:	2b80      	cmp	r3, #128	; 0x80
 80082fa:	d103      	bne.n	8008304 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2203      	movs	r2, #3
 8008300:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008302:	e10b      	b.n	800851c <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2205      	movs	r2, #5
 8008308:	761a      	strb	r2, [r3, #24]
    break;
 800830a:	e107      	b.n	800851c <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 800830c:	7b7b      	ldrb	r3, [r7, #13]
 800830e:	2b80      	cmp	r3, #128	; 0x80
 8008310:	d103      	bne.n	800831a <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2209      	movs	r2, #9
 8008316:	761a      	strb	r2, [r3, #24]
    break;
 8008318:	e100      	b.n	800851c <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2207      	movs	r2, #7
 800831e:	761a      	strb	r2, [r3, #24]
    break;
 8008320:	e0fc      	b.n	800851c <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008322:	7bbb      	ldrb	r3, [r7, #14]
 8008324:	2b04      	cmp	r3, #4
 8008326:	d003      	beq.n	8008330 <USBH_HandleControl+0xcc>
 8008328:	7bbb      	ldrb	r3, [r7, #14]
 800832a:	2b02      	cmp	r3, #2
 800832c:	f040 80f6 	bne.w	800851c <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	220b      	movs	r2, #11
 8008334:	761a      	strb	r2, [r3, #24]
    break;
 8008336:	e0f1      	b.n	800851c <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800833e:	b29a      	uxth	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6899      	ldr	r1, [r3, #8]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	899a      	ldrh	r2, [r3, #12]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	791b      	ldrb	r3, [r3, #4]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f930 	bl	80085b6 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2204      	movs	r2, #4
 800835a:	761a      	strb	r2, [r3, #24]
    break;
 800835c:	e0e7      	b.n	800852e <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	791b      	ldrb	r3, [r3, #4]
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f001 fad1 	bl	800990c <USBH_LL_GetURBState>
 800836a:	4603      	mov	r3, r0
 800836c:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800836e:	7bbb      	ldrb	r3, [r7, #14]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d102      	bne.n	800837a <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2209      	movs	r2, #9
 8008378:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800837a:	7bbb      	ldrb	r3, [r7, #14]
 800837c:	2b05      	cmp	r3, #5
 800837e:	d102      	bne.n	8008386 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8008380:	2303      	movs	r3, #3
 8008382:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008384:	e0cc      	b.n	8008520 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8008386:	7bbb      	ldrb	r3, [r7, #14]
 8008388:	2b04      	cmp	r3, #4
 800838a:	f040 80c9 	bne.w	8008520 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	220b      	movs	r2, #11
 8008392:	761a      	strb	r2, [r3, #24]
    break;
 8008394:	e0c4      	b.n	8008520 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6899      	ldr	r1, [r3, #8]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	899a      	ldrh	r2, [r3, #12]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	7958      	ldrb	r0, [r3, #5]
 80083a2:	2301      	movs	r3, #1
 80083a4:	9300      	str	r3, [sp, #0]
 80083a6:	4603      	mov	r3, r0
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 f8df 	bl	800856c <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2206      	movs	r2, #6
 80083be:	761a      	strb	r2, [r3, #24]
    break;
 80083c0:	e0b5      	b.n	800852e <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	795b      	ldrb	r3, [r3, #5]
 80083c6:	4619      	mov	r1, r3
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f001 fa9f 	bl	800990c <USBH_LL_GetURBState>
 80083ce:	4603      	mov	r3, r0
 80083d0:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 80083d2:	7bbb      	ldrb	r3, [r7, #14]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d103      	bne.n	80083e0 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2207      	movs	r2, #7
 80083dc:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80083de:	e0a1      	b.n	8008524 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 80083e0:	7bbb      	ldrb	r3, [r7, #14]
 80083e2:	2b05      	cmp	r3, #5
 80083e4:	d105      	bne.n	80083f2 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	220c      	movs	r2, #12
 80083ea:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80083ec:	2303      	movs	r3, #3
 80083ee:	73fb      	strb	r3, [r7, #15]
    break;
 80083f0:	e098      	b.n	8008524 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80083f2:	7bbb      	ldrb	r3, [r7, #14]
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	d103      	bne.n	8008400 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2205      	movs	r2, #5
 80083fc:	761a      	strb	r2, [r3, #24]
    break;
 80083fe:	e091      	b.n	8008524 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8008400:	7bbb      	ldrb	r3, [r7, #14]
 8008402:	2b04      	cmp	r3, #4
 8008404:	f040 808e 	bne.w	8008524 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	220b      	movs	r2, #11
 800840c:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800840e:	2302      	movs	r3, #2
 8008410:	73fb      	strb	r3, [r7, #15]
    break;
 8008412:	e087      	b.n	8008524 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	791b      	ldrb	r3, [r3, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	2100      	movs	r1, #0
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f8ca 	bl	80085b6 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008428:	b29a      	uxth	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2208      	movs	r2, #8
 8008432:	761a      	strb	r2, [r3, #24]

    break;
 8008434:	e07b      	b.n	800852e <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	791b      	ldrb	r3, [r3, #4]
 800843a:	4619      	mov	r1, r3
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f001 fa65 	bl	800990c <USBH_LL_GetURBState>
 8008442:	4603      	mov	r3, r0
 8008444:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8008446:	7bbb      	ldrb	r3, [r7, #14]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d105      	bne.n	8008458 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	220d      	movs	r2, #13
 8008450:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8008452:	2300      	movs	r3, #0
 8008454:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008456:	e067      	b.n	8008528 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8008458:	7bbb      	ldrb	r3, [r7, #14]
 800845a:	2b04      	cmp	r3, #4
 800845c:	d103      	bne.n	8008466 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	220b      	movs	r2, #11
 8008462:	761a      	strb	r2, [r3, #24]
    break;
 8008464:	e060      	b.n	8008528 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8008466:	7bbb      	ldrb	r3, [r7, #14]
 8008468:	2b05      	cmp	r3, #5
 800846a:	d15d      	bne.n	8008528 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 800846c:	2303      	movs	r3, #3
 800846e:	73fb      	strb	r3, [r7, #15]
    break;
 8008470:	e05a      	b.n	8008528 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	795a      	ldrb	r2, [r3, #5]
 8008476:	2301      	movs	r3, #1
 8008478:	9300      	str	r3, [sp, #0]
 800847a:	4613      	mov	r3, r2
 800847c:	2200      	movs	r2, #0
 800847e:	2100      	movs	r1, #0
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 f873 	bl	800856c <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800848c:	b29a      	uxth	r2, r3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	220a      	movs	r2, #10
 8008496:	761a      	strb	r2, [r3, #24]
    break;
 8008498:	e049      	b.n	800852e <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	795b      	ldrb	r3, [r3, #5]
 800849e:	4619      	mov	r1, r3
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f001 fa33 	bl	800990c <USBH_LL_GetURBState>
 80084a6:	4603      	mov	r3, r0
 80084a8:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 80084aa:	7bbb      	ldrb	r3, [r7, #14]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d105      	bne.n	80084bc <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 80084b0:	2300      	movs	r3, #0
 80084b2:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	220d      	movs	r2, #13
 80084b8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 80084ba:	e037      	b.n	800852c <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80084bc:	7bbb      	ldrb	r3, [r7, #14]
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d103      	bne.n	80084ca <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2209      	movs	r2, #9
 80084c6:	761a      	strb	r2, [r3, #24]
    break;
 80084c8:	e030      	b.n	800852c <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 80084ca:	7bbb      	ldrb	r3, [r7, #14]
 80084cc:	2b04      	cmp	r3, #4
 80084ce:	d12d      	bne.n	800852c <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	220b      	movs	r2, #11
 80084d4:	761a      	strb	r2, [r3, #24]
    break;
 80084d6:	e029      	b.n	800852c <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	7e5b      	ldrb	r3, [r3, #25]
 80084dc:	3301      	adds	r3, #1
 80084de:	b2da      	uxtb	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	765a      	strb	r2, [r3, #25]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	7e5b      	ldrb	r3, [r3, #25]
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d809      	bhi.n	8008500 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f001 f920 	bl	8009732 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2201      	movs	r2, #1
 80084f6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 80084fe:	e016      	b.n	800852e <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008506:	2106      	movs	r1, #6
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8008512:	2302      	movs	r3, #2
 8008514:	73fb      	strb	r3, [r7, #15]
    break;
 8008516:	e00a      	b.n	800852e <USBH_HandleControl+0x2ca>

  default:
    break;
 8008518:	bf00      	nop
 800851a:	e008      	b.n	800852e <USBH_HandleControl+0x2ca>
    break;
 800851c:	bf00      	nop
 800851e:	e006      	b.n	800852e <USBH_HandleControl+0x2ca>
    break;
 8008520:	bf00      	nop
 8008522:	e004      	b.n	800852e <USBH_HandleControl+0x2ca>
    break;
 8008524:	bf00      	nop
 8008526:	e002      	b.n	800852e <USBH_HandleControl+0x2ca>
    break;
 8008528:	bf00      	nop
 800852a:	e000      	b.n	800852e <USBH_HandleControl+0x2ca>
    break;
 800852c:	bf00      	nop
  }
  return status;
 800852e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b088      	sub	sp, #32
 800853c:	af04      	add	r7, sp, #16
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	4613      	mov	r3, r2
 8008544:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008546:	79f9      	ldrb	r1, [r7, #7]
 8008548:	2300      	movs	r3, #0
 800854a:	9303      	str	r3, [sp, #12]
 800854c:	2308      	movs	r3, #8
 800854e:	9302      	str	r3, [sp, #8]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	9301      	str	r3, [sp, #4]
 8008554:	2300      	movs	r3, #0
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	2300      	movs	r3, #0
 800855a:	2200      	movs	r2, #0
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f001 f9a4 	bl	80098aa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b088      	sub	sp, #32
 8008570:	af04      	add	r7, sp, #16
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	4611      	mov	r1, r2
 8008578:	461a      	mov	r2, r3
 800857a:	460b      	mov	r3, r1
 800857c:	80fb      	strh	r3, [r7, #6]
 800857e:	4613      	mov	r3, r2
 8008580:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008588:	2b00      	cmp	r3, #0
 800858a:	d001      	beq.n	8008590 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800858c:	2300      	movs	r3, #0
 800858e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008590:	7979      	ldrb	r1, [r7, #5]
 8008592:	7e3b      	ldrb	r3, [r7, #24]
 8008594:	9303      	str	r3, [sp, #12]
 8008596:	88fb      	ldrh	r3, [r7, #6]
 8008598:	9302      	str	r3, [sp, #8]
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	9301      	str	r3, [sp, #4]
 800859e:	2301      	movs	r3, #1
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	2300      	movs	r3, #0
 80085a4:	2200      	movs	r2, #0
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f001 f97f 	bl	80098aa <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b088      	sub	sp, #32
 80085ba:	af04      	add	r7, sp, #16
 80085bc:	60f8      	str	r0, [r7, #12]
 80085be:	60b9      	str	r1, [r7, #8]
 80085c0:	4611      	mov	r1, r2
 80085c2:	461a      	mov	r2, r3
 80085c4:	460b      	mov	r3, r1
 80085c6:	80fb      	strh	r3, [r7, #6]
 80085c8:	4613      	mov	r3, r2
 80085ca:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80085cc:	7979      	ldrb	r1, [r7, #5]
 80085ce:	2300      	movs	r3, #0
 80085d0:	9303      	str	r3, [sp, #12]
 80085d2:	88fb      	ldrh	r3, [r7, #6]
 80085d4:	9302      	str	r3, [sp, #8]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	9301      	str	r3, [sp, #4]
 80085da:	2301      	movs	r3, #1
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	2300      	movs	r3, #0
 80085e0:	2201      	movs	r2, #1
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f001 f961 	bl	80098aa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80085e8:	2300      	movs	r3, #0

}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b088      	sub	sp, #32
 80085f6:	af04      	add	r7, sp, #16
 80085f8:	60f8      	str	r0, [r7, #12]
 80085fa:	60b9      	str	r1, [r7, #8]
 80085fc:	4611      	mov	r1, r2
 80085fe:	461a      	mov	r2, r3
 8008600:	460b      	mov	r3, r1
 8008602:	80fb      	strh	r3, [r7, #6]
 8008604:	4613      	mov	r3, r2
 8008606:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008612:	2300      	movs	r3, #0
 8008614:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008616:	7979      	ldrb	r1, [r7, #5]
 8008618:	7e3b      	ldrb	r3, [r7, #24]
 800861a:	9303      	str	r3, [sp, #12]
 800861c:	88fb      	ldrh	r3, [r7, #6]
 800861e:	9302      	str	r3, [sp, #8]
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	9301      	str	r3, [sp, #4]
 8008624:	2301      	movs	r3, #1
 8008626:	9300      	str	r3, [sp, #0]
 8008628:	2302      	movs	r3, #2
 800862a:	2200      	movs	r2, #0
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f001 f93c 	bl	80098aa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3710      	adds	r7, #16
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b088      	sub	sp, #32
 8008640:	af04      	add	r7, sp, #16
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	4611      	mov	r1, r2
 8008648:	461a      	mov	r2, r3
 800864a:	460b      	mov	r3, r1
 800864c:	80fb      	strh	r3, [r7, #6]
 800864e:	4613      	mov	r3, r2
 8008650:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008652:	7979      	ldrb	r1, [r7, #5]
 8008654:	2300      	movs	r3, #0
 8008656:	9303      	str	r3, [sp, #12]
 8008658:	88fb      	ldrh	r3, [r7, #6]
 800865a:	9302      	str	r3, [sp, #8]
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	9301      	str	r3, [sp, #4]
 8008660:	2301      	movs	r3, #1
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	2302      	movs	r3, #2
 8008666:	2201      	movs	r2, #1
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f001 f91e 	bl	80098aa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af04      	add	r7, sp, #16
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	4608      	mov	r0, r1
 8008682:	4611      	mov	r1, r2
 8008684:	461a      	mov	r2, r3
 8008686:	4603      	mov	r3, r0
 8008688:	70fb      	strb	r3, [r7, #3]
 800868a:	460b      	mov	r3, r1
 800868c:	70bb      	strb	r3, [r7, #2]
 800868e:	4613      	mov	r3, r2
 8008690:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8008692:	7878      	ldrb	r0, [r7, #1]
 8008694:	78ba      	ldrb	r2, [r7, #2]
 8008696:	78f9      	ldrb	r1, [r7, #3]
 8008698:	8b3b      	ldrh	r3, [r7, #24]
 800869a:	9302      	str	r3, [sp, #8]
 800869c:	7d3b      	ldrb	r3, [r7, #20]
 800869e:	9301      	str	r3, [sp, #4]
 80086a0:	7c3b      	ldrb	r3, [r7, #16]
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	4603      	mov	r3, r0
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f001 f8b1 	bl	800980e <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 80086ac:	2300      	movs	r3, #0

}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b082      	sub	sp, #8
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
 80086be:	460b      	mov	r3, r1
 80086c0:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 80086c2:	78fb      	ldrb	r3, [r7, #3]
 80086c4:	4619      	mov	r1, r3
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f001 f8d0 	bl	800986c <USBH_LL_ClosePipe>

  return USBH_OK;
 80086cc:	2300      	movs	r3, #0

}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3708      	adds	r7, #8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b084      	sub	sp, #16
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
 80086de:	460b      	mov	r3, r1
 80086e0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f831 	bl	800874a <USBH_GetFreePipe>
 80086e8:	4603      	mov	r3, r0
 80086ea:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80086ec:	89fb      	ldrh	r3, [r7, #14]
 80086ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d007      	beq.n	8008706 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 80086f6:	78fb      	ldrb	r3, [r7, #3]
 80086f8:	89fa      	ldrh	r2, [r7, #14]
 80086fa:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	32e0      	adds	r2, #224	; 0xe0
 8008702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8008706:	89fb      	ldrh	r3, [r7, #14]
 8008708:	b2db      	uxtb	r3, r3
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008712:	b480      	push	{r7}
 8008714:	b083      	sub	sp, #12
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
 800871a:	460b      	mov	r3, r1
 800871c:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800871e:	78fb      	ldrb	r3, [r7, #3]
 8008720:	2b0a      	cmp	r3, #10
 8008722:	d80b      	bhi.n	800873c <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8008724:	78fa      	ldrb	r2, [r7, #3]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	32e0      	adds	r2, #224	; 0xe0
 800872a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800872e:	78fa      	ldrb	r2, [r7, #3]
 8008730:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	32e0      	adds	r2, #224	; 0xe0
 8008738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr

0800874a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800874a:	b480      	push	{r7}
 800874c:	b085      	sub	sp, #20
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008752:	2300      	movs	r3, #0
 8008754:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008756:	2300      	movs	r3, #0
 8008758:	73fb      	strb	r3, [r7, #15]
 800875a:	e00e      	b.n	800877a <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800875c:	7bfa      	ldrb	r2, [r7, #15]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	32e0      	adds	r2, #224	; 0xe0
 8008762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008766:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d102      	bne.n	8008774 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800876e:	7bfb      	ldrb	r3, [r7, #15]
 8008770:	b29b      	uxth	r3, r3
 8008772:	e007      	b.n	8008784 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8008774:	7bfb      	ldrb	r3, [r7, #15]
 8008776:	3301      	adds	r3, #1
 8008778:	73fb      	strb	r3, [r7, #15]
 800877a:	7bfb      	ldrb	r3, [r7, #15]
 800877c:	2b0a      	cmp	r3, #10
 800877e:	d9ed      	bls.n	800875c <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8008780:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008784:	4618      	mov	r0, r3
 8008786:	3714      	adds	r7, #20
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <delay>:


  }
}*/
void delay (uint32_t us)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8008798:	4b08      	ldr	r3, [pc, #32]	; (80087bc <delay+0x2c>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2200      	movs	r2, #0
 800879e:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim4))<us);
 80087a0:	bf00      	nop
 80087a2:	4b06      	ldr	r3, [pc, #24]	; (80087bc <delay+0x2c>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d8f9      	bhi.n	80087a2 <delay+0x12>
}
 80087ae:	bf00      	nop
 80087b0:	370c      	adds	r7, #12
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	20000248 	.word	0x20000248

080087c0 <hcsr04_read>:
uint32_t hcsr04_read (void)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
	uint32_t local_time=0;
 80087c6:	2300      	movs	r3, #0
 80087c8:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);  // pull the TRIG pin HIGH
 80087ca:	2200      	movs	r2, #0
 80087cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80087d0:	4818      	ldr	r0, [pc, #96]	; (8008834 <hcsr04_read+0x74>)
 80087d2:	f7f8 fe23 	bl	800141c <HAL_GPIO_WritePin>
	delay(2);  // wait for 2 us
 80087d6:	2002      	movs	r0, #2
 80087d8:	f7ff ffda 	bl	8008790 <delay>


	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80087dc:	2201      	movs	r2, #1
 80087de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80087e2:	4814      	ldr	r0, [pc, #80]	; (8008834 <hcsr04_read+0x74>)
 80087e4:	f7f8 fe1a 	bl	800141c <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 80087e8:	200a      	movs	r0, #10
 80087ea:	f7ff ffd1 	bl	8008790 <delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);  // pull the TRIG pin low
 80087ee:	2200      	movs	r2, #0
 80087f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80087f4:	480f      	ldr	r0, [pc, #60]	; (8008834 <hcsr04_read+0x74>)
 80087f6:	f7f8 fe11 	bl	800141c <HAL_GPIO_WritePin>

	// read the time for which the pin is high

	while (!(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8)));  // wait for the ECHO pin to go high
 80087fa:	bf00      	nop
 80087fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008800:	480c      	ldr	r0, [pc, #48]	; (8008834 <hcsr04_read+0x74>)
 8008802:	f7f8 fdf3 	bl	80013ec <HAL_GPIO_ReadPin>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d0f7      	beq.n	80087fc <hcsr04_read+0x3c>
	while (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8))    // while the pin is high
 800880c:	e005      	b.n	800881a <hcsr04_read+0x5a>
	 {
		local_time++;   // measure time for which the pin is high
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	3301      	adds	r3, #1
 8008812:	607b      	str	r3, [r7, #4]
		delay (1);
 8008814:	2001      	movs	r0, #1
 8008816:	f7ff ffbb 	bl	8008790 <delay>
	while (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8))    // while the pin is high
 800881a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800881e:	4805      	ldr	r0, [pc, #20]	; (8008834 <hcsr04_read+0x74>)
 8008820:	f7f8 fde4 	bl	80013ec <HAL_GPIO_ReadPin>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1f1      	bne.n	800880e <hcsr04_read+0x4e>
	 }
	return local_time;
 800882a:	687b      	ldr	r3, [r7, #4]
}
 800882c:	4618      	mov	r0, r3
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	40020c00 	.word	0x40020c00

08008838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008838:	b5b0      	push	{r4, r5, r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800883e:	f7f8 fa95 	bl	8000d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008842:	f000 f897 	bl	8008974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008846:	f000 fa99 	bl	8008d7c <MX_GPIO_Init>
  MX_I2C1_Init();
 800884a:	f000 f915 	bl	8008a78 <MX_I2C1_Init>
  MX_I2S3_Init();
 800884e:	f000 f941 	bl	8008ad4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8008852:	f000 f96f 	bl	8008b34 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8008856:	f000 fe01 	bl	800945c <MX_USB_HOST_Init>
  MX_TIM3_Init();
 800885a:	f000 f9a1 	bl	8008ba0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800885e:	f000 f9ed 	bl	8008c3c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8008862:	f000 fa61 	bl	8008d28 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8008866:	210c      	movs	r1, #12
 8008868:	4837      	ldr	r0, [pc, #220]	; (8008948 <main+0x110>)
 800886a:	f7fb fe93 	bl	8004594 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800886e:	f000 fe1b 	bl	80094a8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    uint32_t sensor_time = hcsr04_read();
 8008872:	f7ff ffa5 	bl	80087c0 <hcsr04_read>
 8008876:	6038      	str	r0, [r7, #0]
    dist  = sensor_time * .034;
 8008878:	6838      	ldr	r0, [r7, #0]
 800887a:	f7f7 fe43 	bl	8000504 <__aeabi_ui2d>
 800887e:	a330      	add	r3, pc, #192	; (adr r3, 8008940 <main+0x108>)
 8008880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008884:	f7f7 feb8 	bl	80005f8 <__aeabi_dmul>
 8008888:	4603      	mov	r3, r0
 800888a:	460c      	mov	r4, r1
 800888c:	4a2f      	ldr	r2, [pc, #188]	; (800894c <main+0x114>)
 800888e:	e9c2 3400 	strd	r3, r4, [r2]
    if (HAL_UART_Receive(&huart2, &buf, 3, 50) == HAL_OK){
 8008892:	2332      	movs	r3, #50	; 0x32
 8008894:	2203      	movs	r2, #3
 8008896:	492e      	ldr	r1, [pc, #184]	; (8008950 <main+0x118>)
 8008898:	482e      	ldr	r0, [pc, #184]	; (8008954 <main+0x11c>)
 800889a:	f7fc fdf7 	bl	800548c <HAL_UART_Receive>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d104      	bne.n	80088ae <main+0x76>
        sscanf(buf, "%d", &t);
 80088a4:	4a2c      	ldr	r2, [pc, #176]	; (8008958 <main+0x120>)
 80088a6:	492d      	ldr	r1, [pc, #180]	; (800895c <main+0x124>)
 80088a8:	4829      	ldr	r0, [pc, #164]	; (8008950 <main+0x118>)
 80088aa:	f001 fa03 	bl	8009cb4 <siscanf>
    }
    pData[cnt] = (int)dist;
 80088ae:	4b27      	ldr	r3, [pc, #156]	; (800894c <main+0x114>)
 80088b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80088b4:	4a2a      	ldr	r2, [pc, #168]	; (8008960 <main+0x128>)
 80088b6:	6815      	ldr	r5, [r2, #0]
 80088b8:	4618      	mov	r0, r3
 80088ba:	4621      	mov	r1, r4
 80088bc:	f7f8 f8ae 	bl	8000a1c <__aeabi_d2iz>
 80088c0:	4602      	mov	r2, r0
 80088c2:	4b28      	ldr	r3, [pc, #160]	; (8008964 <main+0x12c>)
 80088c4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    if(cnt == 9){
 80088c8:	4b25      	ldr	r3, [pc, #148]	; (8008960 <main+0x128>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2b09      	cmp	r3, #9
 80088ce:	d12d      	bne.n	800892c <main+0xf4>
    	cnt = -1;
 80088d0:	4b23      	ldr	r3, [pc, #140]	; (8008960 <main+0x128>)
 80088d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088d6:	601a      	str	r2, [r3, #0]
    	c = 0;
 80088d8:	4b23      	ldr	r3, [pc, #140]	; (8008968 <main+0x130>)
 80088da:	2200      	movs	r2, #0
 80088dc:	601a      	str	r2, [r3, #0]
    	for(int i = 0; i < 10; i++){
 80088de:	2300      	movs	r3, #0
 80088e0:	607b      	str	r3, [r7, #4]
 80088e2:	e00f      	b.n	8008904 <main+0xcc>
    		if(pData[i] < t){
 80088e4:	4a1f      	ldr	r2, [pc, #124]	; (8008964 <main+0x12c>)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80088ec:	4b1a      	ldr	r3, [pc, #104]	; (8008958 <main+0x120>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	da04      	bge.n	80088fe <main+0xc6>
    			c++;
 80088f4:	4b1c      	ldr	r3, [pc, #112]	; (8008968 <main+0x130>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	3301      	adds	r3, #1
 80088fa:	4a1b      	ldr	r2, [pc, #108]	; (8008968 <main+0x130>)
 80088fc:	6013      	str	r3, [r2, #0]
    	for(int i = 0; i < 10; i++){
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	3301      	adds	r3, #1
 8008902:	607b      	str	r3, [r7, #4]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b09      	cmp	r3, #9
 8008908:	ddec      	ble.n	80088e4 <main+0xac>
    		}
    	}
    	if(c > 1){
 800890a:	4b17      	ldr	r3, [pc, #92]	; (8008968 <main+0x130>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2b01      	cmp	r3, #1
 8008910:	dd06      	ble.n	8008920 <main+0xe8>
    		HAL_UART_Transmit(&huart2, notify, 1, 50);
 8008912:	2332      	movs	r3, #50	; 0x32
 8008914:	2201      	movs	r2, #1
 8008916:	4915      	ldr	r1, [pc, #84]	; (800896c <main+0x134>)
 8008918:	480e      	ldr	r0, [pc, #56]	; (8008954 <main+0x11c>)
 800891a:	f7fc fd1e 	bl	800535a <HAL_UART_Transmit>
 800891e:	e005      	b.n	800892c <main+0xf4>
    	}else{
    		HAL_UART_Transmit(&huart2, notNotify, 1, 50);
 8008920:	2332      	movs	r3, #50	; 0x32
 8008922:	2201      	movs	r2, #1
 8008924:	4912      	ldr	r1, [pc, #72]	; (8008970 <main+0x138>)
 8008926:	480b      	ldr	r0, [pc, #44]	; (8008954 <main+0x11c>)
 8008928:	f7fc fd17 	bl	800535a <HAL_UART_Transmit>
    	}
    }
    cnt++;
 800892c:	4b0c      	ldr	r3, [pc, #48]	; (8008960 <main+0x128>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	3301      	adds	r3, #1
 8008932:	4a0b      	ldr	r2, [pc, #44]	; (8008960 <main+0x128>)
 8008934:	6013      	str	r3, [r2, #0]
    HAL_Delay(50);
 8008936:	2032      	movs	r0, #50	; 0x32
 8008938:	f7f8 fa8a 	bl	8000e50 <HAL_Delay>
  {
 800893c:	e797      	b.n	800886e <main+0x36>
 800893e:	bf00      	nop
 8008940:	b020c49c 	.word	0xb020c49c
 8008944:	3fa16872 	.word	0x3fa16872
 8008948:	20000248 	.word	0x20000248
 800894c:	20000228 	.word	0x20000228
 8008950:	20000348 	.word	0x20000348
 8008954:	200003a4 	.word	0x200003a4
 8008958:	20000028 	.word	0x20000028
 800895c:	0800a710 	.word	0x0800a710
 8008960:	20000230 	.word	0x20000230
 8008964:	200002dc 	.word	0x200002dc
 8008968:	20000344 	.word	0x20000344
 800896c:	2000002c 	.word	0x2000002c
 8008970:	20000030 	.word	0x20000030

08008974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b098      	sub	sp, #96	; 0x60
 8008978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800897a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800897e:	2230      	movs	r2, #48	; 0x30
 8008980:	2100      	movs	r1, #0
 8008982:	4618      	mov	r0, r3
 8008984:	f001 f8d6 	bl	8009b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008988:	f107 031c 	add.w	r3, r7, #28
 800898c:	2200      	movs	r2, #0
 800898e:	601a      	str	r2, [r3, #0]
 8008990:	605a      	str	r2, [r3, #4]
 8008992:	609a      	str	r2, [r3, #8]
 8008994:	60da      	str	r2, [r3, #12]
 8008996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008998:	f107 030c 	add.w	r3, r7, #12
 800899c:	2200      	movs	r2, #0
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	605a      	str	r2, [r3, #4]
 80089a2:	609a      	str	r2, [r3, #8]
 80089a4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80089a6:	2300      	movs	r3, #0
 80089a8:	60bb      	str	r3, [r7, #8]
 80089aa:	4b31      	ldr	r3, [pc, #196]	; (8008a70 <SystemClock_Config+0xfc>)
 80089ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ae:	4a30      	ldr	r2, [pc, #192]	; (8008a70 <SystemClock_Config+0xfc>)
 80089b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089b4:	6413      	str	r3, [r2, #64]	; 0x40
 80089b6:	4b2e      	ldr	r3, [pc, #184]	; (8008a70 <SystemClock_Config+0xfc>)
 80089b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089be:	60bb      	str	r3, [r7, #8]
 80089c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80089c2:	2300      	movs	r3, #0
 80089c4:	607b      	str	r3, [r7, #4]
 80089c6:	4b2b      	ldr	r3, [pc, #172]	; (8008a74 <SystemClock_Config+0x100>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a2a      	ldr	r2, [pc, #168]	; (8008a74 <SystemClock_Config+0x100>)
 80089cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089d0:	6013      	str	r3, [r2, #0]
 80089d2:	4b28      	ldr	r3, [pc, #160]	; (8008a74 <SystemClock_Config+0x100>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089da:	607b      	str	r3, [r7, #4]
 80089dc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80089de:	2301      	movs	r3, #1
 80089e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80089e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80089e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80089e8:	2302      	movs	r3, #2
 80089ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80089ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80089f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80089f2:	2308      	movs	r3, #8
 80089f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80089f6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80089fa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80089fc:	2302      	movs	r3, #2
 80089fe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8008a00:	2307      	movs	r3, #7
 8008a02:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008a04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7fa ff5f 	bl	80038cc <HAL_RCC_OscConfig>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d001      	beq.n	8008a18 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8008a14:	f000 fab6 	bl	8008f84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008a18:	230f      	movs	r3, #15
 8008a1a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008a20:	2300      	movs	r3, #0
 8008a22:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008a24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008a28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008a30:	f107 031c 	add.w	r3, r7, #28
 8008a34:	2105      	movs	r1, #5
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7fb f9b8 	bl	8003dac <HAL_RCC_ClockConfig>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8008a42:	f000 fa9f 	bl	8008f84 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8008a46:	2301      	movs	r3, #1
 8008a48:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8008a4a:	23c0      	movs	r3, #192	; 0xc0
 8008a4c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8008a4e:	2302      	movs	r3, #2
 8008a50:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008a52:	f107 030c 	add.w	r3, r7, #12
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fb fb9a 	bl	8004190 <HAL_RCCEx_PeriphCLKConfig>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8008a62:	f000 fa8f 	bl	8008f84 <Error_Handler>
  }
}
 8008a66:	bf00      	nop
 8008a68:	3760      	adds	r7, #96	; 0x60
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	40023800 	.word	0x40023800
 8008a74:	40007000 	.word	0x40007000

08008a78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008a7c:	4b12      	ldr	r3, [pc, #72]	; (8008ac8 <MX_I2C1_Init+0x50>)
 8008a7e:	4a13      	ldr	r2, [pc, #76]	; (8008acc <MX_I2C1_Init+0x54>)
 8008a80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8008a82:	4b11      	ldr	r3, [pc, #68]	; (8008ac8 <MX_I2C1_Init+0x50>)
 8008a84:	4a12      	ldr	r2, [pc, #72]	; (8008ad0 <MX_I2C1_Init+0x58>)
 8008a86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008a88:	4b0f      	ldr	r3, [pc, #60]	; (8008ac8 <MX_I2C1_Init+0x50>)
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008a8e:	4b0e      	ldr	r3, [pc, #56]	; (8008ac8 <MX_I2C1_Init+0x50>)
 8008a90:	2200      	movs	r2, #0
 8008a92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008a94:	4b0c      	ldr	r3, [pc, #48]	; (8008ac8 <MX_I2C1_Init+0x50>)
 8008a96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008a9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008a9c:	4b0a      	ldr	r3, [pc, #40]	; (8008ac8 <MX_I2C1_Init+0x50>)
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008aa2:	4b09      	ldr	r3, [pc, #36]	; (8008ac8 <MX_I2C1_Init+0x50>)
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008aa8:	4b07      	ldr	r3, [pc, #28]	; (8008ac8 <MX_I2C1_Init+0x50>)
 8008aaa:	2200      	movs	r2, #0
 8008aac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008aae:	4b06      	ldr	r3, [pc, #24]	; (8008ac8 <MX_I2C1_Init+0x50>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008ab4:	4804      	ldr	r0, [pc, #16]	; (8008ac8 <MX_I2C1_Init+0x50>)
 8008ab6:	f7fa f931 	bl	8002d1c <HAL_I2C_Init>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d001      	beq.n	8008ac4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008ac0:	f000 fa60 	bl	8008f84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8008ac4:	bf00      	nop
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	20000288 	.word	0x20000288
 8008acc:	40005400 	.word	0x40005400
 8008ad0:	000186a0 	.word	0x000186a0

08008ad4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8008ad8:	4b13      	ldr	r3, [pc, #76]	; (8008b28 <MX_I2S3_Init+0x54>)
 8008ada:	4a14      	ldr	r2, [pc, #80]	; (8008b2c <MX_I2S3_Init+0x58>)
 8008adc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8008ade:	4b12      	ldr	r3, [pc, #72]	; (8008b28 <MX_I2S3_Init+0x54>)
 8008ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ae4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8008ae6:	4b10      	ldr	r3, [pc, #64]	; (8008b28 <MX_I2S3_Init+0x54>)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8008aec:	4b0e      	ldr	r3, [pc, #56]	; (8008b28 <MX_I2S3_Init+0x54>)
 8008aee:	2200      	movs	r2, #0
 8008af0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8008af2:	4b0d      	ldr	r3, [pc, #52]	; (8008b28 <MX_I2S3_Init+0x54>)
 8008af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008af8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8008afa:	4b0b      	ldr	r3, [pc, #44]	; (8008b28 <MX_I2S3_Init+0x54>)
 8008afc:	4a0c      	ldr	r2, [pc, #48]	; (8008b30 <MX_I2S3_Init+0x5c>)
 8008afe:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8008b00:	4b09      	ldr	r3, [pc, #36]	; (8008b28 <MX_I2S3_Init+0x54>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8008b06:	4b08      	ldr	r3, [pc, #32]	; (8008b28 <MX_I2S3_Init+0x54>)
 8008b08:	2200      	movs	r2, #0
 8008b0a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8008b0c:	4b06      	ldr	r3, [pc, #24]	; (8008b28 <MX_I2S3_Init+0x54>)
 8008b0e:	2200      	movs	r2, #0
 8008b10:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8008b12:	4805      	ldr	r0, [pc, #20]	; (8008b28 <MX_I2S3_Init+0x54>)
 8008b14:	f7fa fa3a 	bl	8002f8c <HAL_I2S_Init>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d001      	beq.n	8008b22 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8008b1e:	f000 fa31 	bl	8008f84 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8008b22:	bf00      	nop
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	200003e4 	.word	0x200003e4
 8008b2c:	40003c00 	.word	0x40003c00
 8008b30:	00017700 	.word	0x00017700

08008b34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008b38:	4b17      	ldr	r3, [pc, #92]	; (8008b98 <MX_SPI1_Init+0x64>)
 8008b3a:	4a18      	ldr	r2, [pc, #96]	; (8008b9c <MX_SPI1_Init+0x68>)
 8008b3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008b3e:	4b16      	ldr	r3, [pc, #88]	; (8008b98 <MX_SPI1_Init+0x64>)
 8008b40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008b44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008b46:	4b14      	ldr	r3, [pc, #80]	; (8008b98 <MX_SPI1_Init+0x64>)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008b4c:	4b12      	ldr	r3, [pc, #72]	; (8008b98 <MX_SPI1_Init+0x64>)
 8008b4e:	2200      	movs	r2, #0
 8008b50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b52:	4b11      	ldr	r3, [pc, #68]	; (8008b98 <MX_SPI1_Init+0x64>)
 8008b54:	2200      	movs	r2, #0
 8008b56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008b58:	4b0f      	ldr	r3, [pc, #60]	; (8008b98 <MX_SPI1_Init+0x64>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008b5e:	4b0e      	ldr	r3, [pc, #56]	; (8008b98 <MX_SPI1_Init+0x64>)
 8008b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b66:	4b0c      	ldr	r3, [pc, #48]	; (8008b98 <MX_SPI1_Init+0x64>)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008b6c:	4b0a      	ldr	r3, [pc, #40]	; (8008b98 <MX_SPI1_Init+0x64>)
 8008b6e:	2200      	movs	r2, #0
 8008b70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008b72:	4b09      	ldr	r3, [pc, #36]	; (8008b98 <MX_SPI1_Init+0x64>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b78:	4b07      	ldr	r3, [pc, #28]	; (8008b98 <MX_SPI1_Init+0x64>)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8008b7e:	4b06      	ldr	r3, [pc, #24]	; (8008b98 <MX_SPI1_Init+0x64>)
 8008b80:	220a      	movs	r2, #10
 8008b82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008b84:	4804      	ldr	r0, [pc, #16]	; (8008b98 <MX_SPI1_Init+0x64>)
 8008b86:	f7fb fc41 	bl	800440c <HAL_SPI_Init>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d001      	beq.n	8008b94 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8008b90:	f000 f9f8 	bl	8008f84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008b94:	bf00      	nop
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	2000034c 	.word	0x2000034c
 8008b9c:	40013000 	.word	0x40013000

08008ba0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b086      	sub	sp, #24
 8008ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008ba6:	f107 0308 	add.w	r3, r7, #8
 8008baa:	2200      	movs	r2, #0
 8008bac:	601a      	str	r2, [r3, #0]
 8008bae:	605a      	str	r2, [r3, #4]
 8008bb0:	609a      	str	r2, [r3, #8]
 8008bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008bb4:	463b      	mov	r3, r7
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	601a      	str	r2, [r3, #0]
 8008bba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008bbc:	4b1d      	ldr	r3, [pc, #116]	; (8008c34 <MX_TIM3_Init+0x94>)
 8008bbe:	4a1e      	ldr	r2, [pc, #120]	; (8008c38 <MX_TIM3_Init+0x98>)
 8008bc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8008bc2:	4b1c      	ldr	r3, [pc, #112]	; (8008c34 <MX_TIM3_Init+0x94>)
 8008bc4:	22a7      	movs	r2, #167	; 0xa7
 8008bc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008bc8:	4b1a      	ldr	r3, [pc, #104]	; (8008c34 <MX_TIM3_Init+0x94>)
 8008bca:	2200      	movs	r2, #0
 8008bcc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8008bce:	4b19      	ldr	r3, [pc, #100]	; (8008c34 <MX_TIM3_Init+0x94>)
 8008bd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008bd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008bd6:	4b17      	ldr	r3, [pc, #92]	; (8008c34 <MX_TIM3_Init+0x94>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008bdc:	4b15      	ldr	r3, [pc, #84]	; (8008c34 <MX_TIM3_Init+0x94>)
 8008bde:	2280      	movs	r2, #128	; 0x80
 8008be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008be2:	4814      	ldr	r0, [pc, #80]	; (8008c34 <MX_TIM3_Init+0x94>)
 8008be4:	f7fb fc76 	bl	80044d4 <HAL_TIM_Base_Init>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d001      	beq.n	8008bf2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8008bee:	f000 f9c9 	bl	8008f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bf6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008bf8:	f107 0308 	add.w	r3, r7, #8
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	480d      	ldr	r0, [pc, #52]	; (8008c34 <MX_TIM3_Init+0x94>)
 8008c00:	f7fb fed4 	bl	80049ac <HAL_TIM_ConfigClockSource>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d001      	beq.n	8008c0e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8008c0a:	f000 f9bb 	bl	8008f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008c12:	2300      	movs	r3, #0
 8008c14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008c16:	463b      	mov	r3, r7
 8008c18:	4619      	mov	r1, r3
 8008c1a:	4806      	ldr	r0, [pc, #24]	; (8008c34 <MX_TIM3_Init+0x94>)
 8008c1c:	f7fc fac0 	bl	80051a0 <HAL_TIMEx_MasterConfigSynchronization>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8008c26:	f000 f9ad 	bl	8008f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8008c2a:	bf00      	nop
 8008c2c:	3718      	adds	r7, #24
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	20000304 	.word	0x20000304
 8008c38:	40000400 	.word	0x40000400

08008c3c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b08e      	sub	sp, #56	; 0x38
 8008c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008c42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008c46:	2200      	movs	r2, #0
 8008c48:	601a      	str	r2, [r3, #0]
 8008c4a:	605a      	str	r2, [r3, #4]
 8008c4c:	609a      	str	r2, [r3, #8]
 8008c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008c50:	f107 0320 	add.w	r3, r7, #32
 8008c54:	2200      	movs	r2, #0
 8008c56:	601a      	str	r2, [r3, #0]
 8008c58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008c5a:	1d3b      	adds	r3, r7, #4
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	605a      	str	r2, [r3, #4]
 8008c62:	609a      	str	r2, [r3, #8]
 8008c64:	60da      	str	r2, [r3, #12]
 8008c66:	611a      	str	r2, [r3, #16]
 8008c68:	615a      	str	r2, [r3, #20]
 8008c6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8008c6c:	4b2c      	ldr	r3, [pc, #176]	; (8008d20 <MX_TIM4_Init+0xe4>)
 8008c6e:	4a2d      	ldr	r2, [pc, #180]	; (8008d24 <MX_TIM4_Init+0xe8>)
 8008c70:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 167;
 8008c72:	4b2b      	ldr	r3, [pc, #172]	; (8008d20 <MX_TIM4_Init+0xe4>)
 8008c74:	22a7      	movs	r2, #167	; 0xa7
 8008c76:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c78:	4b29      	ldr	r3, [pc, #164]	; (8008d20 <MX_TIM4_Init+0xe4>)
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8008c7e:	4b28      	ldr	r3, [pc, #160]	; (8008d20 <MX_TIM4_Init+0xe4>)
 8008c80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008c84:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008c86:	4b26      	ldr	r3, [pc, #152]	; (8008d20 <MX_TIM4_Init+0xe4>)
 8008c88:	2200      	movs	r2, #0
 8008c8a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008c8c:	4b24      	ldr	r3, [pc, #144]	; (8008d20 <MX_TIM4_Init+0xe4>)
 8008c8e:	2280      	movs	r2, #128	; 0x80
 8008c90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8008c92:	4823      	ldr	r0, [pc, #140]	; (8008d20 <MX_TIM4_Init+0xe4>)
 8008c94:	f7fb fc1e 	bl	80044d4 <HAL_TIM_Base_Init>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d001      	beq.n	8008ca2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8008c9e:	f000 f971 	bl	8008f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8008ca8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008cac:	4619      	mov	r1, r3
 8008cae:	481c      	ldr	r0, [pc, #112]	; (8008d20 <MX_TIM4_Init+0xe4>)
 8008cb0:	f7fb fe7c 	bl	80049ac <HAL_TIM_ConfigClockSource>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d001      	beq.n	8008cbe <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8008cba:	f000 f963 	bl	8008f84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8008cbe:	4818      	ldr	r0, [pc, #96]	; (8008d20 <MX_TIM4_Init+0xe4>)
 8008cc0:	f7fb fc33 	bl	800452a <HAL_TIM_PWM_Init>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d001      	beq.n	8008cce <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8008cca:	f000 f95b 	bl	8008f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008cd6:	f107 0320 	add.w	r3, r7, #32
 8008cda:	4619      	mov	r1, r3
 8008cdc:	4810      	ldr	r0, [pc, #64]	; (8008d20 <MX_TIM4_Init+0xe4>)
 8008cde:	f7fc fa5f 	bl	80051a0 <HAL_TIMEx_MasterConfigSynchronization>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d001      	beq.n	8008cec <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8008ce8:	f000 f94c 	bl	8008f84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008cec:	2360      	movs	r3, #96	; 0x60
 8008cee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008cfc:	1d3b      	adds	r3, r7, #4
 8008cfe:	220c      	movs	r2, #12
 8008d00:	4619      	mov	r1, r3
 8008d02:	4807      	ldr	r0, [pc, #28]	; (8008d20 <MX_TIM4_Init+0xe4>)
 8008d04:	f7fb fd8c 	bl	8004820 <HAL_TIM_PWM_ConfigChannel>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d001      	beq.n	8008d12 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8008d0e:	f000 f939 	bl	8008f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8008d12:	4803      	ldr	r0, [pc, #12]	; (8008d20 <MX_TIM4_Init+0xe4>)
 8008d14:	f000 fa9c 	bl	8009250 <HAL_TIM_MspPostInit>

}
 8008d18:	bf00      	nop
 8008d1a:	3738      	adds	r7, #56	; 0x38
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	20000248 	.word	0x20000248
 8008d24:	40000800 	.word	0x40000800

08008d28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008d2c:	4b11      	ldr	r3, [pc, #68]	; (8008d74 <MX_USART2_UART_Init+0x4c>)
 8008d2e:	4a12      	ldr	r2, [pc, #72]	; (8008d78 <MX_USART2_UART_Init+0x50>)
 8008d30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008d32:	4b10      	ldr	r3, [pc, #64]	; (8008d74 <MX_USART2_UART_Init+0x4c>)
 8008d34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008d38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008d3a:	4b0e      	ldr	r3, [pc, #56]	; (8008d74 <MX_USART2_UART_Init+0x4c>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008d40:	4b0c      	ldr	r3, [pc, #48]	; (8008d74 <MX_USART2_UART_Init+0x4c>)
 8008d42:	2200      	movs	r2, #0
 8008d44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008d46:	4b0b      	ldr	r3, [pc, #44]	; (8008d74 <MX_USART2_UART_Init+0x4c>)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008d4c:	4b09      	ldr	r3, [pc, #36]	; (8008d74 <MX_USART2_UART_Init+0x4c>)
 8008d4e:	220c      	movs	r2, #12
 8008d50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008d52:	4b08      	ldr	r3, [pc, #32]	; (8008d74 <MX_USART2_UART_Init+0x4c>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008d58:	4b06      	ldr	r3, [pc, #24]	; (8008d74 <MX_USART2_UART_Init+0x4c>)
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008d5e:	4805      	ldr	r0, [pc, #20]	; (8008d74 <MX_USART2_UART_Init+0x4c>)
 8008d60:	f7fc faae 	bl	80052c0 <HAL_UART_Init>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d001      	beq.n	8008d6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8008d6a:	f000 f90b 	bl	8008f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008d6e:	bf00      	nop
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	200003a4 	.word	0x200003a4
 8008d78:	40004400 	.word	0x40004400

08008d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b08c      	sub	sp, #48	; 0x30
 8008d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d82:	f107 031c 	add.w	r3, r7, #28
 8008d86:	2200      	movs	r2, #0
 8008d88:	601a      	str	r2, [r3, #0]
 8008d8a:	605a      	str	r2, [r3, #4]
 8008d8c:	609a      	str	r2, [r3, #8]
 8008d8e:	60da      	str	r2, [r3, #12]
 8008d90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008d92:	2300      	movs	r3, #0
 8008d94:	61bb      	str	r3, [r7, #24]
 8008d96:	4b74      	ldr	r3, [pc, #464]	; (8008f68 <MX_GPIO_Init+0x1ec>)
 8008d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d9a:	4a73      	ldr	r2, [pc, #460]	; (8008f68 <MX_GPIO_Init+0x1ec>)
 8008d9c:	f043 0310 	orr.w	r3, r3, #16
 8008da0:	6313      	str	r3, [r2, #48]	; 0x30
 8008da2:	4b71      	ldr	r3, [pc, #452]	; (8008f68 <MX_GPIO_Init+0x1ec>)
 8008da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da6:	f003 0310 	and.w	r3, r3, #16
 8008daa:	61bb      	str	r3, [r7, #24]
 8008dac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008dae:	2300      	movs	r3, #0
 8008db0:	617b      	str	r3, [r7, #20]
 8008db2:	4b6d      	ldr	r3, [pc, #436]	; (8008f68 <MX_GPIO_Init+0x1ec>)
 8008db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db6:	4a6c      	ldr	r2, [pc, #432]	; (8008f68 <MX_GPIO_Init+0x1ec>)
 8008db8:	f043 0304 	orr.w	r3, r3, #4
 8008dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8008dbe:	4b6a      	ldr	r3, [pc, #424]	; (8008f68 <MX_GPIO_Init+0x1ec>)
 8008dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc2:	f003 0304 	and.w	r3, r3, #4
 8008dc6:	617b      	str	r3, [r7, #20]
 8008dc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008dca:	2300      	movs	r3, #0
 8008dcc:	613b      	str	r3, [r7, #16]
 8008dce:	4b66      	ldr	r3, [pc, #408]	; (8008f68 <MX_GPIO_Init+0x1ec>)
 8008dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd2:	4a65      	ldr	r2, [pc, #404]	; (8008f68 <MX_GPIO_Init+0x1ec>)
 8008dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8008dda:	4b63      	ldr	r3, [pc, #396]	; (8008f68 <MX_GPIO_Init+0x1ec>)
 8008ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008de2:	613b      	str	r3, [r7, #16]
 8008de4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008de6:	2300      	movs	r3, #0
 8008de8:	60fb      	str	r3, [r7, #12]
 8008dea:	4b5f      	ldr	r3, [pc, #380]	; (8008f68 <MX_GPIO_Init+0x1ec>)
 8008dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dee:	4a5e      	ldr	r2, [pc, #376]	; (8008f68 <MX_GPIO_Init+0x1ec>)
 8008df0:	f043 0301 	orr.w	r3, r3, #1
 8008df4:	6313      	str	r3, [r2, #48]	; 0x30
 8008df6:	4b5c      	ldr	r3, [pc, #368]	; (8008f68 <MX_GPIO_Init+0x1ec>)
 8008df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dfa:	f003 0301 	and.w	r3, r3, #1
 8008dfe:	60fb      	str	r3, [r7, #12]
 8008e00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e02:	2300      	movs	r3, #0
 8008e04:	60bb      	str	r3, [r7, #8]
 8008e06:	4b58      	ldr	r3, [pc, #352]	; (8008f68 <MX_GPIO_Init+0x1ec>)
 8008e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e0a:	4a57      	ldr	r2, [pc, #348]	; (8008f68 <MX_GPIO_Init+0x1ec>)
 8008e0c:	f043 0302 	orr.w	r3, r3, #2
 8008e10:	6313      	str	r3, [r2, #48]	; 0x30
 8008e12:	4b55      	ldr	r3, [pc, #340]	; (8008f68 <MX_GPIO_Init+0x1ec>)
 8008e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e16:	f003 0302 	and.w	r3, r3, #2
 8008e1a:	60bb      	str	r3, [r7, #8]
 8008e1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008e1e:	2300      	movs	r3, #0
 8008e20:	607b      	str	r3, [r7, #4]
 8008e22:	4b51      	ldr	r3, [pc, #324]	; (8008f68 <MX_GPIO_Init+0x1ec>)
 8008e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e26:	4a50      	ldr	r2, [pc, #320]	; (8008f68 <MX_GPIO_Init+0x1ec>)
 8008e28:	f043 0308 	orr.w	r3, r3, #8
 8008e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8008e2e:	4b4e      	ldr	r3, [pc, #312]	; (8008f68 <MX_GPIO_Init+0x1ec>)
 8008e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e32:	f003 0308 	and.w	r3, r3, #8
 8008e36:	607b      	str	r3, [r7, #4]
 8008e38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	2108      	movs	r1, #8
 8008e3e:	484b      	ldr	r0, [pc, #300]	; (8008f6c <MX_GPIO_Init+0x1f0>)
 8008e40:	f7f8 faec 	bl	800141c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8008e44:	2201      	movs	r2, #1
 8008e46:	2101      	movs	r1, #1
 8008e48:	4849      	ldr	r0, [pc, #292]	; (8008f70 <MX_GPIO_Init+0x1f4>)
 8008e4a:	f7f8 fae7 	bl	800141c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|Audio_RST_Pin, GPIO_PIN_RESET);
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f44f 7104 	mov.w	r1, #528	; 0x210
 8008e54:	4847      	ldr	r0, [pc, #284]	; (8008f74 <MX_GPIO_Init+0x1f8>)
 8008e56:	f7f8 fae1 	bl	800141c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	2140      	movs	r1, #64	; 0x40
 8008e5e:	4844      	ldr	r0, [pc, #272]	; (8008f70 <MX_GPIO_Init+0x1f4>)
 8008e60:	f7f8 fadc 	bl	800141c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8008e64:	2308      	movs	r3, #8
 8008e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e70:	2300      	movs	r3, #0
 8008e72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8008e74:	f107 031c 	add.w	r3, r7, #28
 8008e78:	4619      	mov	r1, r3
 8008e7a:	483c      	ldr	r0, [pc, #240]	; (8008f6c <MX_GPIO_Init+0x1f0>)
 8008e7c:	f7f8 f91c 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC6 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_6;
 8008e80:	2341      	movs	r3, #65	; 0x41
 8008e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e84:	2301      	movs	r3, #1
 8008e86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e90:	f107 031c 	add.w	r3, r7, #28
 8008e94:	4619      	mov	r1, r3
 8008e96:	4836      	ldr	r0, [pc, #216]	; (8008f70 <MX_GPIO_Init+0x1f4>)
 8008e98:	f7f8 f90e 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8008e9c:	2308      	movs	r3, #8
 8008e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008eac:	2305      	movs	r3, #5
 8008eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8008eb0:	f107 031c 	add.w	r3, r7, #28
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	482e      	ldr	r0, [pc, #184]	; (8008f70 <MX_GPIO_Init+0x1f4>)
 8008eb8:	f7f8 f8fe 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008ec0:	4b2d      	ldr	r3, [pc, #180]	; (8008f78 <MX_GPIO_Init+0x1fc>)
 8008ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008ec8:	f107 031c 	add.w	r3, r7, #28
 8008ecc:	4619      	mov	r1, r3
 8008ece:	482b      	ldr	r0, [pc, #172]	; (8008f7c <MX_GPIO_Init+0x200>)
 8008ed0:	f7f8 f8f2 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8008ed4:	2304      	movs	r3, #4
 8008ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008edc:	2300      	movs	r3, #0
 8008ede:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8008ee0:	f107 031c 	add.w	r3, r7, #28
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	4826      	ldr	r0, [pc, #152]	; (8008f80 <MX_GPIO_Init+0x204>)
 8008ee8:	f7f8 f8e6 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8008eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ef0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008efa:	2300      	movs	r3, #0
 8008efc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008efe:	2305      	movs	r3, #5
 8008f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8008f02:	f107 031c 	add.w	r3, r7, #28
 8008f06:	4619      	mov	r1, r3
 8008f08:	481d      	ldr	r0, [pc, #116]	; (8008f80 <MX_GPIO_Init+0x204>)
 8008f0a:	f7f8 f8d5 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|OTG_FS_OverCurrent_Pin;
 8008f0e:	f44f 7390 	mov.w	r3, #288	; 0x120
 8008f12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f14:	2300      	movs	r3, #0
 8008f16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008f1c:	f107 031c 	add.w	r3, r7, #28
 8008f20:	4619      	mov	r1, r3
 8008f22:	4814      	ldr	r0, [pc, #80]	; (8008f74 <MX_GPIO_Init+0x1f8>)
 8008f24:	f7f8 f8c8 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|Audio_RST_Pin;
 8008f28:	f44f 7304 	mov.w	r3, #528	; 0x210
 8008f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f32:	2300      	movs	r3, #0
 8008f34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f36:	2300      	movs	r3, #0
 8008f38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008f3a:	f107 031c 	add.w	r3, r7, #28
 8008f3e:	4619      	mov	r1, r3
 8008f40:	480c      	ldr	r0, [pc, #48]	; (8008f74 <MX_GPIO_Init+0x1f8>)
 8008f42:	f7f8 f8b9 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8008f46:	2302      	movs	r3, #2
 8008f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008f4a:	4b0b      	ldr	r3, [pc, #44]	; (8008f78 <MX_GPIO_Init+0x1fc>)
 8008f4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8008f52:	f107 031c 	add.w	r3, r7, #28
 8008f56:	4619      	mov	r1, r3
 8008f58:	4804      	ldr	r0, [pc, #16]	; (8008f6c <MX_GPIO_Init+0x1f0>)
 8008f5a:	f7f8 f8ad 	bl	80010b8 <HAL_GPIO_Init>

}
 8008f5e:	bf00      	nop
 8008f60:	3730      	adds	r7, #48	; 0x30
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	40023800 	.word	0x40023800
 8008f6c:	40021000 	.word	0x40021000
 8008f70:	40020800 	.word	0x40020800
 8008f74:	40020c00 	.word	0x40020c00
 8008f78:	10120000 	.word	0x10120000
 8008f7c:	40020000 	.word	0x40020000
 8008f80:	40020400 	.word	0x40020400

08008f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008f84:	b480      	push	{r7}
 8008f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008f88:	bf00      	nop
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
	...

08008f94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	607b      	str	r3, [r7, #4]
 8008f9e:	4b10      	ldr	r3, [pc, #64]	; (8008fe0 <HAL_MspInit+0x4c>)
 8008fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fa2:	4a0f      	ldr	r2, [pc, #60]	; (8008fe0 <HAL_MspInit+0x4c>)
 8008fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8008faa:	4b0d      	ldr	r3, [pc, #52]	; (8008fe0 <HAL_MspInit+0x4c>)
 8008fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fb2:	607b      	str	r3, [r7, #4]
 8008fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	603b      	str	r3, [r7, #0]
 8008fba:	4b09      	ldr	r3, [pc, #36]	; (8008fe0 <HAL_MspInit+0x4c>)
 8008fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fbe:	4a08      	ldr	r2, [pc, #32]	; (8008fe0 <HAL_MspInit+0x4c>)
 8008fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8008fc6:	4b06      	ldr	r3, [pc, #24]	; (8008fe0 <HAL_MspInit+0x4c>)
 8008fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fce:	603b      	str	r3, [r7, #0]
 8008fd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8008fd2:	2007      	movs	r0, #7
 8008fd4:	f7f8 f82e 	bl	8001034 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008fd8:	bf00      	nop
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	40023800 	.word	0x40023800

08008fe4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b08a      	sub	sp, #40	; 0x28
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fec:	f107 0314 	add.w	r3, r7, #20
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	601a      	str	r2, [r3, #0]
 8008ff4:	605a      	str	r2, [r3, #4]
 8008ff6:	609a      	str	r2, [r3, #8]
 8008ff8:	60da      	str	r2, [r3, #12]
 8008ffa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a19      	ldr	r2, [pc, #100]	; (8009068 <HAL_I2C_MspInit+0x84>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d12c      	bne.n	8009060 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009006:	2300      	movs	r3, #0
 8009008:	613b      	str	r3, [r7, #16]
 800900a:	4b18      	ldr	r3, [pc, #96]	; (800906c <HAL_I2C_MspInit+0x88>)
 800900c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800900e:	4a17      	ldr	r2, [pc, #92]	; (800906c <HAL_I2C_MspInit+0x88>)
 8009010:	f043 0302 	orr.w	r3, r3, #2
 8009014:	6313      	str	r3, [r2, #48]	; 0x30
 8009016:	4b15      	ldr	r3, [pc, #84]	; (800906c <HAL_I2C_MspInit+0x88>)
 8009018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800901a:	f003 0302 	and.w	r3, r3, #2
 800901e:	613b      	str	r3, [r7, #16]
 8009020:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8009022:	f44f 7310 	mov.w	r3, #576	; 0x240
 8009026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009028:	2312      	movs	r3, #18
 800902a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800902c:	2301      	movs	r3, #1
 800902e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009030:	2300      	movs	r3, #0
 8009032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009034:	2304      	movs	r3, #4
 8009036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009038:	f107 0314 	add.w	r3, r7, #20
 800903c:	4619      	mov	r1, r3
 800903e:	480c      	ldr	r0, [pc, #48]	; (8009070 <HAL_I2C_MspInit+0x8c>)
 8009040:	f7f8 f83a 	bl	80010b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009044:	2300      	movs	r3, #0
 8009046:	60fb      	str	r3, [r7, #12]
 8009048:	4b08      	ldr	r3, [pc, #32]	; (800906c <HAL_I2C_MspInit+0x88>)
 800904a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904c:	4a07      	ldr	r2, [pc, #28]	; (800906c <HAL_I2C_MspInit+0x88>)
 800904e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009052:	6413      	str	r3, [r2, #64]	; 0x40
 8009054:	4b05      	ldr	r3, [pc, #20]	; (800906c <HAL_I2C_MspInit+0x88>)
 8009056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800905c:	60fb      	str	r3, [r7, #12]
 800905e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8009060:	bf00      	nop
 8009062:	3728      	adds	r7, #40	; 0x28
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	40005400 	.word	0x40005400
 800906c:	40023800 	.word	0x40023800
 8009070:	40020400 	.word	0x40020400

08009074 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b08a      	sub	sp, #40	; 0x28
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800907c:	f107 0314 	add.w	r3, r7, #20
 8009080:	2200      	movs	r2, #0
 8009082:	601a      	str	r2, [r3, #0]
 8009084:	605a      	str	r2, [r3, #4]
 8009086:	609a      	str	r2, [r3, #8]
 8009088:	60da      	str	r2, [r3, #12]
 800908a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a28      	ldr	r2, [pc, #160]	; (8009134 <HAL_I2S_MspInit+0xc0>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d14a      	bne.n	800912c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8009096:	2300      	movs	r3, #0
 8009098:	613b      	str	r3, [r7, #16]
 800909a:	4b27      	ldr	r3, [pc, #156]	; (8009138 <HAL_I2S_MspInit+0xc4>)
 800909c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800909e:	4a26      	ldr	r2, [pc, #152]	; (8009138 <HAL_I2S_MspInit+0xc4>)
 80090a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090a4:	6413      	str	r3, [r2, #64]	; 0x40
 80090a6:	4b24      	ldr	r3, [pc, #144]	; (8009138 <HAL_I2S_MspInit+0xc4>)
 80090a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090ae:	613b      	str	r3, [r7, #16]
 80090b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090b2:	2300      	movs	r3, #0
 80090b4:	60fb      	str	r3, [r7, #12]
 80090b6:	4b20      	ldr	r3, [pc, #128]	; (8009138 <HAL_I2S_MspInit+0xc4>)
 80090b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ba:	4a1f      	ldr	r2, [pc, #124]	; (8009138 <HAL_I2S_MspInit+0xc4>)
 80090bc:	f043 0301 	orr.w	r3, r3, #1
 80090c0:	6313      	str	r3, [r2, #48]	; 0x30
 80090c2:	4b1d      	ldr	r3, [pc, #116]	; (8009138 <HAL_I2S_MspInit+0xc4>)
 80090c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c6:	f003 0301 	and.w	r3, r3, #1
 80090ca:	60fb      	str	r3, [r7, #12]
 80090cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80090ce:	2300      	movs	r3, #0
 80090d0:	60bb      	str	r3, [r7, #8]
 80090d2:	4b19      	ldr	r3, [pc, #100]	; (8009138 <HAL_I2S_MspInit+0xc4>)
 80090d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d6:	4a18      	ldr	r2, [pc, #96]	; (8009138 <HAL_I2S_MspInit+0xc4>)
 80090d8:	f043 0304 	orr.w	r3, r3, #4
 80090dc:	6313      	str	r3, [r2, #48]	; 0x30
 80090de:	4b16      	ldr	r3, [pc, #88]	; (8009138 <HAL_I2S_MspInit+0xc4>)
 80090e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e2:	f003 0304 	and.w	r3, r3, #4
 80090e6:	60bb      	str	r3, [r7, #8]
 80090e8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80090ea:	2310      	movs	r3, #16
 80090ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090ee:	2302      	movs	r3, #2
 80090f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090f2:	2300      	movs	r3, #0
 80090f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090f6:	2300      	movs	r3, #0
 80090f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80090fa:	2306      	movs	r3, #6
 80090fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80090fe:	f107 0314 	add.w	r3, r7, #20
 8009102:	4619      	mov	r1, r3
 8009104:	480d      	ldr	r0, [pc, #52]	; (800913c <HAL_I2S_MspInit+0xc8>)
 8009106:	f7f7 ffd7 	bl	80010b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800910a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800910e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009110:	2302      	movs	r3, #2
 8009112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009114:	2300      	movs	r3, #0
 8009116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009118:	2300      	movs	r3, #0
 800911a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800911c:	2306      	movs	r3, #6
 800911e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009120:	f107 0314 	add.w	r3, r7, #20
 8009124:	4619      	mov	r1, r3
 8009126:	4806      	ldr	r0, [pc, #24]	; (8009140 <HAL_I2S_MspInit+0xcc>)
 8009128:	f7f7 ffc6 	bl	80010b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800912c:	bf00      	nop
 800912e:	3728      	adds	r7, #40	; 0x28
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}
 8009134:	40003c00 	.word	0x40003c00
 8009138:	40023800 	.word	0x40023800
 800913c:	40020000 	.word	0x40020000
 8009140:	40020800 	.word	0x40020800

08009144 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b08a      	sub	sp, #40	; 0x28
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800914c:	f107 0314 	add.w	r3, r7, #20
 8009150:	2200      	movs	r2, #0
 8009152:	601a      	str	r2, [r3, #0]
 8009154:	605a      	str	r2, [r3, #4]
 8009156:	609a      	str	r2, [r3, #8]
 8009158:	60da      	str	r2, [r3, #12]
 800915a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a19      	ldr	r2, [pc, #100]	; (80091c8 <HAL_SPI_MspInit+0x84>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d12b      	bne.n	80091be <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009166:	2300      	movs	r3, #0
 8009168:	613b      	str	r3, [r7, #16]
 800916a:	4b18      	ldr	r3, [pc, #96]	; (80091cc <HAL_SPI_MspInit+0x88>)
 800916c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800916e:	4a17      	ldr	r2, [pc, #92]	; (80091cc <HAL_SPI_MspInit+0x88>)
 8009170:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009174:	6453      	str	r3, [r2, #68]	; 0x44
 8009176:	4b15      	ldr	r3, [pc, #84]	; (80091cc <HAL_SPI_MspInit+0x88>)
 8009178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800917a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800917e:	613b      	str	r3, [r7, #16]
 8009180:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009182:	2300      	movs	r3, #0
 8009184:	60fb      	str	r3, [r7, #12]
 8009186:	4b11      	ldr	r3, [pc, #68]	; (80091cc <HAL_SPI_MspInit+0x88>)
 8009188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918a:	4a10      	ldr	r2, [pc, #64]	; (80091cc <HAL_SPI_MspInit+0x88>)
 800918c:	f043 0301 	orr.w	r3, r3, #1
 8009190:	6313      	str	r3, [r2, #48]	; 0x30
 8009192:	4b0e      	ldr	r3, [pc, #56]	; (80091cc <HAL_SPI_MspInit+0x88>)
 8009194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009196:	f003 0301 	and.w	r3, r3, #1
 800919a:	60fb      	str	r3, [r7, #12]
 800919c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800919e:	23e0      	movs	r3, #224	; 0xe0
 80091a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091a2:	2302      	movs	r3, #2
 80091a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091a6:	2300      	movs	r3, #0
 80091a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091aa:	2300      	movs	r3, #0
 80091ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80091ae:	2305      	movs	r3, #5
 80091b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091b2:	f107 0314 	add.w	r3, r7, #20
 80091b6:	4619      	mov	r1, r3
 80091b8:	4805      	ldr	r0, [pc, #20]	; (80091d0 <HAL_SPI_MspInit+0x8c>)
 80091ba:	f7f7 ff7d 	bl	80010b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80091be:	bf00      	nop
 80091c0:	3728      	adds	r7, #40	; 0x28
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	40013000 	.word	0x40013000
 80091cc:	40023800 	.word	0x40023800
 80091d0:	40020000 	.word	0x40020000

080091d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a18      	ldr	r2, [pc, #96]	; (8009244 <HAL_TIM_Base_MspInit+0x70>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d10e      	bne.n	8009204 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80091e6:	2300      	movs	r3, #0
 80091e8:	60fb      	str	r3, [r7, #12]
 80091ea:	4b17      	ldr	r3, [pc, #92]	; (8009248 <HAL_TIM_Base_MspInit+0x74>)
 80091ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ee:	4a16      	ldr	r2, [pc, #88]	; (8009248 <HAL_TIM_Base_MspInit+0x74>)
 80091f0:	f043 0302 	orr.w	r3, r3, #2
 80091f4:	6413      	str	r3, [r2, #64]	; 0x40
 80091f6:	4b14      	ldr	r3, [pc, #80]	; (8009248 <HAL_TIM_Base_MspInit+0x74>)
 80091f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091fa:	f003 0302 	and.w	r3, r3, #2
 80091fe:	60fb      	str	r3, [r7, #12]
 8009200:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8009202:	e01a      	b.n	800923a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a10      	ldr	r2, [pc, #64]	; (800924c <HAL_TIM_Base_MspInit+0x78>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d115      	bne.n	800923a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800920e:	2300      	movs	r3, #0
 8009210:	60bb      	str	r3, [r7, #8]
 8009212:	4b0d      	ldr	r3, [pc, #52]	; (8009248 <HAL_TIM_Base_MspInit+0x74>)
 8009214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009216:	4a0c      	ldr	r2, [pc, #48]	; (8009248 <HAL_TIM_Base_MspInit+0x74>)
 8009218:	f043 0304 	orr.w	r3, r3, #4
 800921c:	6413      	str	r3, [r2, #64]	; 0x40
 800921e:	4b0a      	ldr	r3, [pc, #40]	; (8009248 <HAL_TIM_Base_MspInit+0x74>)
 8009220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009222:	f003 0304 	and.w	r3, r3, #4
 8009226:	60bb      	str	r3, [r7, #8]
 8009228:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800922a:	2200      	movs	r2, #0
 800922c:	2100      	movs	r1, #0
 800922e:	201e      	movs	r0, #30
 8009230:	f7f7 ff0b 	bl	800104a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8009234:	201e      	movs	r0, #30
 8009236:	f7f7 ff24 	bl	8001082 <HAL_NVIC_EnableIRQ>
}
 800923a:	bf00      	nop
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	40000400 	.word	0x40000400
 8009248:	40023800 	.word	0x40023800
 800924c:	40000800 	.word	0x40000800

08009250 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b088      	sub	sp, #32
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009258:	f107 030c 	add.w	r3, r7, #12
 800925c:	2200      	movs	r2, #0
 800925e:	601a      	str	r2, [r3, #0]
 8009260:	605a      	str	r2, [r3, #4]
 8009262:	609a      	str	r2, [r3, #8]
 8009264:	60da      	str	r2, [r3, #12]
 8009266:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a12      	ldr	r2, [pc, #72]	; (80092b8 <HAL_TIM_MspPostInit+0x68>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d11e      	bne.n	80092b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009272:	2300      	movs	r3, #0
 8009274:	60bb      	str	r3, [r7, #8]
 8009276:	4b11      	ldr	r3, [pc, #68]	; (80092bc <HAL_TIM_MspPostInit+0x6c>)
 8009278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800927a:	4a10      	ldr	r2, [pc, #64]	; (80092bc <HAL_TIM_MspPostInit+0x6c>)
 800927c:	f043 0308 	orr.w	r3, r3, #8
 8009280:	6313      	str	r3, [r2, #48]	; 0x30
 8009282:	4b0e      	ldr	r3, [pc, #56]	; (80092bc <HAL_TIM_MspPostInit+0x6c>)
 8009284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009286:	f003 0308 	and.w	r3, r3, #8
 800928a:	60bb      	str	r3, [r7, #8]
 800928c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800928e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009292:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009294:	2302      	movs	r3, #2
 8009296:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009298:	2300      	movs	r3, #0
 800929a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800929c:	2300      	movs	r3, #0
 800929e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80092a0:	2302      	movs	r3, #2
 80092a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80092a4:	f107 030c 	add.w	r3, r7, #12
 80092a8:	4619      	mov	r1, r3
 80092aa:	4805      	ldr	r0, [pc, #20]	; (80092c0 <HAL_TIM_MspPostInit+0x70>)
 80092ac:	f7f7 ff04 	bl	80010b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80092b0:	bf00      	nop
 80092b2:	3720      	adds	r7, #32
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	40000800 	.word	0x40000800
 80092bc:	40023800 	.word	0x40023800
 80092c0:	40020c00 	.word	0x40020c00

080092c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b08a      	sub	sp, #40	; 0x28
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092cc:	f107 0314 	add.w	r3, r7, #20
 80092d0:	2200      	movs	r2, #0
 80092d2:	601a      	str	r2, [r3, #0]
 80092d4:	605a      	str	r2, [r3, #4]
 80092d6:	609a      	str	r2, [r3, #8]
 80092d8:	60da      	str	r2, [r3, #12]
 80092da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a19      	ldr	r2, [pc, #100]	; (8009348 <HAL_UART_MspInit+0x84>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d12b      	bne.n	800933e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80092e6:	2300      	movs	r3, #0
 80092e8:	613b      	str	r3, [r7, #16]
 80092ea:	4b18      	ldr	r3, [pc, #96]	; (800934c <HAL_UART_MspInit+0x88>)
 80092ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ee:	4a17      	ldr	r2, [pc, #92]	; (800934c <HAL_UART_MspInit+0x88>)
 80092f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092f4:	6413      	str	r3, [r2, #64]	; 0x40
 80092f6:	4b15      	ldr	r3, [pc, #84]	; (800934c <HAL_UART_MspInit+0x88>)
 80092f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092fe:	613b      	str	r3, [r7, #16]
 8009300:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009302:	2300      	movs	r3, #0
 8009304:	60fb      	str	r3, [r7, #12]
 8009306:	4b11      	ldr	r3, [pc, #68]	; (800934c <HAL_UART_MspInit+0x88>)
 8009308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800930a:	4a10      	ldr	r2, [pc, #64]	; (800934c <HAL_UART_MspInit+0x88>)
 800930c:	f043 0301 	orr.w	r3, r3, #1
 8009310:	6313      	str	r3, [r2, #48]	; 0x30
 8009312:	4b0e      	ldr	r3, [pc, #56]	; (800934c <HAL_UART_MspInit+0x88>)
 8009314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009316:	f003 0301 	and.w	r3, r3, #1
 800931a:	60fb      	str	r3, [r7, #12]
 800931c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800931e:	230c      	movs	r3, #12
 8009320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009322:	2302      	movs	r3, #2
 8009324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009326:	2301      	movs	r3, #1
 8009328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800932a:	2303      	movs	r3, #3
 800932c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800932e:	2307      	movs	r3, #7
 8009330:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009332:	f107 0314 	add.w	r3, r7, #20
 8009336:	4619      	mov	r1, r3
 8009338:	4805      	ldr	r0, [pc, #20]	; (8009350 <HAL_UART_MspInit+0x8c>)
 800933a:	f7f7 febd 	bl	80010b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800933e:	bf00      	nop
 8009340:	3728      	adds	r7, #40	; 0x28
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	40004400 	.word	0x40004400
 800934c:	40023800 	.word	0x40023800
 8009350:	40020000 	.word	0x40020000

08009354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009354:	b480      	push	{r7}
 8009356:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009358:	bf00      	nop
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009362:	b480      	push	{r7}
 8009364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009366:	e7fe      	b.n	8009366 <HardFault_Handler+0x4>

08009368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009368:	b480      	push	{r7}
 800936a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800936c:	e7fe      	b.n	800936c <MemManage_Handler+0x4>

0800936e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800936e:	b480      	push	{r7}
 8009370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009372:	e7fe      	b.n	8009372 <BusFault_Handler+0x4>

08009374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009374:	b480      	push	{r7}
 8009376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009378:	e7fe      	b.n	8009378 <UsageFault_Handler+0x4>

0800937a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800937a:	b480      	push	{r7}
 800937c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800937e:	bf00      	nop
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009388:	b480      	push	{r7}
 800938a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800938c:	bf00      	nop
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009396:	b480      	push	{r7}
 8009398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800939a:	bf00      	nop
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80093a8:	f7f7 fd32 	bl	8000e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80093ac:	bf00      	nop
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80093b4:	4802      	ldr	r0, [pc, #8]	; (80093c0 <TIM4_IRQHandler+0x10>)
 80093b6:	f7fb f92b 	bl	8004610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80093ba:	bf00      	nop
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	20000248 	.word	0x20000248

080093c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80093c8:	4802      	ldr	r0, [pc, #8]	; (80093d4 <OTG_FS_IRQHandler+0x10>)
 80093ca:	f7f8 fac5 	bl	8001958 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80093ce:	bf00      	nop
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	200007f8 	.word	0x200007f8

080093d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80093e0:	4b11      	ldr	r3, [pc, #68]	; (8009428 <_sbrk+0x50>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d102      	bne.n	80093ee <_sbrk+0x16>
		heap_end = &end;
 80093e8:	4b0f      	ldr	r3, [pc, #60]	; (8009428 <_sbrk+0x50>)
 80093ea:	4a10      	ldr	r2, [pc, #64]	; (800942c <_sbrk+0x54>)
 80093ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80093ee:	4b0e      	ldr	r3, [pc, #56]	; (8009428 <_sbrk+0x50>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80093f4:	4b0c      	ldr	r3, [pc, #48]	; (8009428 <_sbrk+0x50>)
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4413      	add	r3, r2
 80093fc:	466a      	mov	r2, sp
 80093fe:	4293      	cmp	r3, r2
 8009400:	d907      	bls.n	8009412 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8009402:	f000 fb5d 	bl	8009ac0 <__errno>
 8009406:	4602      	mov	r2, r0
 8009408:	230c      	movs	r3, #12
 800940a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800940c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009410:	e006      	b.n	8009420 <_sbrk+0x48>
	}

	heap_end += incr;
 8009412:	4b05      	ldr	r3, [pc, #20]	; (8009428 <_sbrk+0x50>)
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4413      	add	r3, r2
 800941a:	4a03      	ldr	r2, [pc, #12]	; (8009428 <_sbrk+0x50>)
 800941c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800941e:	68fb      	ldr	r3, [r7, #12]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	20000234 	.word	0x20000234
 800942c:	20000ac0 	.word	0x20000ac0

08009430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009430:	b480      	push	{r7}
 8009432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009434:	4b08      	ldr	r3, [pc, #32]	; (8009458 <SystemInit+0x28>)
 8009436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800943a:	4a07      	ldr	r2, [pc, #28]	; (8009458 <SystemInit+0x28>)
 800943c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009444:	4b04      	ldr	r3, [pc, #16]	; (8009458 <SystemInit+0x28>)
 8009446:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800944a:	609a      	str	r2, [r3, #8]
#endif
}
 800944c:	bf00      	nop
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	e000ed00 	.word	0xe000ed00

0800945c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009460:	2201      	movs	r2, #1
 8009462:	490e      	ldr	r1, [pc, #56]	; (800949c <MX_USB_HOST_Init+0x40>)
 8009464:	480e      	ldr	r0, [pc, #56]	; (80094a0 <MX_USB_HOST_Init+0x44>)
 8009466:	f7fd ff55 	bl	8007314 <USBH_Init>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d001      	beq.n	8009474 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009470:	f7ff fd88 	bl	8008f84 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009474:	490b      	ldr	r1, [pc, #44]	; (80094a4 <MX_USB_HOST_Init+0x48>)
 8009476:	480a      	ldr	r0, [pc, #40]	; (80094a0 <MX_USB_HOST_Init+0x44>)
 8009478:	f7fd ffbf 	bl	80073fa <USBH_RegisterClass>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009482:	f7ff fd7f 	bl	8008f84 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009486:	4806      	ldr	r0, [pc, #24]	; (80094a0 <MX_USB_HOST_Init+0x44>)
 8009488:	f7fe f844 	bl	8007514 <USBH_Start>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d001      	beq.n	8009496 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009492:	f7ff fd77 	bl	8008f84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009496:	bf00      	nop
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	080094bd 	.word	0x080094bd
 80094a0:	2000042c 	.word	0x2000042c
 80094a4:	20000008 	.word	0x20000008

080094a8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80094ac:	4802      	ldr	r0, [pc, #8]	; (80094b8 <MX_USB_HOST_Process+0x10>)
 80094ae:	f7fe f841 	bl	8007534 <USBH_Process>
}
 80094b2:	bf00      	nop
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	2000042c 	.word	0x2000042c

080094bc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	460b      	mov	r3, r1
 80094c6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80094c8:	78fb      	ldrb	r3, [r7, #3]
 80094ca:	3b01      	subs	r3, #1
 80094cc:	2b04      	cmp	r3, #4
 80094ce:	d819      	bhi.n	8009504 <USBH_UserProcess+0x48>
 80094d0:	a201      	add	r2, pc, #4	; (adr r2, 80094d8 <USBH_UserProcess+0x1c>)
 80094d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d6:	bf00      	nop
 80094d8:	08009505 	.word	0x08009505
 80094dc:	080094f5 	.word	0x080094f5
 80094e0:	08009505 	.word	0x08009505
 80094e4:	080094fd 	.word	0x080094fd
 80094e8:	080094ed 	.word	0x080094ed
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80094ec:	4b09      	ldr	r3, [pc, #36]	; (8009514 <USBH_UserProcess+0x58>)
 80094ee:	2203      	movs	r2, #3
 80094f0:	701a      	strb	r2, [r3, #0]
  break;
 80094f2:	e008      	b.n	8009506 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80094f4:	4b07      	ldr	r3, [pc, #28]	; (8009514 <USBH_UserProcess+0x58>)
 80094f6:	2202      	movs	r2, #2
 80094f8:	701a      	strb	r2, [r3, #0]
  break;
 80094fa:	e004      	b.n	8009506 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80094fc:	4b05      	ldr	r3, [pc, #20]	; (8009514 <USBH_UserProcess+0x58>)
 80094fe:	2201      	movs	r2, #1
 8009500:	701a      	strb	r2, [r3, #0]
  break;
 8009502:	e000      	b.n	8009506 <USBH_UserProcess+0x4a>

  default:
  break;
 8009504:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009506:	bf00      	nop
 8009508:	370c      	adds	r7, #12
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	20000238 	.word	0x20000238

08009518 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b08a      	sub	sp, #40	; 0x28
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009520:	f107 0314 	add.w	r3, r7, #20
 8009524:	2200      	movs	r2, #0
 8009526:	601a      	str	r2, [r3, #0]
 8009528:	605a      	str	r2, [r3, #4]
 800952a:	609a      	str	r2, [r3, #8]
 800952c:	60da      	str	r2, [r3, #12]
 800952e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009538:	d147      	bne.n	80095ca <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800953a:	2300      	movs	r3, #0
 800953c:	613b      	str	r3, [r7, #16]
 800953e:	4b25      	ldr	r3, [pc, #148]	; (80095d4 <HAL_HCD_MspInit+0xbc>)
 8009540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009542:	4a24      	ldr	r2, [pc, #144]	; (80095d4 <HAL_HCD_MspInit+0xbc>)
 8009544:	f043 0301 	orr.w	r3, r3, #1
 8009548:	6313      	str	r3, [r2, #48]	; 0x30
 800954a:	4b22      	ldr	r3, [pc, #136]	; (80095d4 <HAL_HCD_MspInit+0xbc>)
 800954c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800954e:	f003 0301 	and.w	r3, r3, #1
 8009552:	613b      	str	r3, [r7, #16]
 8009554:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009556:	f44f 7300 	mov.w	r3, #512	; 0x200
 800955a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800955c:	2300      	movs	r3, #0
 800955e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009560:	2300      	movs	r3, #0
 8009562:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009564:	f107 0314 	add.w	r3, r7, #20
 8009568:	4619      	mov	r1, r3
 800956a:	481b      	ldr	r0, [pc, #108]	; (80095d8 <HAL_HCD_MspInit+0xc0>)
 800956c:	f7f7 fda4 	bl	80010b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009570:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009576:	2302      	movs	r3, #2
 8009578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800957a:	2300      	movs	r3, #0
 800957c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800957e:	2300      	movs	r3, #0
 8009580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009582:	230a      	movs	r3, #10
 8009584:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009586:	f107 0314 	add.w	r3, r7, #20
 800958a:	4619      	mov	r1, r3
 800958c:	4812      	ldr	r0, [pc, #72]	; (80095d8 <HAL_HCD_MspInit+0xc0>)
 800958e:	f7f7 fd93 	bl	80010b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009592:	4b10      	ldr	r3, [pc, #64]	; (80095d4 <HAL_HCD_MspInit+0xbc>)
 8009594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009596:	4a0f      	ldr	r2, [pc, #60]	; (80095d4 <HAL_HCD_MspInit+0xbc>)
 8009598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800959c:	6353      	str	r3, [r2, #52]	; 0x34
 800959e:	2300      	movs	r3, #0
 80095a0:	60fb      	str	r3, [r7, #12]
 80095a2:	4b0c      	ldr	r3, [pc, #48]	; (80095d4 <HAL_HCD_MspInit+0xbc>)
 80095a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095a6:	4a0b      	ldr	r2, [pc, #44]	; (80095d4 <HAL_HCD_MspInit+0xbc>)
 80095a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095ac:	6453      	str	r3, [r2, #68]	; 0x44
 80095ae:	4b09      	ldr	r3, [pc, #36]	; (80095d4 <HAL_HCD_MspInit+0xbc>)
 80095b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095b6:	60fb      	str	r3, [r7, #12]
 80095b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80095ba:	2200      	movs	r2, #0
 80095bc:	2100      	movs	r1, #0
 80095be:	2043      	movs	r0, #67	; 0x43
 80095c0:	f7f7 fd43 	bl	800104a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80095c4:	2043      	movs	r0, #67	; 0x43
 80095c6:	f7f7 fd5c 	bl	8001082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80095ca:	bf00      	nop
 80095cc:	3728      	adds	r7, #40	; 0x28
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	40023800 	.word	0x40023800
 80095d8:	40020000 	.word	0x40020000

080095dc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7fe fa53 	bl	8007a96 <USBH_LL_IncTimer>
}
 80095f0:	bf00      	nop
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009606:	4618      	mov	r0, r3
 8009608:	f7fe fa98 	bl	8007b3c <USBH_LL_Connect>
}
 800960c:	bf00      	nop
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009622:	4618      	mov	r0, r3
 8009624:	f7fe fab0 	bl	8007b88 <USBH_LL_Disconnect>
}
 8009628:	bf00      	nop
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	460b      	mov	r3, r1
 800963a:	70fb      	strb	r3, [r7, #3]
 800963c:	4613      	mov	r3, r2
 800963e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009640:	bf00      	nop
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800965a:	4618      	mov	r0, r3
 800965c:	f7fe fa45 	bl	8007aea <USBH_LL_PortEnabled>
} 
 8009660:	bf00      	nop
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009676:	4618      	mov	r0, r3
 8009678:	f7fe fa45 	bl	8007b06 <USBH_LL_PortDisabled>
} 
 800967c:	bf00      	nop
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8009692:	2b01      	cmp	r3, #1
 8009694:	d12a      	bne.n	80096ec <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009696:	4a18      	ldr	r2, [pc, #96]	; (80096f8 <USBH_LL_Init+0x74>)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a15      	ldr	r2, [pc, #84]	; (80096f8 <USBH_LL_Init+0x74>)
 80096a2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80096a6:	4b14      	ldr	r3, [pc, #80]	; (80096f8 <USBH_LL_Init+0x74>)
 80096a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80096ac:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80096ae:	4b12      	ldr	r3, [pc, #72]	; (80096f8 <USBH_LL_Init+0x74>)
 80096b0:	2208      	movs	r2, #8
 80096b2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80096b4:	4b10      	ldr	r3, [pc, #64]	; (80096f8 <USBH_LL_Init+0x74>)
 80096b6:	2201      	movs	r2, #1
 80096b8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80096ba:	4b0f      	ldr	r3, [pc, #60]	; (80096f8 <USBH_LL_Init+0x74>)
 80096bc:	2200      	movs	r2, #0
 80096be:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80096c0:	4b0d      	ldr	r3, [pc, #52]	; (80096f8 <USBH_LL_Init+0x74>)
 80096c2:	2202      	movs	r2, #2
 80096c4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80096c6:	4b0c      	ldr	r3, [pc, #48]	; (80096f8 <USBH_LL_Init+0x74>)
 80096c8:	2200      	movs	r2, #0
 80096ca:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80096cc:	480a      	ldr	r0, [pc, #40]	; (80096f8 <USBH_LL_Init+0x74>)
 80096ce:	f7f7 febe 	bl	800144e <HAL_HCD_Init>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d001      	beq.n	80096dc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80096d8:	f7ff fc54 	bl	8008f84 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80096dc:	4806      	ldr	r0, [pc, #24]	; (80096f8 <USBH_LL_Init+0x74>)
 80096de:	f7f8 fab9 	bl	8001c54 <HAL_HCD_GetCurrentFrame>
 80096e2:	4603      	mov	r3, r0
 80096e4:	4619      	mov	r1, r3
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f7fe f9c6 	bl	8007a78 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	200007f8 	.word	0x200007f8

080096fc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009704:	2300      	movs	r3, #0
 8009706:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009712:	4618      	mov	r0, r3
 8009714:	f7f8 fa26 	bl	8001b64 <HAL_HCD_Start>
 8009718:	4603      	mov	r3, r0
 800971a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800971c:	7bfb      	ldrb	r3, [r7, #15]
 800971e:	4618      	mov	r0, r3
 8009720:	f000 f95c 	bl	80099dc <USBH_Get_USB_Status>
 8009724:	4603      	mov	r3, r0
 8009726:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009728:	7bbb      	ldrb	r3, [r7, #14]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b084      	sub	sp, #16
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800973a:	2300      	movs	r3, #0
 800973c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800973e:	2300      	movs	r3, #0
 8009740:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009748:	4618      	mov	r0, r3
 800974a:	f7f8 fa2e 	bl	8001baa <HAL_HCD_Stop>
 800974e:	4603      	mov	r3, r0
 8009750:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009752:	7bfb      	ldrb	r3, [r7, #15]
 8009754:	4618      	mov	r0, r3
 8009756:	f000 f941 	bl	80099dc <USBH_Get_USB_Status>
 800975a:	4603      	mov	r3, r0
 800975c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800975e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009760:	4618      	mov	r0, r3
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009770:	2301      	movs	r3, #1
 8009772:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800977a:	4618      	mov	r0, r3
 800977c:	f7f8 fa78 	bl	8001c70 <HAL_HCD_GetCurrentSpeed>
 8009780:	4603      	mov	r3, r0
 8009782:	2b01      	cmp	r3, #1
 8009784:	d007      	beq.n	8009796 <USBH_LL_GetSpeed+0x2e>
 8009786:	2b01      	cmp	r3, #1
 8009788:	d302      	bcc.n	8009790 <USBH_LL_GetSpeed+0x28>
 800978a:	2b02      	cmp	r3, #2
 800978c:	d006      	beq.n	800979c <USBH_LL_GetSpeed+0x34>
 800978e:	e008      	b.n	80097a2 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009790:	2300      	movs	r3, #0
 8009792:	73fb      	strb	r3, [r7, #15]
    break;
 8009794:	e008      	b.n	80097a8 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009796:	2301      	movs	r3, #1
 8009798:	73fb      	strb	r3, [r7, #15]
    break;
 800979a:	e005      	b.n	80097a8 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800979c:	2302      	movs	r3, #2
 800979e:	73fb      	strb	r3, [r7, #15]
    break;
 80097a0:	e002      	b.n	80097a8 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80097a2:	2301      	movs	r3, #1
 80097a4:	73fb      	strb	r3, [r7, #15]
    break;
 80097a6:	bf00      	nop
  }
  return  speed;
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b084      	sub	sp, #16
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097ba:	2300      	movs	r3, #0
 80097bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097be:	2300      	movs	r3, #0
 80097c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7f8 fa0b 	bl	8001be4 <HAL_HCD_ResetPort>
 80097ce:	4603      	mov	r3, r0
 80097d0:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 80097d2:	7bfb      	ldrb	r3, [r7, #15]
 80097d4:	4618      	mov	r0, r3
 80097d6:	f000 f901 	bl	80099dc <USBH_Get_USB_Status>
 80097da:	4603      	mov	r3, r0
 80097dc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80097de:	7bbb      	ldrb	r3, [r7, #14]
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	460b      	mov	r3, r1
 80097f2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80097fa:	78fa      	ldrb	r2, [r7, #3]
 80097fc:	4611      	mov	r1, r2
 80097fe:	4618      	mov	r0, r3
 8009800:	f7f8 fa13 	bl	8001c2a <HAL_HCD_HC_GetXferCount>
 8009804:	4603      	mov	r3, r0
}
 8009806:	4618      	mov	r0, r3
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800980e:	b590      	push	{r4, r7, lr}
 8009810:	b089      	sub	sp, #36	; 0x24
 8009812:	af04      	add	r7, sp, #16
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	4608      	mov	r0, r1
 8009818:	4611      	mov	r1, r2
 800981a:	461a      	mov	r2, r3
 800981c:	4603      	mov	r3, r0
 800981e:	70fb      	strb	r3, [r7, #3]
 8009820:	460b      	mov	r3, r1
 8009822:	70bb      	strb	r3, [r7, #2]
 8009824:	4613      	mov	r3, r2
 8009826:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800982c:	2300      	movs	r3, #0
 800982e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8009836:	787c      	ldrb	r4, [r7, #1]
 8009838:	78ba      	ldrb	r2, [r7, #2]
 800983a:	78f9      	ldrb	r1, [r7, #3]
 800983c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800983e:	9302      	str	r3, [sp, #8]
 8009840:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009844:	9301      	str	r3, [sp, #4]
 8009846:	f897 3020 	ldrb.w	r3, [r7, #32]
 800984a:	9300      	str	r3, [sp, #0]
 800984c:	4623      	mov	r3, r4
 800984e:	f7f7 fe60 	bl	8001512 <HAL_HCD_HC_Init>
 8009852:	4603      	mov	r3, r0
 8009854:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009856:	7bfb      	ldrb	r3, [r7, #15]
 8009858:	4618      	mov	r0, r3
 800985a:	f000 f8bf 	bl	80099dc <USBH_Get_USB_Status>
 800985e:	4603      	mov	r3, r0
 8009860:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009862:	7bbb      	ldrb	r3, [r7, #14]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3714      	adds	r7, #20
 8009868:	46bd      	mov	sp, r7
 800986a:	bd90      	pop	{r4, r7, pc}

0800986c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	460b      	mov	r3, r1
 8009876:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009878:	2300      	movs	r3, #0
 800987a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009886:	78fa      	ldrb	r2, [r7, #3]
 8009888:	4611      	mov	r1, r2
 800988a:	4618      	mov	r0, r3
 800988c:	f7f7 fed9 	bl	8001642 <HAL_HCD_HC_Halt>
 8009890:	4603      	mov	r3, r0
 8009892:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009894:	7bfb      	ldrb	r3, [r7, #15]
 8009896:	4618      	mov	r0, r3
 8009898:	f000 f8a0 	bl	80099dc <USBH_Get_USB_Status>
 800989c:	4603      	mov	r3, r0
 800989e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80098a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80098aa:	b590      	push	{r4, r7, lr}
 80098ac:	b089      	sub	sp, #36	; 0x24
 80098ae:	af04      	add	r7, sp, #16
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	4608      	mov	r0, r1
 80098b4:	4611      	mov	r1, r2
 80098b6:	461a      	mov	r2, r3
 80098b8:	4603      	mov	r3, r0
 80098ba:	70fb      	strb	r3, [r7, #3]
 80098bc:	460b      	mov	r3, r1
 80098be:	70bb      	strb	r3, [r7, #2]
 80098c0:	4613      	mov	r3, r2
 80098c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80098d2:	787c      	ldrb	r4, [r7, #1]
 80098d4:	78ba      	ldrb	r2, [r7, #2]
 80098d6:	78f9      	ldrb	r1, [r7, #3]
 80098d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80098dc:	9303      	str	r3, [sp, #12]
 80098de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80098e0:	9302      	str	r3, [sp, #8]
 80098e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e4:	9301      	str	r3, [sp, #4]
 80098e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80098ea:	9300      	str	r3, [sp, #0]
 80098ec:	4623      	mov	r3, r4
 80098ee:	f7f7 fecb 	bl	8001688 <HAL_HCD_HC_SubmitRequest>
 80098f2:	4603      	mov	r3, r0
 80098f4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80098f6:	7bfb      	ldrb	r3, [r7, #15]
 80098f8:	4618      	mov	r0, r3
 80098fa:	f000 f86f 	bl	80099dc <USBH_Get_USB_Status>
 80098fe:	4603      	mov	r3, r0
 8009900:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009902:	7bbb      	ldrb	r3, [r7, #14]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3714      	adds	r7, #20
 8009908:	46bd      	mov	sp, r7
 800990a:	bd90      	pop	{r4, r7, pc}

0800990c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	460b      	mov	r3, r1
 8009916:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800991e:	78fa      	ldrb	r2, [r7, #3]
 8009920:	4611      	mov	r1, r2
 8009922:	4618      	mov	r0, r3
 8009924:	f7f8 f96c 	bl	8001c00 <HAL_HCD_HC_GetURBState>
 8009928:	4603      	mov	r3, r0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b082      	sub	sp, #8
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
 800993a:	460b      	mov	r3, r1
 800993c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8009944:	2b01      	cmp	r3, #1
 8009946:	d103      	bne.n	8009950 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009948:	78fb      	ldrb	r3, [r7, #3]
 800994a:	4618      	mov	r0, r3
 800994c:	f000 f872 	bl	8009a34 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009950:	20c8      	movs	r0, #200	; 0xc8
 8009952:	f7f7 fa7d 	bl	8000e50 <HAL_Delay>
  return USBH_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3708      	adds	r7, #8
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009960:	b480      	push	{r7}
 8009962:	b085      	sub	sp, #20
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	460b      	mov	r3, r1
 800996a:	70fb      	strb	r3, [r7, #3]
 800996c:	4613      	mov	r3, r2
 800996e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009976:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009978:	78fa      	ldrb	r2, [r7, #3]
 800997a:	68f9      	ldr	r1, [r7, #12]
 800997c:	4613      	mov	r3, r2
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	4413      	add	r3, r2
 8009982:	00db      	lsls	r3, r3, #3
 8009984:	440b      	add	r3, r1
 8009986:	333b      	adds	r3, #59	; 0x3b
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00a      	beq.n	80099a4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800998e:	78fa      	ldrb	r2, [r7, #3]
 8009990:	68f9      	ldr	r1, [r7, #12]
 8009992:	4613      	mov	r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	4413      	add	r3, r2
 8009998:	00db      	lsls	r3, r3, #3
 800999a:	440b      	add	r3, r1
 800999c:	3350      	adds	r3, #80	; 0x50
 800999e:	78ba      	ldrb	r2, [r7, #2]
 80099a0:	701a      	strb	r2, [r3, #0]
 80099a2:	e009      	b.n	80099b8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80099a4:	78fa      	ldrb	r2, [r7, #3]
 80099a6:	68f9      	ldr	r1, [r7, #12]
 80099a8:	4613      	mov	r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	4413      	add	r3, r2
 80099ae:	00db      	lsls	r3, r3, #3
 80099b0:	440b      	add	r3, r1
 80099b2:	3351      	adds	r3, #81	; 0x51
 80099b4:	78ba      	ldrb	r2, [r7, #2]
 80099b6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3714      	adds	r7, #20
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr

080099c6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b082      	sub	sp, #8
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f7f7 fa3e 	bl	8000e50 <HAL_Delay>
}
 80099d4:	bf00      	nop
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	4603      	mov	r3, r0
 80099e4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80099ea:	79fb      	ldrb	r3, [r7, #7]
 80099ec:	2b03      	cmp	r3, #3
 80099ee:	d817      	bhi.n	8009a20 <USBH_Get_USB_Status+0x44>
 80099f0:	a201      	add	r2, pc, #4	; (adr r2, 80099f8 <USBH_Get_USB_Status+0x1c>)
 80099f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f6:	bf00      	nop
 80099f8:	08009a09 	.word	0x08009a09
 80099fc:	08009a0f 	.word	0x08009a0f
 8009a00:	08009a15 	.word	0x08009a15
 8009a04:	08009a1b 	.word	0x08009a1b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a0c:	e00b      	b.n	8009a26 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009a0e:	2302      	movs	r3, #2
 8009a10:	73fb      	strb	r3, [r7, #15]
    break;
 8009a12:	e008      	b.n	8009a26 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009a14:	2301      	movs	r3, #1
 8009a16:	73fb      	strb	r3, [r7, #15]
    break;
 8009a18:	e005      	b.n	8009a26 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009a1a:	2302      	movs	r3, #2
 8009a1c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a1e:	e002      	b.n	8009a26 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009a20:	2302      	movs	r3, #2
 8009a22:	73fb      	strb	r3, [r7, #15]
    break;
 8009a24:	bf00      	nop
  }
  return usb_status;
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8009a3e:	79fb      	ldrb	r3, [r7, #7]
 8009a40:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009a42:	79fb      	ldrb	r3, [r7, #7]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d102      	bne.n	8009a4e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	73fb      	strb	r3, [r7, #15]
 8009a4c:	e001      	b.n	8009a52 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
 8009a54:	461a      	mov	r2, r3
 8009a56:	2101      	movs	r1, #1
 8009a58:	4803      	ldr	r0, [pc, #12]	; (8009a68 <MX_DriverVbusFS+0x34>)
 8009a5a:	f7f7 fcdf 	bl	800141c <HAL_GPIO_WritePin>
}
 8009a5e:	bf00      	nop
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	40020800 	.word	0x40020800

08009a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009aa4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009a70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009a72:	e003      	b.n	8009a7c <LoopCopyDataInit>

08009a74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009a74:	4b0c      	ldr	r3, [pc, #48]	; (8009aa8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009a76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009a78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009a7a:	3104      	adds	r1, #4

08009a7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009a7c:	480b      	ldr	r0, [pc, #44]	; (8009aac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009a7e:	4b0c      	ldr	r3, [pc, #48]	; (8009ab0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009a80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009a82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009a84:	d3f6      	bcc.n	8009a74 <CopyDataInit>
  ldr  r2, =_sbss
 8009a86:	4a0b      	ldr	r2, [pc, #44]	; (8009ab4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009a88:	e002      	b.n	8009a90 <LoopFillZerobss>

08009a8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009a8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009a8c:	f842 3b04 	str.w	r3, [r2], #4

08009a90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009a90:	4b09      	ldr	r3, [pc, #36]	; (8009ab8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009a92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009a94:	d3f9      	bcc.n	8009a8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009a96:	f7ff fccb 	bl	8009430 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009a9a:	f000 f817 	bl	8009acc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009a9e:	f7fe fecb 	bl	8008838 <main>
  bx  lr    
 8009aa2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009aa4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8009aa8:	0800a8d4 	.word	0x0800a8d4
  ldr  r0, =_sdata
 8009aac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009ab0:	20000208 	.word	0x20000208
  ldr  r2, =_sbss
 8009ab4:	20000208 	.word	0x20000208
  ldr  r3, = _ebss
 8009ab8:	20000ac0 	.word	0x20000ac0

08009abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009abc:	e7fe      	b.n	8009abc <ADC_IRQHandler>
	...

08009ac0 <__errno>:
 8009ac0:	4b01      	ldr	r3, [pc, #4]	; (8009ac8 <__errno+0x8>)
 8009ac2:	6818      	ldr	r0, [r3, #0]
 8009ac4:	4770      	bx	lr
 8009ac6:	bf00      	nop
 8009ac8:	20000038 	.word	0x20000038

08009acc <__libc_init_array>:
 8009acc:	b570      	push	{r4, r5, r6, lr}
 8009ace:	4e0d      	ldr	r6, [pc, #52]	; (8009b04 <__libc_init_array+0x38>)
 8009ad0:	4c0d      	ldr	r4, [pc, #52]	; (8009b08 <__libc_init_array+0x3c>)
 8009ad2:	1ba4      	subs	r4, r4, r6
 8009ad4:	10a4      	asrs	r4, r4, #2
 8009ad6:	2500      	movs	r5, #0
 8009ad8:	42a5      	cmp	r5, r4
 8009ada:	d109      	bne.n	8009af0 <__libc_init_array+0x24>
 8009adc:	4e0b      	ldr	r6, [pc, #44]	; (8009b0c <__libc_init_array+0x40>)
 8009ade:	4c0c      	ldr	r4, [pc, #48]	; (8009b10 <__libc_init_array+0x44>)
 8009ae0:	f000 fe08 	bl	800a6f4 <_init>
 8009ae4:	1ba4      	subs	r4, r4, r6
 8009ae6:	10a4      	asrs	r4, r4, #2
 8009ae8:	2500      	movs	r5, #0
 8009aea:	42a5      	cmp	r5, r4
 8009aec:	d105      	bne.n	8009afa <__libc_init_array+0x2e>
 8009aee:	bd70      	pop	{r4, r5, r6, pc}
 8009af0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009af4:	4798      	blx	r3
 8009af6:	3501      	adds	r5, #1
 8009af8:	e7ee      	b.n	8009ad8 <__libc_init_array+0xc>
 8009afa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009afe:	4798      	blx	r3
 8009b00:	3501      	adds	r5, #1
 8009b02:	e7f2      	b.n	8009aea <__libc_init_array+0x1e>
 8009b04:	0800a8cc 	.word	0x0800a8cc
 8009b08:	0800a8cc 	.word	0x0800a8cc
 8009b0c:	0800a8cc 	.word	0x0800a8cc
 8009b10:	0800a8d0 	.word	0x0800a8d0

08009b14 <malloc>:
 8009b14:	4b02      	ldr	r3, [pc, #8]	; (8009b20 <malloc+0xc>)
 8009b16:	4601      	mov	r1, r0
 8009b18:	6818      	ldr	r0, [r3, #0]
 8009b1a:	f000 b861 	b.w	8009be0 <_malloc_r>
 8009b1e:	bf00      	nop
 8009b20:	20000038 	.word	0x20000038

08009b24 <free>:
 8009b24:	4b02      	ldr	r3, [pc, #8]	; (8009b30 <free+0xc>)
 8009b26:	4601      	mov	r1, r0
 8009b28:	6818      	ldr	r0, [r3, #0]
 8009b2a:	f000 b80b 	b.w	8009b44 <_free_r>
 8009b2e:	bf00      	nop
 8009b30:	20000038 	.word	0x20000038

08009b34 <memset>:
 8009b34:	4402      	add	r2, r0
 8009b36:	4603      	mov	r3, r0
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d100      	bne.n	8009b3e <memset+0xa>
 8009b3c:	4770      	bx	lr
 8009b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b42:	e7f9      	b.n	8009b38 <memset+0x4>

08009b44 <_free_r>:
 8009b44:	b538      	push	{r3, r4, r5, lr}
 8009b46:	4605      	mov	r5, r0
 8009b48:	2900      	cmp	r1, #0
 8009b4a:	d045      	beq.n	8009bd8 <_free_r+0x94>
 8009b4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b50:	1f0c      	subs	r4, r1, #4
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	bfb8      	it	lt
 8009b56:	18e4      	addlt	r4, r4, r3
 8009b58:	f000 f8d8 	bl	8009d0c <__malloc_lock>
 8009b5c:	4a1f      	ldr	r2, [pc, #124]	; (8009bdc <_free_r+0x98>)
 8009b5e:	6813      	ldr	r3, [r2, #0]
 8009b60:	4610      	mov	r0, r2
 8009b62:	b933      	cbnz	r3, 8009b72 <_free_r+0x2e>
 8009b64:	6063      	str	r3, [r4, #4]
 8009b66:	6014      	str	r4, [r2, #0]
 8009b68:	4628      	mov	r0, r5
 8009b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b6e:	f000 b8ce 	b.w	8009d0e <__malloc_unlock>
 8009b72:	42a3      	cmp	r3, r4
 8009b74:	d90c      	bls.n	8009b90 <_free_r+0x4c>
 8009b76:	6821      	ldr	r1, [r4, #0]
 8009b78:	1862      	adds	r2, r4, r1
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	bf04      	itt	eq
 8009b7e:	681a      	ldreq	r2, [r3, #0]
 8009b80:	685b      	ldreq	r3, [r3, #4]
 8009b82:	6063      	str	r3, [r4, #4]
 8009b84:	bf04      	itt	eq
 8009b86:	1852      	addeq	r2, r2, r1
 8009b88:	6022      	streq	r2, [r4, #0]
 8009b8a:	6004      	str	r4, [r0, #0]
 8009b8c:	e7ec      	b.n	8009b68 <_free_r+0x24>
 8009b8e:	4613      	mov	r3, r2
 8009b90:	685a      	ldr	r2, [r3, #4]
 8009b92:	b10a      	cbz	r2, 8009b98 <_free_r+0x54>
 8009b94:	42a2      	cmp	r2, r4
 8009b96:	d9fa      	bls.n	8009b8e <_free_r+0x4a>
 8009b98:	6819      	ldr	r1, [r3, #0]
 8009b9a:	1858      	adds	r0, r3, r1
 8009b9c:	42a0      	cmp	r0, r4
 8009b9e:	d10b      	bne.n	8009bb8 <_free_r+0x74>
 8009ba0:	6820      	ldr	r0, [r4, #0]
 8009ba2:	4401      	add	r1, r0
 8009ba4:	1858      	adds	r0, r3, r1
 8009ba6:	4282      	cmp	r2, r0
 8009ba8:	6019      	str	r1, [r3, #0]
 8009baa:	d1dd      	bne.n	8009b68 <_free_r+0x24>
 8009bac:	6810      	ldr	r0, [r2, #0]
 8009bae:	6852      	ldr	r2, [r2, #4]
 8009bb0:	605a      	str	r2, [r3, #4]
 8009bb2:	4401      	add	r1, r0
 8009bb4:	6019      	str	r1, [r3, #0]
 8009bb6:	e7d7      	b.n	8009b68 <_free_r+0x24>
 8009bb8:	d902      	bls.n	8009bc0 <_free_r+0x7c>
 8009bba:	230c      	movs	r3, #12
 8009bbc:	602b      	str	r3, [r5, #0]
 8009bbe:	e7d3      	b.n	8009b68 <_free_r+0x24>
 8009bc0:	6820      	ldr	r0, [r4, #0]
 8009bc2:	1821      	adds	r1, r4, r0
 8009bc4:	428a      	cmp	r2, r1
 8009bc6:	bf04      	itt	eq
 8009bc8:	6811      	ldreq	r1, [r2, #0]
 8009bca:	6852      	ldreq	r2, [r2, #4]
 8009bcc:	6062      	str	r2, [r4, #4]
 8009bce:	bf04      	itt	eq
 8009bd0:	1809      	addeq	r1, r1, r0
 8009bd2:	6021      	streq	r1, [r4, #0]
 8009bd4:	605c      	str	r4, [r3, #4]
 8009bd6:	e7c7      	b.n	8009b68 <_free_r+0x24>
 8009bd8:	bd38      	pop	{r3, r4, r5, pc}
 8009bda:	bf00      	nop
 8009bdc:	2000023c 	.word	0x2000023c

08009be0 <_malloc_r>:
 8009be0:	b570      	push	{r4, r5, r6, lr}
 8009be2:	1ccd      	adds	r5, r1, #3
 8009be4:	f025 0503 	bic.w	r5, r5, #3
 8009be8:	3508      	adds	r5, #8
 8009bea:	2d0c      	cmp	r5, #12
 8009bec:	bf38      	it	cc
 8009bee:	250c      	movcc	r5, #12
 8009bf0:	2d00      	cmp	r5, #0
 8009bf2:	4606      	mov	r6, r0
 8009bf4:	db01      	blt.n	8009bfa <_malloc_r+0x1a>
 8009bf6:	42a9      	cmp	r1, r5
 8009bf8:	d903      	bls.n	8009c02 <_malloc_r+0x22>
 8009bfa:	230c      	movs	r3, #12
 8009bfc:	6033      	str	r3, [r6, #0]
 8009bfe:	2000      	movs	r0, #0
 8009c00:	bd70      	pop	{r4, r5, r6, pc}
 8009c02:	f000 f883 	bl	8009d0c <__malloc_lock>
 8009c06:	4a21      	ldr	r2, [pc, #132]	; (8009c8c <_malloc_r+0xac>)
 8009c08:	6814      	ldr	r4, [r2, #0]
 8009c0a:	4621      	mov	r1, r4
 8009c0c:	b991      	cbnz	r1, 8009c34 <_malloc_r+0x54>
 8009c0e:	4c20      	ldr	r4, [pc, #128]	; (8009c90 <_malloc_r+0xb0>)
 8009c10:	6823      	ldr	r3, [r4, #0]
 8009c12:	b91b      	cbnz	r3, 8009c1c <_malloc_r+0x3c>
 8009c14:	4630      	mov	r0, r6
 8009c16:	f000 f83d 	bl	8009c94 <_sbrk_r>
 8009c1a:	6020      	str	r0, [r4, #0]
 8009c1c:	4629      	mov	r1, r5
 8009c1e:	4630      	mov	r0, r6
 8009c20:	f000 f838 	bl	8009c94 <_sbrk_r>
 8009c24:	1c43      	adds	r3, r0, #1
 8009c26:	d124      	bne.n	8009c72 <_malloc_r+0x92>
 8009c28:	230c      	movs	r3, #12
 8009c2a:	6033      	str	r3, [r6, #0]
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	f000 f86e 	bl	8009d0e <__malloc_unlock>
 8009c32:	e7e4      	b.n	8009bfe <_malloc_r+0x1e>
 8009c34:	680b      	ldr	r3, [r1, #0]
 8009c36:	1b5b      	subs	r3, r3, r5
 8009c38:	d418      	bmi.n	8009c6c <_malloc_r+0x8c>
 8009c3a:	2b0b      	cmp	r3, #11
 8009c3c:	d90f      	bls.n	8009c5e <_malloc_r+0x7e>
 8009c3e:	600b      	str	r3, [r1, #0]
 8009c40:	50cd      	str	r5, [r1, r3]
 8009c42:	18cc      	adds	r4, r1, r3
 8009c44:	4630      	mov	r0, r6
 8009c46:	f000 f862 	bl	8009d0e <__malloc_unlock>
 8009c4a:	f104 000b 	add.w	r0, r4, #11
 8009c4e:	1d23      	adds	r3, r4, #4
 8009c50:	f020 0007 	bic.w	r0, r0, #7
 8009c54:	1ac3      	subs	r3, r0, r3
 8009c56:	d0d3      	beq.n	8009c00 <_malloc_r+0x20>
 8009c58:	425a      	negs	r2, r3
 8009c5a:	50e2      	str	r2, [r4, r3]
 8009c5c:	e7d0      	b.n	8009c00 <_malloc_r+0x20>
 8009c5e:	428c      	cmp	r4, r1
 8009c60:	684b      	ldr	r3, [r1, #4]
 8009c62:	bf16      	itet	ne
 8009c64:	6063      	strne	r3, [r4, #4]
 8009c66:	6013      	streq	r3, [r2, #0]
 8009c68:	460c      	movne	r4, r1
 8009c6a:	e7eb      	b.n	8009c44 <_malloc_r+0x64>
 8009c6c:	460c      	mov	r4, r1
 8009c6e:	6849      	ldr	r1, [r1, #4]
 8009c70:	e7cc      	b.n	8009c0c <_malloc_r+0x2c>
 8009c72:	1cc4      	adds	r4, r0, #3
 8009c74:	f024 0403 	bic.w	r4, r4, #3
 8009c78:	42a0      	cmp	r0, r4
 8009c7a:	d005      	beq.n	8009c88 <_malloc_r+0xa8>
 8009c7c:	1a21      	subs	r1, r4, r0
 8009c7e:	4630      	mov	r0, r6
 8009c80:	f000 f808 	bl	8009c94 <_sbrk_r>
 8009c84:	3001      	adds	r0, #1
 8009c86:	d0cf      	beq.n	8009c28 <_malloc_r+0x48>
 8009c88:	6025      	str	r5, [r4, #0]
 8009c8a:	e7db      	b.n	8009c44 <_malloc_r+0x64>
 8009c8c:	2000023c 	.word	0x2000023c
 8009c90:	20000240 	.word	0x20000240

08009c94 <_sbrk_r>:
 8009c94:	b538      	push	{r3, r4, r5, lr}
 8009c96:	4c06      	ldr	r4, [pc, #24]	; (8009cb0 <_sbrk_r+0x1c>)
 8009c98:	2300      	movs	r3, #0
 8009c9a:	4605      	mov	r5, r0
 8009c9c:	4608      	mov	r0, r1
 8009c9e:	6023      	str	r3, [r4, #0]
 8009ca0:	f7ff fb9a 	bl	80093d8 <_sbrk>
 8009ca4:	1c43      	adds	r3, r0, #1
 8009ca6:	d102      	bne.n	8009cae <_sbrk_r+0x1a>
 8009ca8:	6823      	ldr	r3, [r4, #0]
 8009caa:	b103      	cbz	r3, 8009cae <_sbrk_r+0x1a>
 8009cac:	602b      	str	r3, [r5, #0]
 8009cae:	bd38      	pop	{r3, r4, r5, pc}
 8009cb0:	20000abc 	.word	0x20000abc

08009cb4 <siscanf>:
 8009cb4:	b40e      	push	{r1, r2, r3}
 8009cb6:	b530      	push	{r4, r5, lr}
 8009cb8:	b09c      	sub	sp, #112	; 0x70
 8009cba:	ac1f      	add	r4, sp, #124	; 0x7c
 8009cbc:	f44f 7201 	mov.w	r2, #516	; 0x204
 8009cc0:	f854 5b04 	ldr.w	r5, [r4], #4
 8009cc4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009cc8:	9002      	str	r0, [sp, #8]
 8009cca:	9006      	str	r0, [sp, #24]
 8009ccc:	f7f6 fa80 	bl	80001d0 <strlen>
 8009cd0:	4b0b      	ldr	r3, [pc, #44]	; (8009d00 <siscanf+0x4c>)
 8009cd2:	9003      	str	r0, [sp, #12]
 8009cd4:	9007      	str	r0, [sp, #28]
 8009cd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cd8:	480a      	ldr	r0, [pc, #40]	; (8009d04 <siscanf+0x50>)
 8009cda:	9401      	str	r4, [sp, #4]
 8009cdc:	2300      	movs	r3, #0
 8009cde:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ce0:	9314      	str	r3, [sp, #80]	; 0x50
 8009ce2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ce6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009cea:	462a      	mov	r2, r5
 8009cec:	4623      	mov	r3, r4
 8009cee:	a902      	add	r1, sp, #8
 8009cf0:	6800      	ldr	r0, [r0, #0]
 8009cf2:	f000 f867 	bl	8009dc4 <__ssvfiscanf_r>
 8009cf6:	b01c      	add	sp, #112	; 0x70
 8009cf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cfc:	b003      	add	sp, #12
 8009cfe:	4770      	bx	lr
 8009d00:	08009d09 	.word	0x08009d09
 8009d04:	20000038 	.word	0x20000038

08009d08 <__seofread>:
 8009d08:	2000      	movs	r0, #0
 8009d0a:	4770      	bx	lr

08009d0c <__malloc_lock>:
 8009d0c:	4770      	bx	lr

08009d0e <__malloc_unlock>:
 8009d0e:	4770      	bx	lr

08009d10 <_sungetc_r>:
 8009d10:	b538      	push	{r3, r4, r5, lr}
 8009d12:	1c4b      	adds	r3, r1, #1
 8009d14:	4614      	mov	r4, r2
 8009d16:	d103      	bne.n	8009d20 <_sungetc_r+0x10>
 8009d18:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	bd38      	pop	{r3, r4, r5, pc}
 8009d20:	8993      	ldrh	r3, [r2, #12]
 8009d22:	f023 0320 	bic.w	r3, r3, #32
 8009d26:	8193      	strh	r3, [r2, #12]
 8009d28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d2a:	6852      	ldr	r2, [r2, #4]
 8009d2c:	b2cd      	uxtb	r5, r1
 8009d2e:	b18b      	cbz	r3, 8009d54 <_sungetc_r+0x44>
 8009d30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009d32:	4293      	cmp	r3, r2
 8009d34:	dd08      	ble.n	8009d48 <_sungetc_r+0x38>
 8009d36:	6823      	ldr	r3, [r4, #0]
 8009d38:	1e5a      	subs	r2, r3, #1
 8009d3a:	6022      	str	r2, [r4, #0]
 8009d3c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009d40:	6863      	ldr	r3, [r4, #4]
 8009d42:	3301      	adds	r3, #1
 8009d44:	6063      	str	r3, [r4, #4]
 8009d46:	e7e9      	b.n	8009d1c <_sungetc_r+0xc>
 8009d48:	4621      	mov	r1, r4
 8009d4a:	f000 fc2f 	bl	800a5ac <__submore>
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	d0f1      	beq.n	8009d36 <_sungetc_r+0x26>
 8009d52:	e7e1      	b.n	8009d18 <_sungetc_r+0x8>
 8009d54:	6921      	ldr	r1, [r4, #16]
 8009d56:	6823      	ldr	r3, [r4, #0]
 8009d58:	b151      	cbz	r1, 8009d70 <_sungetc_r+0x60>
 8009d5a:	4299      	cmp	r1, r3
 8009d5c:	d208      	bcs.n	8009d70 <_sungetc_r+0x60>
 8009d5e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009d62:	42a9      	cmp	r1, r5
 8009d64:	d104      	bne.n	8009d70 <_sungetc_r+0x60>
 8009d66:	3b01      	subs	r3, #1
 8009d68:	3201      	adds	r2, #1
 8009d6a:	6023      	str	r3, [r4, #0]
 8009d6c:	6062      	str	r2, [r4, #4]
 8009d6e:	e7d5      	b.n	8009d1c <_sungetc_r+0xc>
 8009d70:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009d74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d78:	6363      	str	r3, [r4, #52]	; 0x34
 8009d7a:	2303      	movs	r3, #3
 8009d7c:	63a3      	str	r3, [r4, #56]	; 0x38
 8009d7e:	4623      	mov	r3, r4
 8009d80:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009d84:	6023      	str	r3, [r4, #0]
 8009d86:	2301      	movs	r3, #1
 8009d88:	e7dc      	b.n	8009d44 <_sungetc_r+0x34>

08009d8a <__ssrefill_r>:
 8009d8a:	b510      	push	{r4, lr}
 8009d8c:	460c      	mov	r4, r1
 8009d8e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009d90:	b169      	cbz	r1, 8009dae <__ssrefill_r+0x24>
 8009d92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d96:	4299      	cmp	r1, r3
 8009d98:	d001      	beq.n	8009d9e <__ssrefill_r+0x14>
 8009d9a:	f7ff fed3 	bl	8009b44 <_free_r>
 8009d9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009da0:	6063      	str	r3, [r4, #4]
 8009da2:	2000      	movs	r0, #0
 8009da4:	6360      	str	r0, [r4, #52]	; 0x34
 8009da6:	b113      	cbz	r3, 8009dae <__ssrefill_r+0x24>
 8009da8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009daa:	6023      	str	r3, [r4, #0]
 8009dac:	bd10      	pop	{r4, pc}
 8009dae:	6923      	ldr	r3, [r4, #16]
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	2300      	movs	r3, #0
 8009db4:	6063      	str	r3, [r4, #4]
 8009db6:	89a3      	ldrh	r3, [r4, #12]
 8009db8:	f043 0320 	orr.w	r3, r3, #32
 8009dbc:	81a3      	strh	r3, [r4, #12]
 8009dbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dc2:	e7f3      	b.n	8009dac <__ssrefill_r+0x22>

08009dc4 <__ssvfiscanf_r>:
 8009dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8009dcc:	460c      	mov	r4, r1
 8009dce:	2100      	movs	r1, #0
 8009dd0:	9144      	str	r1, [sp, #272]	; 0x110
 8009dd2:	9145      	str	r1, [sp, #276]	; 0x114
 8009dd4:	499f      	ldr	r1, [pc, #636]	; (800a054 <__ssvfiscanf_r+0x290>)
 8009dd6:	91a0      	str	r1, [sp, #640]	; 0x280
 8009dd8:	f10d 0804 	add.w	r8, sp, #4
 8009ddc:	499e      	ldr	r1, [pc, #632]	; (800a058 <__ssvfiscanf_r+0x294>)
 8009dde:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800a05c <__ssvfiscanf_r+0x298>
 8009de2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009de6:	4606      	mov	r6, r0
 8009de8:	4692      	mov	sl, r2
 8009dea:	91a1      	str	r1, [sp, #644]	; 0x284
 8009dec:	9300      	str	r3, [sp, #0]
 8009dee:	270a      	movs	r7, #10
 8009df0:	f89a 3000 	ldrb.w	r3, [sl]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f000 812a 	beq.w	800a04e <__ssvfiscanf_r+0x28a>
 8009dfa:	4655      	mov	r5, sl
 8009dfc:	f000 fc14 	bl	800a628 <__locale_ctype_ptr>
 8009e00:	f815 bb01 	ldrb.w	fp, [r5], #1
 8009e04:	4458      	add	r0, fp
 8009e06:	7843      	ldrb	r3, [r0, #1]
 8009e08:	f013 0308 	ands.w	r3, r3, #8
 8009e0c:	d01c      	beq.n	8009e48 <__ssvfiscanf_r+0x84>
 8009e0e:	6863      	ldr	r3, [r4, #4]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	dd12      	ble.n	8009e3a <__ssvfiscanf_r+0x76>
 8009e14:	f000 fc08 	bl	800a628 <__locale_ctype_ptr>
 8009e18:	6823      	ldr	r3, [r4, #0]
 8009e1a:	781a      	ldrb	r2, [r3, #0]
 8009e1c:	4410      	add	r0, r2
 8009e1e:	7842      	ldrb	r2, [r0, #1]
 8009e20:	0712      	lsls	r2, r2, #28
 8009e22:	d401      	bmi.n	8009e28 <__ssvfiscanf_r+0x64>
 8009e24:	46aa      	mov	sl, r5
 8009e26:	e7e3      	b.n	8009df0 <__ssvfiscanf_r+0x2c>
 8009e28:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009e2a:	3201      	adds	r2, #1
 8009e2c:	9245      	str	r2, [sp, #276]	; 0x114
 8009e2e:	6862      	ldr	r2, [r4, #4]
 8009e30:	3301      	adds	r3, #1
 8009e32:	3a01      	subs	r2, #1
 8009e34:	6062      	str	r2, [r4, #4]
 8009e36:	6023      	str	r3, [r4, #0]
 8009e38:	e7e9      	b.n	8009e0e <__ssvfiscanf_r+0x4a>
 8009e3a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009e3c:	4621      	mov	r1, r4
 8009e3e:	4630      	mov	r0, r6
 8009e40:	4798      	blx	r3
 8009e42:	2800      	cmp	r0, #0
 8009e44:	d0e6      	beq.n	8009e14 <__ssvfiscanf_r+0x50>
 8009e46:	e7ed      	b.n	8009e24 <__ssvfiscanf_r+0x60>
 8009e48:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8009e4c:	f040 8082 	bne.w	8009f54 <__ssvfiscanf_r+0x190>
 8009e50:	9343      	str	r3, [sp, #268]	; 0x10c
 8009e52:	9341      	str	r3, [sp, #260]	; 0x104
 8009e54:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8009e58:	2b2a      	cmp	r3, #42	; 0x2a
 8009e5a:	d103      	bne.n	8009e64 <__ssvfiscanf_r+0xa0>
 8009e5c:	2310      	movs	r3, #16
 8009e5e:	9341      	str	r3, [sp, #260]	; 0x104
 8009e60:	f10a 0502 	add.w	r5, sl, #2
 8009e64:	46aa      	mov	sl, r5
 8009e66:	f815 1b01 	ldrb.w	r1, [r5], #1
 8009e6a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009e6e:	2a09      	cmp	r2, #9
 8009e70:	d922      	bls.n	8009eb8 <__ssvfiscanf_r+0xf4>
 8009e72:	2203      	movs	r2, #3
 8009e74:	4879      	ldr	r0, [pc, #484]	; (800a05c <__ssvfiscanf_r+0x298>)
 8009e76:	f7f6 f9b3 	bl	80001e0 <memchr>
 8009e7a:	b138      	cbz	r0, 8009e8c <__ssvfiscanf_r+0xc8>
 8009e7c:	eba0 0309 	sub.w	r3, r0, r9
 8009e80:	2001      	movs	r0, #1
 8009e82:	4098      	lsls	r0, r3
 8009e84:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009e86:	4318      	orrs	r0, r3
 8009e88:	9041      	str	r0, [sp, #260]	; 0x104
 8009e8a:	46aa      	mov	sl, r5
 8009e8c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e90:	2b67      	cmp	r3, #103	; 0x67
 8009e92:	f10a 0501 	add.w	r5, sl, #1
 8009e96:	d82b      	bhi.n	8009ef0 <__ssvfiscanf_r+0x12c>
 8009e98:	2b65      	cmp	r3, #101	; 0x65
 8009e9a:	f080 809f 	bcs.w	8009fdc <__ssvfiscanf_r+0x218>
 8009e9e:	2b47      	cmp	r3, #71	; 0x47
 8009ea0:	d810      	bhi.n	8009ec4 <__ssvfiscanf_r+0x100>
 8009ea2:	2b45      	cmp	r3, #69	; 0x45
 8009ea4:	f080 809a 	bcs.w	8009fdc <__ssvfiscanf_r+0x218>
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d06c      	beq.n	8009f86 <__ssvfiscanf_r+0x1c2>
 8009eac:	2b25      	cmp	r3, #37	; 0x25
 8009eae:	d051      	beq.n	8009f54 <__ssvfiscanf_r+0x190>
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	9347      	str	r3, [sp, #284]	; 0x11c
 8009eb4:	9742      	str	r7, [sp, #264]	; 0x108
 8009eb6:	e027      	b.n	8009f08 <__ssvfiscanf_r+0x144>
 8009eb8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009eba:	fb07 1303 	mla	r3, r7, r3, r1
 8009ebe:	3b30      	subs	r3, #48	; 0x30
 8009ec0:	9343      	str	r3, [sp, #268]	; 0x10c
 8009ec2:	e7cf      	b.n	8009e64 <__ssvfiscanf_r+0xa0>
 8009ec4:	2b5b      	cmp	r3, #91	; 0x5b
 8009ec6:	d06a      	beq.n	8009f9e <__ssvfiscanf_r+0x1da>
 8009ec8:	d80c      	bhi.n	8009ee4 <__ssvfiscanf_r+0x120>
 8009eca:	2b58      	cmp	r3, #88	; 0x58
 8009ecc:	d1f0      	bne.n	8009eb0 <__ssvfiscanf_r+0xec>
 8009ece:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ed4:	9241      	str	r2, [sp, #260]	; 0x104
 8009ed6:	2210      	movs	r2, #16
 8009ed8:	9242      	str	r2, [sp, #264]	; 0x108
 8009eda:	2b6e      	cmp	r3, #110	; 0x6e
 8009edc:	bf8c      	ite	hi
 8009ede:	2304      	movhi	r3, #4
 8009ee0:	2303      	movls	r3, #3
 8009ee2:	e010      	b.n	8009f06 <__ssvfiscanf_r+0x142>
 8009ee4:	2b63      	cmp	r3, #99	; 0x63
 8009ee6:	d065      	beq.n	8009fb4 <__ssvfiscanf_r+0x1f0>
 8009ee8:	2b64      	cmp	r3, #100	; 0x64
 8009eea:	d1e1      	bne.n	8009eb0 <__ssvfiscanf_r+0xec>
 8009eec:	9742      	str	r7, [sp, #264]	; 0x108
 8009eee:	e7f4      	b.n	8009eda <__ssvfiscanf_r+0x116>
 8009ef0:	2b70      	cmp	r3, #112	; 0x70
 8009ef2:	d04b      	beq.n	8009f8c <__ssvfiscanf_r+0x1c8>
 8009ef4:	d826      	bhi.n	8009f44 <__ssvfiscanf_r+0x180>
 8009ef6:	2b6e      	cmp	r3, #110	; 0x6e
 8009ef8:	d062      	beq.n	8009fc0 <__ssvfiscanf_r+0x1fc>
 8009efa:	d84c      	bhi.n	8009f96 <__ssvfiscanf_r+0x1d2>
 8009efc:	2b69      	cmp	r3, #105	; 0x69
 8009efe:	d1d7      	bne.n	8009eb0 <__ssvfiscanf_r+0xec>
 8009f00:	2300      	movs	r3, #0
 8009f02:	9342      	str	r3, [sp, #264]	; 0x108
 8009f04:	2303      	movs	r3, #3
 8009f06:	9347      	str	r3, [sp, #284]	; 0x11c
 8009f08:	6863      	ldr	r3, [r4, #4]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	dd68      	ble.n	8009fe0 <__ssvfiscanf_r+0x21c>
 8009f0e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009f10:	0659      	lsls	r1, r3, #25
 8009f12:	d407      	bmi.n	8009f24 <__ssvfiscanf_r+0x160>
 8009f14:	f000 fb88 	bl	800a628 <__locale_ctype_ptr>
 8009f18:	6823      	ldr	r3, [r4, #0]
 8009f1a:	781a      	ldrb	r2, [r3, #0]
 8009f1c:	4410      	add	r0, r2
 8009f1e:	7842      	ldrb	r2, [r0, #1]
 8009f20:	0712      	lsls	r2, r2, #28
 8009f22:	d464      	bmi.n	8009fee <__ssvfiscanf_r+0x22a>
 8009f24:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	dc73      	bgt.n	800a012 <__ssvfiscanf_r+0x24e>
 8009f2a:	466b      	mov	r3, sp
 8009f2c:	4622      	mov	r2, r4
 8009f2e:	a941      	add	r1, sp, #260	; 0x104
 8009f30:	4630      	mov	r0, r6
 8009f32:	f000 f897 	bl	800a064 <_scanf_chars>
 8009f36:	2801      	cmp	r0, #1
 8009f38:	f000 8089 	beq.w	800a04e <__ssvfiscanf_r+0x28a>
 8009f3c:	2802      	cmp	r0, #2
 8009f3e:	f47f af71 	bne.w	8009e24 <__ssvfiscanf_r+0x60>
 8009f42:	e01d      	b.n	8009f80 <__ssvfiscanf_r+0x1bc>
 8009f44:	2b75      	cmp	r3, #117	; 0x75
 8009f46:	d0d1      	beq.n	8009eec <__ssvfiscanf_r+0x128>
 8009f48:	2b78      	cmp	r3, #120	; 0x78
 8009f4a:	d0c0      	beq.n	8009ece <__ssvfiscanf_r+0x10a>
 8009f4c:	2b73      	cmp	r3, #115	; 0x73
 8009f4e:	d1af      	bne.n	8009eb0 <__ssvfiscanf_r+0xec>
 8009f50:	2302      	movs	r3, #2
 8009f52:	e7d8      	b.n	8009f06 <__ssvfiscanf_r+0x142>
 8009f54:	6863      	ldr	r3, [r4, #4]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	dd0c      	ble.n	8009f74 <__ssvfiscanf_r+0x1b0>
 8009f5a:	6823      	ldr	r3, [r4, #0]
 8009f5c:	781a      	ldrb	r2, [r3, #0]
 8009f5e:	455a      	cmp	r2, fp
 8009f60:	d175      	bne.n	800a04e <__ssvfiscanf_r+0x28a>
 8009f62:	3301      	adds	r3, #1
 8009f64:	6862      	ldr	r2, [r4, #4]
 8009f66:	6023      	str	r3, [r4, #0]
 8009f68:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009f6a:	3a01      	subs	r2, #1
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	6062      	str	r2, [r4, #4]
 8009f70:	9345      	str	r3, [sp, #276]	; 0x114
 8009f72:	e757      	b.n	8009e24 <__ssvfiscanf_r+0x60>
 8009f74:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009f76:	4621      	mov	r1, r4
 8009f78:	4630      	mov	r0, r6
 8009f7a:	4798      	blx	r3
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	d0ec      	beq.n	8009f5a <__ssvfiscanf_r+0x196>
 8009f80:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009f82:	2800      	cmp	r0, #0
 8009f84:	d159      	bne.n	800a03a <__ssvfiscanf_r+0x276>
 8009f86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f8a:	e05c      	b.n	800a046 <__ssvfiscanf_r+0x282>
 8009f8c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009f8e:	f042 0220 	orr.w	r2, r2, #32
 8009f92:	9241      	str	r2, [sp, #260]	; 0x104
 8009f94:	e79b      	b.n	8009ece <__ssvfiscanf_r+0x10a>
 8009f96:	2308      	movs	r3, #8
 8009f98:	9342      	str	r3, [sp, #264]	; 0x108
 8009f9a:	2304      	movs	r3, #4
 8009f9c:	e7b3      	b.n	8009f06 <__ssvfiscanf_r+0x142>
 8009f9e:	4629      	mov	r1, r5
 8009fa0:	4640      	mov	r0, r8
 8009fa2:	f000 f9b7 	bl	800a314 <__sccl>
 8009fa6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fac:	9341      	str	r3, [sp, #260]	; 0x104
 8009fae:	4605      	mov	r5, r0
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e7a8      	b.n	8009f06 <__ssvfiscanf_r+0x142>
 8009fb4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fba:	9341      	str	r3, [sp, #260]	; 0x104
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	e7a2      	b.n	8009f06 <__ssvfiscanf_r+0x142>
 8009fc0:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009fc2:	06c3      	lsls	r3, r0, #27
 8009fc4:	f53f af2e 	bmi.w	8009e24 <__ssvfiscanf_r+0x60>
 8009fc8:	9b00      	ldr	r3, [sp, #0]
 8009fca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009fcc:	1d19      	adds	r1, r3, #4
 8009fce:	9100      	str	r1, [sp, #0]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	07c0      	lsls	r0, r0, #31
 8009fd4:	bf4c      	ite	mi
 8009fd6:	801a      	strhmi	r2, [r3, #0]
 8009fd8:	601a      	strpl	r2, [r3, #0]
 8009fda:	e723      	b.n	8009e24 <__ssvfiscanf_r+0x60>
 8009fdc:	2305      	movs	r3, #5
 8009fde:	e792      	b.n	8009f06 <__ssvfiscanf_r+0x142>
 8009fe0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009fe2:	4621      	mov	r1, r4
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	4798      	blx	r3
 8009fe8:	2800      	cmp	r0, #0
 8009fea:	d090      	beq.n	8009f0e <__ssvfiscanf_r+0x14a>
 8009fec:	e7c8      	b.n	8009f80 <__ssvfiscanf_r+0x1bc>
 8009fee:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009ff0:	3201      	adds	r2, #1
 8009ff2:	9245      	str	r2, [sp, #276]	; 0x114
 8009ff4:	6862      	ldr	r2, [r4, #4]
 8009ff6:	3a01      	subs	r2, #1
 8009ff8:	2a00      	cmp	r2, #0
 8009ffa:	6062      	str	r2, [r4, #4]
 8009ffc:	dd02      	ble.n	800a004 <__ssvfiscanf_r+0x240>
 8009ffe:	3301      	adds	r3, #1
 800a000:	6023      	str	r3, [r4, #0]
 800a002:	e787      	b.n	8009f14 <__ssvfiscanf_r+0x150>
 800a004:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a006:	4621      	mov	r1, r4
 800a008:	4630      	mov	r0, r6
 800a00a:	4798      	blx	r3
 800a00c:	2800      	cmp	r0, #0
 800a00e:	d081      	beq.n	8009f14 <__ssvfiscanf_r+0x150>
 800a010:	e7b6      	b.n	8009f80 <__ssvfiscanf_r+0x1bc>
 800a012:	2b04      	cmp	r3, #4
 800a014:	dc06      	bgt.n	800a024 <__ssvfiscanf_r+0x260>
 800a016:	466b      	mov	r3, sp
 800a018:	4622      	mov	r2, r4
 800a01a:	a941      	add	r1, sp, #260	; 0x104
 800a01c:	4630      	mov	r0, r6
 800a01e:	f000 f885 	bl	800a12c <_scanf_i>
 800a022:	e788      	b.n	8009f36 <__ssvfiscanf_r+0x172>
 800a024:	4b0e      	ldr	r3, [pc, #56]	; (800a060 <__ssvfiscanf_r+0x29c>)
 800a026:	2b00      	cmp	r3, #0
 800a028:	f43f aefc 	beq.w	8009e24 <__ssvfiscanf_r+0x60>
 800a02c:	466b      	mov	r3, sp
 800a02e:	4622      	mov	r2, r4
 800a030:	a941      	add	r1, sp, #260	; 0x104
 800a032:	4630      	mov	r0, r6
 800a034:	f3af 8000 	nop.w
 800a038:	e77d      	b.n	8009f36 <__ssvfiscanf_r+0x172>
 800a03a:	89a3      	ldrh	r3, [r4, #12]
 800a03c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a040:	bf18      	it	ne
 800a042:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800a046:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800a04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a04e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a050:	e7f9      	b.n	800a046 <__ssvfiscanf_r+0x282>
 800a052:	bf00      	nop
 800a054:	08009d11 	.word	0x08009d11
 800a058:	08009d8b 	.word	0x08009d8b
 800a05c:	0800a738 	.word	0x0800a738
 800a060:	00000000 	.word	0x00000000

0800a064 <_scanf_chars>:
 800a064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a068:	4615      	mov	r5, r2
 800a06a:	688a      	ldr	r2, [r1, #8]
 800a06c:	4680      	mov	r8, r0
 800a06e:	460c      	mov	r4, r1
 800a070:	b932      	cbnz	r2, 800a080 <_scanf_chars+0x1c>
 800a072:	698a      	ldr	r2, [r1, #24]
 800a074:	2a00      	cmp	r2, #0
 800a076:	bf14      	ite	ne
 800a078:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800a07c:	2201      	moveq	r2, #1
 800a07e:	608a      	str	r2, [r1, #8]
 800a080:	6822      	ldr	r2, [r4, #0]
 800a082:	06d1      	lsls	r1, r2, #27
 800a084:	bf5f      	itttt	pl
 800a086:	681a      	ldrpl	r2, [r3, #0]
 800a088:	1d11      	addpl	r1, r2, #4
 800a08a:	6019      	strpl	r1, [r3, #0]
 800a08c:	6817      	ldrpl	r7, [r2, #0]
 800a08e:	2600      	movs	r6, #0
 800a090:	69a3      	ldr	r3, [r4, #24]
 800a092:	b1db      	cbz	r3, 800a0cc <_scanf_chars+0x68>
 800a094:	2b01      	cmp	r3, #1
 800a096:	d107      	bne.n	800a0a8 <_scanf_chars+0x44>
 800a098:	682b      	ldr	r3, [r5, #0]
 800a09a:	6962      	ldr	r2, [r4, #20]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	5cd3      	ldrb	r3, [r2, r3]
 800a0a0:	b9a3      	cbnz	r3, 800a0cc <_scanf_chars+0x68>
 800a0a2:	2e00      	cmp	r6, #0
 800a0a4:	d132      	bne.n	800a10c <_scanf_chars+0xa8>
 800a0a6:	e006      	b.n	800a0b6 <_scanf_chars+0x52>
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d007      	beq.n	800a0bc <_scanf_chars+0x58>
 800a0ac:	2e00      	cmp	r6, #0
 800a0ae:	d12d      	bne.n	800a10c <_scanf_chars+0xa8>
 800a0b0:	69a3      	ldr	r3, [r4, #24]
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d12a      	bne.n	800a10c <_scanf_chars+0xa8>
 800a0b6:	2001      	movs	r0, #1
 800a0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0bc:	f000 fab4 	bl	800a628 <__locale_ctype_ptr>
 800a0c0:	682b      	ldr	r3, [r5, #0]
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	4418      	add	r0, r3
 800a0c6:	7843      	ldrb	r3, [r0, #1]
 800a0c8:	071b      	lsls	r3, r3, #28
 800a0ca:	d4ef      	bmi.n	800a0ac <_scanf_chars+0x48>
 800a0cc:	6823      	ldr	r3, [r4, #0]
 800a0ce:	06da      	lsls	r2, r3, #27
 800a0d0:	bf5e      	ittt	pl
 800a0d2:	682b      	ldrpl	r3, [r5, #0]
 800a0d4:	781b      	ldrbpl	r3, [r3, #0]
 800a0d6:	703b      	strbpl	r3, [r7, #0]
 800a0d8:	682a      	ldr	r2, [r5, #0]
 800a0da:	686b      	ldr	r3, [r5, #4]
 800a0dc:	f102 0201 	add.w	r2, r2, #1
 800a0e0:	602a      	str	r2, [r5, #0]
 800a0e2:	68a2      	ldr	r2, [r4, #8]
 800a0e4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a0e8:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800a0ec:	606b      	str	r3, [r5, #4]
 800a0ee:	f106 0601 	add.w	r6, r6, #1
 800a0f2:	bf58      	it	pl
 800a0f4:	3701      	addpl	r7, #1
 800a0f6:	60a2      	str	r2, [r4, #8]
 800a0f8:	b142      	cbz	r2, 800a10c <_scanf_chars+0xa8>
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	dcc8      	bgt.n	800a090 <_scanf_chars+0x2c>
 800a0fe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a102:	4629      	mov	r1, r5
 800a104:	4640      	mov	r0, r8
 800a106:	4798      	blx	r3
 800a108:	2800      	cmp	r0, #0
 800a10a:	d0c1      	beq.n	800a090 <_scanf_chars+0x2c>
 800a10c:	6823      	ldr	r3, [r4, #0]
 800a10e:	f013 0310 	ands.w	r3, r3, #16
 800a112:	d105      	bne.n	800a120 <_scanf_chars+0xbc>
 800a114:	68e2      	ldr	r2, [r4, #12]
 800a116:	3201      	adds	r2, #1
 800a118:	60e2      	str	r2, [r4, #12]
 800a11a:	69a2      	ldr	r2, [r4, #24]
 800a11c:	b102      	cbz	r2, 800a120 <_scanf_chars+0xbc>
 800a11e:	703b      	strb	r3, [r7, #0]
 800a120:	6923      	ldr	r3, [r4, #16]
 800a122:	441e      	add	r6, r3
 800a124:	6126      	str	r6, [r4, #16]
 800a126:	2000      	movs	r0, #0
 800a128:	e7c6      	b.n	800a0b8 <_scanf_chars+0x54>
	...

0800a12c <_scanf_i>:
 800a12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a130:	469a      	mov	sl, r3
 800a132:	4b74      	ldr	r3, [pc, #464]	; (800a304 <_scanf_i+0x1d8>)
 800a134:	460c      	mov	r4, r1
 800a136:	4683      	mov	fp, r0
 800a138:	4616      	mov	r6, r2
 800a13a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a13e:	b087      	sub	sp, #28
 800a140:	ab03      	add	r3, sp, #12
 800a142:	68a7      	ldr	r7, [r4, #8]
 800a144:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a148:	4b6f      	ldr	r3, [pc, #444]	; (800a308 <_scanf_i+0x1dc>)
 800a14a:	69a1      	ldr	r1, [r4, #24]
 800a14c:	4a6f      	ldr	r2, [pc, #444]	; (800a30c <_scanf_i+0x1e0>)
 800a14e:	2903      	cmp	r1, #3
 800a150:	bf08      	it	eq
 800a152:	461a      	moveq	r2, r3
 800a154:	1e7b      	subs	r3, r7, #1
 800a156:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800a15a:	bf84      	itt	hi
 800a15c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a160:	60a3      	strhi	r3, [r4, #8]
 800a162:	6823      	ldr	r3, [r4, #0]
 800a164:	9200      	str	r2, [sp, #0]
 800a166:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a16a:	bf88      	it	hi
 800a16c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a170:	f104 091c 	add.w	r9, r4, #28
 800a174:	6023      	str	r3, [r4, #0]
 800a176:	bf8c      	ite	hi
 800a178:	197f      	addhi	r7, r7, r5
 800a17a:	2700      	movls	r7, #0
 800a17c:	464b      	mov	r3, r9
 800a17e:	f04f 0800 	mov.w	r8, #0
 800a182:	9301      	str	r3, [sp, #4]
 800a184:	6831      	ldr	r1, [r6, #0]
 800a186:	ab03      	add	r3, sp, #12
 800a188:	2202      	movs	r2, #2
 800a18a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a18e:	7809      	ldrb	r1, [r1, #0]
 800a190:	f7f6 f826 	bl	80001e0 <memchr>
 800a194:	9b01      	ldr	r3, [sp, #4]
 800a196:	b330      	cbz	r0, 800a1e6 <_scanf_i+0xba>
 800a198:	f1b8 0f01 	cmp.w	r8, #1
 800a19c:	d15a      	bne.n	800a254 <_scanf_i+0x128>
 800a19e:	6862      	ldr	r2, [r4, #4]
 800a1a0:	b92a      	cbnz	r2, 800a1ae <_scanf_i+0x82>
 800a1a2:	6822      	ldr	r2, [r4, #0]
 800a1a4:	2108      	movs	r1, #8
 800a1a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1aa:	6061      	str	r1, [r4, #4]
 800a1ac:	6022      	str	r2, [r4, #0]
 800a1ae:	6822      	ldr	r2, [r4, #0]
 800a1b0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a1b4:	6022      	str	r2, [r4, #0]
 800a1b6:	68a2      	ldr	r2, [r4, #8]
 800a1b8:	1e51      	subs	r1, r2, #1
 800a1ba:	60a1      	str	r1, [r4, #8]
 800a1bc:	b19a      	cbz	r2, 800a1e6 <_scanf_i+0xba>
 800a1be:	6832      	ldr	r2, [r6, #0]
 800a1c0:	1c51      	adds	r1, r2, #1
 800a1c2:	6031      	str	r1, [r6, #0]
 800a1c4:	7812      	ldrb	r2, [r2, #0]
 800a1c6:	701a      	strb	r2, [r3, #0]
 800a1c8:	1c5d      	adds	r5, r3, #1
 800a1ca:	6873      	ldr	r3, [r6, #4]
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	6073      	str	r3, [r6, #4]
 800a1d2:	dc07      	bgt.n	800a1e4 <_scanf_i+0xb8>
 800a1d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a1d8:	4631      	mov	r1, r6
 800a1da:	4658      	mov	r0, fp
 800a1dc:	4798      	blx	r3
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	f040 8086 	bne.w	800a2f0 <_scanf_i+0x1c4>
 800a1e4:	462b      	mov	r3, r5
 800a1e6:	f108 0801 	add.w	r8, r8, #1
 800a1ea:	f1b8 0f03 	cmp.w	r8, #3
 800a1ee:	d1c8      	bne.n	800a182 <_scanf_i+0x56>
 800a1f0:	6862      	ldr	r2, [r4, #4]
 800a1f2:	b90a      	cbnz	r2, 800a1f8 <_scanf_i+0xcc>
 800a1f4:	220a      	movs	r2, #10
 800a1f6:	6062      	str	r2, [r4, #4]
 800a1f8:	6862      	ldr	r2, [r4, #4]
 800a1fa:	4945      	ldr	r1, [pc, #276]	; (800a310 <_scanf_i+0x1e4>)
 800a1fc:	6960      	ldr	r0, [r4, #20]
 800a1fe:	9301      	str	r3, [sp, #4]
 800a200:	1a89      	subs	r1, r1, r2
 800a202:	f000 f887 	bl	800a314 <__sccl>
 800a206:	9b01      	ldr	r3, [sp, #4]
 800a208:	f04f 0800 	mov.w	r8, #0
 800a20c:	461d      	mov	r5, r3
 800a20e:	68a3      	ldr	r3, [r4, #8]
 800a210:	6822      	ldr	r2, [r4, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d03a      	beq.n	800a28c <_scanf_i+0x160>
 800a216:	6831      	ldr	r1, [r6, #0]
 800a218:	6960      	ldr	r0, [r4, #20]
 800a21a:	f891 c000 	ldrb.w	ip, [r1]
 800a21e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a222:	2800      	cmp	r0, #0
 800a224:	d032      	beq.n	800a28c <_scanf_i+0x160>
 800a226:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a22a:	d121      	bne.n	800a270 <_scanf_i+0x144>
 800a22c:	0510      	lsls	r0, r2, #20
 800a22e:	d51f      	bpl.n	800a270 <_scanf_i+0x144>
 800a230:	f108 0801 	add.w	r8, r8, #1
 800a234:	b117      	cbz	r7, 800a23c <_scanf_i+0x110>
 800a236:	3301      	adds	r3, #1
 800a238:	3f01      	subs	r7, #1
 800a23a:	60a3      	str	r3, [r4, #8]
 800a23c:	6873      	ldr	r3, [r6, #4]
 800a23e:	3b01      	subs	r3, #1
 800a240:	2b00      	cmp	r3, #0
 800a242:	6073      	str	r3, [r6, #4]
 800a244:	dd1b      	ble.n	800a27e <_scanf_i+0x152>
 800a246:	6833      	ldr	r3, [r6, #0]
 800a248:	3301      	adds	r3, #1
 800a24a:	6033      	str	r3, [r6, #0]
 800a24c:	68a3      	ldr	r3, [r4, #8]
 800a24e:	3b01      	subs	r3, #1
 800a250:	60a3      	str	r3, [r4, #8]
 800a252:	e7dc      	b.n	800a20e <_scanf_i+0xe2>
 800a254:	f1b8 0f02 	cmp.w	r8, #2
 800a258:	d1ad      	bne.n	800a1b6 <_scanf_i+0x8a>
 800a25a:	6822      	ldr	r2, [r4, #0]
 800a25c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a260:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a264:	d1bf      	bne.n	800a1e6 <_scanf_i+0xba>
 800a266:	2110      	movs	r1, #16
 800a268:	6061      	str	r1, [r4, #4]
 800a26a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a26e:	e7a1      	b.n	800a1b4 <_scanf_i+0x88>
 800a270:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a274:	6022      	str	r2, [r4, #0]
 800a276:	780b      	ldrb	r3, [r1, #0]
 800a278:	702b      	strb	r3, [r5, #0]
 800a27a:	3501      	adds	r5, #1
 800a27c:	e7de      	b.n	800a23c <_scanf_i+0x110>
 800a27e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a282:	4631      	mov	r1, r6
 800a284:	4658      	mov	r0, fp
 800a286:	4798      	blx	r3
 800a288:	2800      	cmp	r0, #0
 800a28a:	d0df      	beq.n	800a24c <_scanf_i+0x120>
 800a28c:	6823      	ldr	r3, [r4, #0]
 800a28e:	05d9      	lsls	r1, r3, #23
 800a290:	d50c      	bpl.n	800a2ac <_scanf_i+0x180>
 800a292:	454d      	cmp	r5, r9
 800a294:	d908      	bls.n	800a2a8 <_scanf_i+0x17c>
 800a296:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a29a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a29e:	4632      	mov	r2, r6
 800a2a0:	4658      	mov	r0, fp
 800a2a2:	4798      	blx	r3
 800a2a4:	1e6f      	subs	r7, r5, #1
 800a2a6:	463d      	mov	r5, r7
 800a2a8:	454d      	cmp	r5, r9
 800a2aa:	d029      	beq.n	800a300 <_scanf_i+0x1d4>
 800a2ac:	6822      	ldr	r2, [r4, #0]
 800a2ae:	f012 0210 	ands.w	r2, r2, #16
 800a2b2:	d113      	bne.n	800a2dc <_scanf_i+0x1b0>
 800a2b4:	702a      	strb	r2, [r5, #0]
 800a2b6:	6863      	ldr	r3, [r4, #4]
 800a2b8:	9e00      	ldr	r6, [sp, #0]
 800a2ba:	4649      	mov	r1, r9
 800a2bc:	4658      	mov	r0, fp
 800a2be:	47b0      	blx	r6
 800a2c0:	f8da 3000 	ldr.w	r3, [sl]
 800a2c4:	6821      	ldr	r1, [r4, #0]
 800a2c6:	1d1a      	adds	r2, r3, #4
 800a2c8:	f8ca 2000 	str.w	r2, [sl]
 800a2cc:	f011 0f20 	tst.w	r1, #32
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	d010      	beq.n	800a2f6 <_scanf_i+0x1ca>
 800a2d4:	6018      	str	r0, [r3, #0]
 800a2d6:	68e3      	ldr	r3, [r4, #12]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	60e3      	str	r3, [r4, #12]
 800a2dc:	eba5 0509 	sub.w	r5, r5, r9
 800a2e0:	44a8      	add	r8, r5
 800a2e2:	6925      	ldr	r5, [r4, #16]
 800a2e4:	4445      	add	r5, r8
 800a2e6:	6125      	str	r5, [r4, #16]
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	b007      	add	sp, #28
 800a2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f0:	f04f 0800 	mov.w	r8, #0
 800a2f4:	e7ca      	b.n	800a28c <_scanf_i+0x160>
 800a2f6:	07ca      	lsls	r2, r1, #31
 800a2f8:	bf4c      	ite	mi
 800a2fa:	8018      	strhmi	r0, [r3, #0]
 800a2fc:	6018      	strpl	r0, [r3, #0]
 800a2fe:	e7ea      	b.n	800a2d6 <_scanf_i+0x1aa>
 800a300:	2001      	movs	r0, #1
 800a302:	e7f2      	b.n	800a2ea <_scanf_i+0x1be>
 800a304:	0800a714 	.word	0x0800a714
 800a308:	0800a471 	.word	0x0800a471
 800a30c:	0800a589 	.word	0x0800a589
 800a310:	0800a74c 	.word	0x0800a74c

0800a314 <__sccl>:
 800a314:	b570      	push	{r4, r5, r6, lr}
 800a316:	780b      	ldrb	r3, [r1, #0]
 800a318:	2b5e      	cmp	r3, #94	; 0x5e
 800a31a:	bf13      	iteet	ne
 800a31c:	1c4a      	addne	r2, r1, #1
 800a31e:	1c8a      	addeq	r2, r1, #2
 800a320:	784b      	ldrbeq	r3, [r1, #1]
 800a322:	2100      	movne	r1, #0
 800a324:	bf08      	it	eq
 800a326:	2101      	moveq	r1, #1
 800a328:	1e44      	subs	r4, r0, #1
 800a32a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800a32e:	f804 1f01 	strb.w	r1, [r4, #1]!
 800a332:	42ac      	cmp	r4, r5
 800a334:	d1fb      	bne.n	800a32e <__sccl+0x1a>
 800a336:	b913      	cbnz	r3, 800a33e <__sccl+0x2a>
 800a338:	3a01      	subs	r2, #1
 800a33a:	4610      	mov	r0, r2
 800a33c:	bd70      	pop	{r4, r5, r6, pc}
 800a33e:	f081 0401 	eor.w	r4, r1, #1
 800a342:	54c4      	strb	r4, [r0, r3]
 800a344:	1c51      	adds	r1, r2, #1
 800a346:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800a34a:	2d2d      	cmp	r5, #45	; 0x2d
 800a34c:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 800a350:	460a      	mov	r2, r1
 800a352:	d006      	beq.n	800a362 <__sccl+0x4e>
 800a354:	2d5d      	cmp	r5, #93	; 0x5d
 800a356:	d0f0      	beq.n	800a33a <__sccl+0x26>
 800a358:	b90d      	cbnz	r5, 800a35e <__sccl+0x4a>
 800a35a:	4632      	mov	r2, r6
 800a35c:	e7ed      	b.n	800a33a <__sccl+0x26>
 800a35e:	462b      	mov	r3, r5
 800a360:	e7ef      	b.n	800a342 <__sccl+0x2e>
 800a362:	780e      	ldrb	r6, [r1, #0]
 800a364:	2e5d      	cmp	r6, #93	; 0x5d
 800a366:	d0fa      	beq.n	800a35e <__sccl+0x4a>
 800a368:	42b3      	cmp	r3, r6
 800a36a:	dcf8      	bgt.n	800a35e <__sccl+0x4a>
 800a36c:	3301      	adds	r3, #1
 800a36e:	429e      	cmp	r6, r3
 800a370:	54c4      	strb	r4, [r0, r3]
 800a372:	dcfb      	bgt.n	800a36c <__sccl+0x58>
 800a374:	3102      	adds	r1, #2
 800a376:	e7e6      	b.n	800a346 <__sccl+0x32>

0800a378 <_strtol_l.isra.0>:
 800a378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a37c:	4680      	mov	r8, r0
 800a37e:	4689      	mov	r9, r1
 800a380:	4692      	mov	sl, r2
 800a382:	461e      	mov	r6, r3
 800a384:	460f      	mov	r7, r1
 800a386:	463d      	mov	r5, r7
 800a388:	9808      	ldr	r0, [sp, #32]
 800a38a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a38e:	f000 f947 	bl	800a620 <__locale_ctype_ptr_l>
 800a392:	4420      	add	r0, r4
 800a394:	7843      	ldrb	r3, [r0, #1]
 800a396:	f013 0308 	ands.w	r3, r3, #8
 800a39a:	d132      	bne.n	800a402 <_strtol_l.isra.0+0x8a>
 800a39c:	2c2d      	cmp	r4, #45	; 0x2d
 800a39e:	d132      	bne.n	800a406 <_strtol_l.isra.0+0x8e>
 800a3a0:	787c      	ldrb	r4, [r7, #1]
 800a3a2:	1cbd      	adds	r5, r7, #2
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	2e00      	cmp	r6, #0
 800a3a8:	d05d      	beq.n	800a466 <_strtol_l.isra.0+0xee>
 800a3aa:	2e10      	cmp	r6, #16
 800a3ac:	d109      	bne.n	800a3c2 <_strtol_l.isra.0+0x4a>
 800a3ae:	2c30      	cmp	r4, #48	; 0x30
 800a3b0:	d107      	bne.n	800a3c2 <_strtol_l.isra.0+0x4a>
 800a3b2:	782b      	ldrb	r3, [r5, #0]
 800a3b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a3b8:	2b58      	cmp	r3, #88	; 0x58
 800a3ba:	d14f      	bne.n	800a45c <_strtol_l.isra.0+0xe4>
 800a3bc:	786c      	ldrb	r4, [r5, #1]
 800a3be:	2610      	movs	r6, #16
 800a3c0:	3502      	adds	r5, #2
 800a3c2:	2a00      	cmp	r2, #0
 800a3c4:	bf14      	ite	ne
 800a3c6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a3ca:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a3ce:	2700      	movs	r7, #0
 800a3d0:	fbb1 fcf6 	udiv	ip, r1, r6
 800a3d4:	4638      	mov	r0, r7
 800a3d6:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a3da:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a3de:	2b09      	cmp	r3, #9
 800a3e0:	d817      	bhi.n	800a412 <_strtol_l.isra.0+0x9a>
 800a3e2:	461c      	mov	r4, r3
 800a3e4:	42a6      	cmp	r6, r4
 800a3e6:	dd23      	ble.n	800a430 <_strtol_l.isra.0+0xb8>
 800a3e8:	1c7b      	adds	r3, r7, #1
 800a3ea:	d007      	beq.n	800a3fc <_strtol_l.isra.0+0x84>
 800a3ec:	4584      	cmp	ip, r0
 800a3ee:	d31c      	bcc.n	800a42a <_strtol_l.isra.0+0xb2>
 800a3f0:	d101      	bne.n	800a3f6 <_strtol_l.isra.0+0x7e>
 800a3f2:	45a6      	cmp	lr, r4
 800a3f4:	db19      	blt.n	800a42a <_strtol_l.isra.0+0xb2>
 800a3f6:	fb00 4006 	mla	r0, r0, r6, r4
 800a3fa:	2701      	movs	r7, #1
 800a3fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a400:	e7eb      	b.n	800a3da <_strtol_l.isra.0+0x62>
 800a402:	462f      	mov	r7, r5
 800a404:	e7bf      	b.n	800a386 <_strtol_l.isra.0+0xe>
 800a406:	2c2b      	cmp	r4, #43	; 0x2b
 800a408:	bf04      	itt	eq
 800a40a:	1cbd      	addeq	r5, r7, #2
 800a40c:	787c      	ldrbeq	r4, [r7, #1]
 800a40e:	461a      	mov	r2, r3
 800a410:	e7c9      	b.n	800a3a6 <_strtol_l.isra.0+0x2e>
 800a412:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a416:	2b19      	cmp	r3, #25
 800a418:	d801      	bhi.n	800a41e <_strtol_l.isra.0+0xa6>
 800a41a:	3c37      	subs	r4, #55	; 0x37
 800a41c:	e7e2      	b.n	800a3e4 <_strtol_l.isra.0+0x6c>
 800a41e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a422:	2b19      	cmp	r3, #25
 800a424:	d804      	bhi.n	800a430 <_strtol_l.isra.0+0xb8>
 800a426:	3c57      	subs	r4, #87	; 0x57
 800a428:	e7dc      	b.n	800a3e4 <_strtol_l.isra.0+0x6c>
 800a42a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a42e:	e7e5      	b.n	800a3fc <_strtol_l.isra.0+0x84>
 800a430:	1c7b      	adds	r3, r7, #1
 800a432:	d108      	bne.n	800a446 <_strtol_l.isra.0+0xce>
 800a434:	2322      	movs	r3, #34	; 0x22
 800a436:	f8c8 3000 	str.w	r3, [r8]
 800a43a:	4608      	mov	r0, r1
 800a43c:	f1ba 0f00 	cmp.w	sl, #0
 800a440:	d107      	bne.n	800a452 <_strtol_l.isra.0+0xda>
 800a442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a446:	b102      	cbz	r2, 800a44a <_strtol_l.isra.0+0xd2>
 800a448:	4240      	negs	r0, r0
 800a44a:	f1ba 0f00 	cmp.w	sl, #0
 800a44e:	d0f8      	beq.n	800a442 <_strtol_l.isra.0+0xca>
 800a450:	b10f      	cbz	r7, 800a456 <_strtol_l.isra.0+0xde>
 800a452:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800a456:	f8ca 9000 	str.w	r9, [sl]
 800a45a:	e7f2      	b.n	800a442 <_strtol_l.isra.0+0xca>
 800a45c:	2430      	movs	r4, #48	; 0x30
 800a45e:	2e00      	cmp	r6, #0
 800a460:	d1af      	bne.n	800a3c2 <_strtol_l.isra.0+0x4a>
 800a462:	2608      	movs	r6, #8
 800a464:	e7ad      	b.n	800a3c2 <_strtol_l.isra.0+0x4a>
 800a466:	2c30      	cmp	r4, #48	; 0x30
 800a468:	d0a3      	beq.n	800a3b2 <_strtol_l.isra.0+0x3a>
 800a46a:	260a      	movs	r6, #10
 800a46c:	e7a9      	b.n	800a3c2 <_strtol_l.isra.0+0x4a>
	...

0800a470 <_strtol_r>:
 800a470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a472:	4c06      	ldr	r4, [pc, #24]	; (800a48c <_strtol_r+0x1c>)
 800a474:	4d06      	ldr	r5, [pc, #24]	; (800a490 <_strtol_r+0x20>)
 800a476:	6824      	ldr	r4, [r4, #0]
 800a478:	6a24      	ldr	r4, [r4, #32]
 800a47a:	2c00      	cmp	r4, #0
 800a47c:	bf08      	it	eq
 800a47e:	462c      	moveq	r4, r5
 800a480:	9400      	str	r4, [sp, #0]
 800a482:	f7ff ff79 	bl	800a378 <_strtol_l.isra.0>
 800a486:	b003      	add	sp, #12
 800a488:	bd30      	pop	{r4, r5, pc}
 800a48a:	bf00      	nop
 800a48c:	20000038 	.word	0x20000038
 800a490:	2000009c 	.word	0x2000009c

0800a494 <_strtoul_l.isra.0>:
 800a494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a498:	4680      	mov	r8, r0
 800a49a:	4689      	mov	r9, r1
 800a49c:	4692      	mov	sl, r2
 800a49e:	461e      	mov	r6, r3
 800a4a0:	460f      	mov	r7, r1
 800a4a2:	463d      	mov	r5, r7
 800a4a4:	9808      	ldr	r0, [sp, #32]
 800a4a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4aa:	f000 f8b9 	bl	800a620 <__locale_ctype_ptr_l>
 800a4ae:	4420      	add	r0, r4
 800a4b0:	7843      	ldrb	r3, [r0, #1]
 800a4b2:	f013 0308 	ands.w	r3, r3, #8
 800a4b6:	d130      	bne.n	800a51a <_strtoul_l.isra.0+0x86>
 800a4b8:	2c2d      	cmp	r4, #45	; 0x2d
 800a4ba:	d130      	bne.n	800a51e <_strtoul_l.isra.0+0x8a>
 800a4bc:	787c      	ldrb	r4, [r7, #1]
 800a4be:	1cbd      	adds	r5, r7, #2
 800a4c0:	2101      	movs	r1, #1
 800a4c2:	2e00      	cmp	r6, #0
 800a4c4:	d05c      	beq.n	800a580 <_strtoul_l.isra.0+0xec>
 800a4c6:	2e10      	cmp	r6, #16
 800a4c8:	d109      	bne.n	800a4de <_strtoul_l.isra.0+0x4a>
 800a4ca:	2c30      	cmp	r4, #48	; 0x30
 800a4cc:	d107      	bne.n	800a4de <_strtoul_l.isra.0+0x4a>
 800a4ce:	782b      	ldrb	r3, [r5, #0]
 800a4d0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a4d4:	2b58      	cmp	r3, #88	; 0x58
 800a4d6:	d14e      	bne.n	800a576 <_strtoul_l.isra.0+0xe2>
 800a4d8:	786c      	ldrb	r4, [r5, #1]
 800a4da:	2610      	movs	r6, #16
 800a4dc:	3502      	adds	r5, #2
 800a4de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	fbb2 f2f6 	udiv	r2, r2, r6
 800a4e8:	fb06 fc02 	mul.w	ip, r6, r2
 800a4ec:	ea6f 0c0c 	mvn.w	ip, ip
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a4f6:	2f09      	cmp	r7, #9
 800a4f8:	d817      	bhi.n	800a52a <_strtoul_l.isra.0+0x96>
 800a4fa:	463c      	mov	r4, r7
 800a4fc:	42a6      	cmp	r6, r4
 800a4fe:	dd23      	ble.n	800a548 <_strtoul_l.isra.0+0xb4>
 800a500:	2b00      	cmp	r3, #0
 800a502:	db1e      	blt.n	800a542 <_strtoul_l.isra.0+0xae>
 800a504:	4282      	cmp	r2, r0
 800a506:	d31c      	bcc.n	800a542 <_strtoul_l.isra.0+0xae>
 800a508:	d101      	bne.n	800a50e <_strtoul_l.isra.0+0x7a>
 800a50a:	45a4      	cmp	ip, r4
 800a50c:	db19      	blt.n	800a542 <_strtoul_l.isra.0+0xae>
 800a50e:	fb00 4006 	mla	r0, r0, r6, r4
 800a512:	2301      	movs	r3, #1
 800a514:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a518:	e7eb      	b.n	800a4f2 <_strtoul_l.isra.0+0x5e>
 800a51a:	462f      	mov	r7, r5
 800a51c:	e7c1      	b.n	800a4a2 <_strtoul_l.isra.0+0xe>
 800a51e:	2c2b      	cmp	r4, #43	; 0x2b
 800a520:	bf04      	itt	eq
 800a522:	1cbd      	addeq	r5, r7, #2
 800a524:	787c      	ldrbeq	r4, [r7, #1]
 800a526:	4619      	mov	r1, r3
 800a528:	e7cb      	b.n	800a4c2 <_strtoul_l.isra.0+0x2e>
 800a52a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a52e:	2f19      	cmp	r7, #25
 800a530:	d801      	bhi.n	800a536 <_strtoul_l.isra.0+0xa2>
 800a532:	3c37      	subs	r4, #55	; 0x37
 800a534:	e7e2      	b.n	800a4fc <_strtoul_l.isra.0+0x68>
 800a536:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a53a:	2f19      	cmp	r7, #25
 800a53c:	d804      	bhi.n	800a548 <_strtoul_l.isra.0+0xb4>
 800a53e:	3c57      	subs	r4, #87	; 0x57
 800a540:	e7dc      	b.n	800a4fc <_strtoul_l.isra.0+0x68>
 800a542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a546:	e7e5      	b.n	800a514 <_strtoul_l.isra.0+0x80>
 800a548:	2b00      	cmp	r3, #0
 800a54a:	da09      	bge.n	800a560 <_strtoul_l.isra.0+0xcc>
 800a54c:	2322      	movs	r3, #34	; 0x22
 800a54e:	f8c8 3000 	str.w	r3, [r8]
 800a552:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a556:	f1ba 0f00 	cmp.w	sl, #0
 800a55a:	d107      	bne.n	800a56c <_strtoul_l.isra.0+0xd8>
 800a55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a560:	b101      	cbz	r1, 800a564 <_strtoul_l.isra.0+0xd0>
 800a562:	4240      	negs	r0, r0
 800a564:	f1ba 0f00 	cmp.w	sl, #0
 800a568:	d0f8      	beq.n	800a55c <_strtoul_l.isra.0+0xc8>
 800a56a:	b10b      	cbz	r3, 800a570 <_strtoul_l.isra.0+0xdc>
 800a56c:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800a570:	f8ca 9000 	str.w	r9, [sl]
 800a574:	e7f2      	b.n	800a55c <_strtoul_l.isra.0+0xc8>
 800a576:	2430      	movs	r4, #48	; 0x30
 800a578:	2e00      	cmp	r6, #0
 800a57a:	d1b0      	bne.n	800a4de <_strtoul_l.isra.0+0x4a>
 800a57c:	2608      	movs	r6, #8
 800a57e:	e7ae      	b.n	800a4de <_strtoul_l.isra.0+0x4a>
 800a580:	2c30      	cmp	r4, #48	; 0x30
 800a582:	d0a4      	beq.n	800a4ce <_strtoul_l.isra.0+0x3a>
 800a584:	260a      	movs	r6, #10
 800a586:	e7aa      	b.n	800a4de <_strtoul_l.isra.0+0x4a>

0800a588 <_strtoul_r>:
 800a588:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a58a:	4c06      	ldr	r4, [pc, #24]	; (800a5a4 <_strtoul_r+0x1c>)
 800a58c:	4d06      	ldr	r5, [pc, #24]	; (800a5a8 <_strtoul_r+0x20>)
 800a58e:	6824      	ldr	r4, [r4, #0]
 800a590:	6a24      	ldr	r4, [r4, #32]
 800a592:	2c00      	cmp	r4, #0
 800a594:	bf08      	it	eq
 800a596:	462c      	moveq	r4, r5
 800a598:	9400      	str	r4, [sp, #0]
 800a59a:	f7ff ff7b 	bl	800a494 <_strtoul_l.isra.0>
 800a59e:	b003      	add	sp, #12
 800a5a0:	bd30      	pop	{r4, r5, pc}
 800a5a2:	bf00      	nop
 800a5a4:	20000038 	.word	0x20000038
 800a5a8:	2000009c 	.word	0x2000009c

0800a5ac <__submore>:
 800a5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5b0:	460c      	mov	r4, r1
 800a5b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a5b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5b8:	4299      	cmp	r1, r3
 800a5ba:	d11d      	bne.n	800a5f8 <__submore+0x4c>
 800a5bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a5c0:	f7ff fb0e 	bl	8009be0 <_malloc_r>
 800a5c4:	b918      	cbnz	r0, 800a5ce <__submore+0x22>
 800a5c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5d2:	63a3      	str	r3, [r4, #56]	; 0x38
 800a5d4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a5d8:	6360      	str	r0, [r4, #52]	; 0x34
 800a5da:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a5de:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a5e2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a5e6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a5ea:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a5ee:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a5f2:	6020      	str	r0, [r4, #0]
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	e7e8      	b.n	800a5ca <__submore+0x1e>
 800a5f8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a5fa:	0077      	lsls	r7, r6, #1
 800a5fc:	463a      	mov	r2, r7
 800a5fe:	f000 f83e 	bl	800a67e <_realloc_r>
 800a602:	4605      	mov	r5, r0
 800a604:	2800      	cmp	r0, #0
 800a606:	d0de      	beq.n	800a5c6 <__submore+0x1a>
 800a608:	eb00 0806 	add.w	r8, r0, r6
 800a60c:	4601      	mov	r1, r0
 800a60e:	4632      	mov	r2, r6
 800a610:	4640      	mov	r0, r8
 800a612:	f000 f829 	bl	800a668 <memcpy>
 800a616:	f8c4 8000 	str.w	r8, [r4]
 800a61a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a61e:	e7e9      	b.n	800a5f4 <__submore+0x48>

0800a620 <__locale_ctype_ptr_l>:
 800a620:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a624:	4770      	bx	lr
	...

0800a628 <__locale_ctype_ptr>:
 800a628:	4b04      	ldr	r3, [pc, #16]	; (800a63c <__locale_ctype_ptr+0x14>)
 800a62a:	4a05      	ldr	r2, [pc, #20]	; (800a640 <__locale_ctype_ptr+0x18>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	6a1b      	ldr	r3, [r3, #32]
 800a630:	2b00      	cmp	r3, #0
 800a632:	bf08      	it	eq
 800a634:	4613      	moveq	r3, r2
 800a636:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800a63a:	4770      	bx	lr
 800a63c:	20000038 	.word	0x20000038
 800a640:	2000009c 	.word	0x2000009c

0800a644 <__ascii_mbtowc>:
 800a644:	b082      	sub	sp, #8
 800a646:	b901      	cbnz	r1, 800a64a <__ascii_mbtowc+0x6>
 800a648:	a901      	add	r1, sp, #4
 800a64a:	b142      	cbz	r2, 800a65e <__ascii_mbtowc+0x1a>
 800a64c:	b14b      	cbz	r3, 800a662 <__ascii_mbtowc+0x1e>
 800a64e:	7813      	ldrb	r3, [r2, #0]
 800a650:	600b      	str	r3, [r1, #0]
 800a652:	7812      	ldrb	r2, [r2, #0]
 800a654:	1c10      	adds	r0, r2, #0
 800a656:	bf18      	it	ne
 800a658:	2001      	movne	r0, #1
 800a65a:	b002      	add	sp, #8
 800a65c:	4770      	bx	lr
 800a65e:	4610      	mov	r0, r2
 800a660:	e7fb      	b.n	800a65a <__ascii_mbtowc+0x16>
 800a662:	f06f 0001 	mvn.w	r0, #1
 800a666:	e7f8      	b.n	800a65a <__ascii_mbtowc+0x16>

0800a668 <memcpy>:
 800a668:	b510      	push	{r4, lr}
 800a66a:	1e43      	subs	r3, r0, #1
 800a66c:	440a      	add	r2, r1
 800a66e:	4291      	cmp	r1, r2
 800a670:	d100      	bne.n	800a674 <memcpy+0xc>
 800a672:	bd10      	pop	{r4, pc}
 800a674:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a678:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a67c:	e7f7      	b.n	800a66e <memcpy+0x6>

0800a67e <_realloc_r>:
 800a67e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a680:	4607      	mov	r7, r0
 800a682:	4614      	mov	r4, r2
 800a684:	460e      	mov	r6, r1
 800a686:	b921      	cbnz	r1, 800a692 <_realloc_r+0x14>
 800a688:	4611      	mov	r1, r2
 800a68a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a68e:	f7ff baa7 	b.w	8009be0 <_malloc_r>
 800a692:	b922      	cbnz	r2, 800a69e <_realloc_r+0x20>
 800a694:	f7ff fa56 	bl	8009b44 <_free_r>
 800a698:	4625      	mov	r5, r4
 800a69a:	4628      	mov	r0, r5
 800a69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a69e:	f000 f821 	bl	800a6e4 <_malloc_usable_size_r>
 800a6a2:	42a0      	cmp	r0, r4
 800a6a4:	d20f      	bcs.n	800a6c6 <_realloc_r+0x48>
 800a6a6:	4621      	mov	r1, r4
 800a6a8:	4638      	mov	r0, r7
 800a6aa:	f7ff fa99 	bl	8009be0 <_malloc_r>
 800a6ae:	4605      	mov	r5, r0
 800a6b0:	2800      	cmp	r0, #0
 800a6b2:	d0f2      	beq.n	800a69a <_realloc_r+0x1c>
 800a6b4:	4631      	mov	r1, r6
 800a6b6:	4622      	mov	r2, r4
 800a6b8:	f7ff ffd6 	bl	800a668 <memcpy>
 800a6bc:	4631      	mov	r1, r6
 800a6be:	4638      	mov	r0, r7
 800a6c0:	f7ff fa40 	bl	8009b44 <_free_r>
 800a6c4:	e7e9      	b.n	800a69a <_realloc_r+0x1c>
 800a6c6:	4635      	mov	r5, r6
 800a6c8:	e7e7      	b.n	800a69a <_realloc_r+0x1c>

0800a6ca <__ascii_wctomb>:
 800a6ca:	b149      	cbz	r1, 800a6e0 <__ascii_wctomb+0x16>
 800a6cc:	2aff      	cmp	r2, #255	; 0xff
 800a6ce:	bf85      	ittet	hi
 800a6d0:	238a      	movhi	r3, #138	; 0x8a
 800a6d2:	6003      	strhi	r3, [r0, #0]
 800a6d4:	700a      	strbls	r2, [r1, #0]
 800a6d6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a6da:	bf98      	it	ls
 800a6dc:	2001      	movls	r0, #1
 800a6de:	4770      	bx	lr
 800a6e0:	4608      	mov	r0, r1
 800a6e2:	4770      	bx	lr

0800a6e4 <_malloc_usable_size_r>:
 800a6e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6e8:	1f18      	subs	r0, r3, #4
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	bfbc      	itt	lt
 800a6ee:	580b      	ldrlt	r3, [r1, r0]
 800a6f0:	18c0      	addlt	r0, r0, r3
 800a6f2:	4770      	bx	lr

0800a6f4 <_init>:
 800a6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f6:	bf00      	nop
 800a6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6fa:	bc08      	pop	{r3}
 800a6fc:	469e      	mov	lr, r3
 800a6fe:	4770      	bx	lr

0800a700 <_fini>:
 800a700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a702:	bf00      	nop
 800a704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a706:	bc08      	pop	{r3}
 800a708:	469e      	mov	lr, r3
 800a70a:	4770      	bx	lr
