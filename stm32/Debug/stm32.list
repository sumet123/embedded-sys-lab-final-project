
stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fc0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08009148  08009148  00019148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800916c  0800916c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800916c  0800916c  0001916c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009174  08009174  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009174  08009174  00019174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009178  08009178  00019178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800917c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000089c  20000090  0800920c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000092c  0800920c  0002092c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001df26  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003cd1  00000000  00000000  0003dfe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001818  00000000  00000000  00041cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001680  00000000  00000000  000434d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002582c  00000000  00000000  00044b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000151e2  00000000  00000000  0006a37c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d434b  00000000  00000000  0007f55e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001538a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067f0  00000000  00000000  00153924  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009130 	.word	0x08009130

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009130 	.word	0x08009130

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f94d 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f007 ff86 	bl	800840c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f965 	bl	80007fa <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000548:	f000 f92d 	bl	80007a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000028 	.word	0x20000028
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	200000c0 	.word	0x200000c0

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	200000c0 	.word	0x200000c0

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005c4:	d005      	beq.n	80005d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_Delay+0x40>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d2:	bf00      	nop
 80005d4:	f7ff ffde 	bl	8000594 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8f7      	bhi.n	80005d4 <HAL_Delay+0x28>
  {
  }
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000004 	.word	0x20000004

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	db0b      	blt.n	800067e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 021f 	and.w	r2, r3, #31
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <__NVIC_EnableIRQ+0x38>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000770:	f7ff ff8e 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff29 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b8:	f7ff ff3e 	bl	8000638 <__NVIC_GetPriorityGrouping>
 80007bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f7ff ff8e 	bl	80006e4 <NVIC_EncodePriority>
 80007c8:	4602      	mov	r2, r0
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5d 	bl	8000690 <__NVIC_SetPriority>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff31 	bl	8000654 <__NVIC_EnableIRQ>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ffa2 	bl	800074c <SysTick_Config>
 8000808:	4603      	mov	r3, r0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000814:	b480      	push	{r7}
 8000816:	b089      	sub	sp, #36	; 0x24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
 800082e:	e16b      	b.n	8000b08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000830:	2201      	movs	r2, #1
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	697a      	ldr	r2, [r7, #20]
 8000840:	4013      	ands	r3, r2
 8000842:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000844:	693a      	ldr	r2, [r7, #16]
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	429a      	cmp	r2, r3
 800084a:	f040 815a 	bne.w	8000b02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d00b      	beq.n	800086e <HAL_GPIO_Init+0x5a>
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d007      	beq.n	800086e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000862:	2b11      	cmp	r3, #17
 8000864:	d003      	beq.n	800086e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b12      	cmp	r3, #18
 800086c:	d130      	bne.n	80008d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	2203      	movs	r2, #3
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	43db      	mvns	r3, r3
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	4013      	ands	r3, r2
 8000884:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	68da      	ldr	r2, [r3, #12]
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	4313      	orrs	r3, r2
 8000896:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	69ba      	ldr	r2, [r7, #24]
 800089c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008a4:	2201      	movs	r2, #1
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	43db      	mvns	r3, r3
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	4013      	ands	r3, r2
 80008b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	091b      	lsrs	r3, r3, #4
 80008ba:	f003 0201 	and.w	r2, r3, #1
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	69ba      	ldr	r2, [r7, #24]
 80008c6:	4313      	orrs	r3, r2
 80008c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	69ba      	ldr	r2, [r7, #24]
 80008ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	2203      	movs	r2, #3
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	4013      	ands	r3, r2
 80008e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	689a      	ldr	r2, [r3, #8]
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	69ba      	ldr	r2, [r7, #24]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	69ba      	ldr	r2, [r7, #24]
 80008fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	2b02      	cmp	r3, #2
 8000906:	d003      	beq.n	8000910 <HAL_GPIO_Init+0xfc>
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	2b12      	cmp	r3, #18
 800090e:	d123      	bne.n	8000958 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	08da      	lsrs	r2, r3, #3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3208      	adds	r2, #8
 8000918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800091c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	f003 0307 	and.w	r3, r3, #7
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	220f      	movs	r2, #15
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	4013      	ands	r3, r2
 8000932:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	691a      	ldr	r2, [r3, #16]
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	4313      	orrs	r3, r2
 8000948:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	08da      	lsrs	r2, r3, #3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3208      	adds	r2, #8
 8000952:	69b9      	ldr	r1, [r7, #24]
 8000954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	2203      	movs	r2, #3
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	43db      	mvns	r3, r3
 800096a:	69ba      	ldr	r2, [r7, #24]
 800096c:	4013      	ands	r3, r2
 800096e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f003 0203 	and.w	r2, r3, #3
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	4313      	orrs	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	2b00      	cmp	r3, #0
 8000996:	f000 80b4 	beq.w	8000b02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b5f      	ldr	r3, [pc, #380]	; (8000b1c <HAL_GPIO_Init+0x308>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a5e      	ldr	r2, [pc, #376]	; (8000b1c <HAL_GPIO_Init+0x308>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b5c      	ldr	r3, [pc, #368]	; (8000b1c <HAL_GPIO_Init+0x308>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009b6:	4a5a      	ldr	r2, [pc, #360]	; (8000b20 <HAL_GPIO_Init+0x30c>)
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	3302      	adds	r3, #2
 80009be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	f003 0303 	and.w	r3, r3, #3
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	220f      	movs	r2, #15
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	4013      	ands	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a51      	ldr	r2, [pc, #324]	; (8000b24 <HAL_GPIO_Init+0x310>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d02b      	beq.n	8000a3a <HAL_GPIO_Init+0x226>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a50      	ldr	r2, [pc, #320]	; (8000b28 <HAL_GPIO_Init+0x314>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d025      	beq.n	8000a36 <HAL_GPIO_Init+0x222>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a4f      	ldr	r2, [pc, #316]	; (8000b2c <HAL_GPIO_Init+0x318>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d01f      	beq.n	8000a32 <HAL_GPIO_Init+0x21e>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a4e      	ldr	r2, [pc, #312]	; (8000b30 <HAL_GPIO_Init+0x31c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d019      	beq.n	8000a2e <HAL_GPIO_Init+0x21a>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a4d      	ldr	r2, [pc, #308]	; (8000b34 <HAL_GPIO_Init+0x320>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d013      	beq.n	8000a2a <HAL_GPIO_Init+0x216>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a4c      	ldr	r2, [pc, #304]	; (8000b38 <HAL_GPIO_Init+0x324>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d00d      	beq.n	8000a26 <HAL_GPIO_Init+0x212>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4b      	ldr	r2, [pc, #300]	; (8000b3c <HAL_GPIO_Init+0x328>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d007      	beq.n	8000a22 <HAL_GPIO_Init+0x20e>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a4a      	ldr	r2, [pc, #296]	; (8000b40 <HAL_GPIO_Init+0x32c>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d101      	bne.n	8000a1e <HAL_GPIO_Init+0x20a>
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	e00e      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a1e:	2308      	movs	r3, #8
 8000a20:	e00c      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a22:	2306      	movs	r3, #6
 8000a24:	e00a      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a26:	2305      	movs	r3, #5
 8000a28:	e008      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	e006      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a2e:	2303      	movs	r3, #3
 8000a30:	e004      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a32:	2302      	movs	r3, #2
 8000a34:	e002      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a36:	2301      	movs	r3, #1
 8000a38:	e000      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	69fa      	ldr	r2, [r7, #28]
 8000a3e:	f002 0203 	and.w	r2, r2, #3
 8000a42:	0092      	lsls	r2, r2, #2
 8000a44:	4093      	lsls	r3, r2
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a4c:	4934      	ldr	r1, [pc, #208]	; (8000b20 <HAL_GPIO_Init+0x30c>)
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	089b      	lsrs	r3, r3, #2
 8000a52:	3302      	adds	r3, #2
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a5a:	4b3a      	ldr	r3, [pc, #232]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	43db      	mvns	r3, r3
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	4013      	ands	r3, r2
 8000a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d003      	beq.n	8000a7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a7e:	4a31      	ldr	r2, [pc, #196]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a84:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	4013      	ands	r3, r2
 8000a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d003      	beq.n	8000aa8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aa8:	4a26      	ldr	r2, [pc, #152]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	4013      	ands	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ad2:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	69ba      	ldr	r2, [r7, #24]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d003      	beq.n	8000afc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000afc:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3301      	adds	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	2b0f      	cmp	r3, #15
 8000b0c:	f67f ae90 	bls.w	8000830 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b10:	bf00      	nop
 8000b12:	3724      	adds	r7, #36	; 0x24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40013800 	.word	0x40013800
 8000b24:	40020000 	.word	0x40020000
 8000b28:	40020400 	.word	0x40020400
 8000b2c:	40020800 	.word	0x40020800
 8000b30:	40020c00 	.word	0x40020c00
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40021400 	.word	0x40021400
 8000b3c:	40021800 	.word	0x40021800
 8000b40:	40021c00 	.word	0x40021c00
 8000b44:	40013c00 	.word	0x40013c00

08000b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	807b      	strh	r3, [r7, #2]
 8000b54:	4613      	mov	r3, r2
 8000b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b58:	787b      	ldrb	r3, [r7, #1]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d003      	beq.n	8000b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b5e:	887a      	ldrh	r2, [r7, #2]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b64:	e003      	b.n	8000b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b66:	887b      	ldrh	r3, [r7, #2]
 8000b68:	041a      	lsls	r2, r3, #16
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	619a      	str	r2, [r3, #24]
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000b7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7c:	b08f      	sub	sp, #60	; 0x3c
 8000b7e:	af0a      	add	r7, sp, #40	; 0x28
 8000b80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d101      	bne.n	8000b8c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e054      	b.n	8000c36 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d106      	bne.n	8000bac <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f007 fef2 	bl	8008990 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2203      	movs	r2, #3
 8000bb0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d102      	bne.n	8000bc6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f004 fc2c 	bl	8005428 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	687e      	ldr	r6, [r7, #4]
 8000bd8:	466d      	mov	r5, sp
 8000bda:	f106 0410 	add.w	r4, r6, #16
 8000bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000be2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000be4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000be6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bea:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bee:	1d33      	adds	r3, r6, #4
 8000bf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bf2:	6838      	ldr	r0, [r7, #0]
 8000bf4:	f004 fba6 	bl	8005344 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f004 fc23 	bl	800544a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	687e      	ldr	r6, [r7, #4]
 8000c0c:	466d      	mov	r5, sp
 8000c0e:	f106 0410 	add.w	r4, r6, #16
 8000c12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c22:	1d33      	adds	r3, r6, #4
 8000c24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c26:	6838      	ldr	r0, [r7, #0]
 8000c28:	f004 fd36 	bl	8005698 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c3e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000c3e:	b590      	push	{r4, r7, lr}
 8000c40:	b089      	sub	sp, #36	; 0x24
 8000c42:	af04      	add	r7, sp, #16
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	4608      	mov	r0, r1
 8000c48:	4611      	mov	r1, r2
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	70fb      	strb	r3, [r7, #3]
 8000c50:	460b      	mov	r3, r1
 8000c52:	70bb      	strb	r3, [r7, #2]
 8000c54:	4613      	mov	r3, r2
 8000c56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d101      	bne.n	8000c66 <HAL_HCD_HC_Init+0x28>
 8000c62:	2302      	movs	r3, #2
 8000c64:	e07f      	b.n	8000d66 <HAL_HCD_HC_Init+0x128>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8000c6e:	78fa      	ldrb	r2, [r7, #3]
 8000c70:	6879      	ldr	r1, [r7, #4]
 8000c72:	4613      	mov	r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4413      	add	r3, r2
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	440b      	add	r3, r1
 8000c7c:	333d      	adds	r3, #61	; 0x3d
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000c82:	78fa      	ldrb	r2, [r7, #3]
 8000c84:	6879      	ldr	r1, [r7, #4]
 8000c86:	4613      	mov	r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	4413      	add	r3, r2
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	440b      	add	r3, r1
 8000c90:	3338      	adds	r3, #56	; 0x38
 8000c92:	787a      	ldrb	r2, [r7, #1]
 8000c94:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000c96:	78fa      	ldrb	r2, [r7, #3]
 8000c98:	6879      	ldr	r1, [r7, #4]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	440b      	add	r3, r1
 8000ca4:	3340      	adds	r3, #64	; 0x40
 8000ca6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000ca8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000caa:	78fa      	ldrb	r2, [r7, #3]
 8000cac:	6879      	ldr	r1, [r7, #4]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	4413      	add	r3, r2
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	440b      	add	r3, r1
 8000cb8:	3339      	adds	r3, #57	; 0x39
 8000cba:	78fa      	ldrb	r2, [r7, #3]
 8000cbc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000cbe:	78fa      	ldrb	r2, [r7, #3]
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	4413      	add	r3, r2
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	440b      	add	r3, r1
 8000ccc:	333f      	adds	r3, #63	; 0x3f
 8000cce:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000cd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000cd4:	78fa      	ldrb	r2, [r7, #3]
 8000cd6:	78bb      	ldrb	r3, [r7, #2]
 8000cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cdc:	b2d8      	uxtb	r0, r3
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	440b      	add	r3, r1
 8000cea:	333a      	adds	r3, #58	; 0x3a
 8000cec:	4602      	mov	r2, r0
 8000cee:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8000cf0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	da0a      	bge.n	8000d0e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000cf8:	78fa      	ldrb	r2, [r7, #3]
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	440b      	add	r3, r1
 8000d06:	333b      	adds	r3, #59	; 0x3b
 8000d08:	2201      	movs	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]
 8000d0c:	e009      	b.n	8000d22 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000d0e:	78fa      	ldrb	r2, [r7, #3]
 8000d10:	6879      	ldr	r1, [r7, #4]
 8000d12:	4613      	mov	r3, r2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4413      	add	r3, r2
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	440b      	add	r3, r1
 8000d1c:	333b      	adds	r3, #59	; 0x3b
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8000d22:	78fa      	ldrb	r2, [r7, #3]
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	4613      	mov	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4413      	add	r3, r2
 8000d2c:	00db      	lsls	r3, r3, #3
 8000d2e:	440b      	add	r3, r1
 8000d30:	333c      	adds	r3, #60	; 0x3c
 8000d32:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d36:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6818      	ldr	r0, [r3, #0]
 8000d3c:	787c      	ldrb	r4, [r7, #1]
 8000d3e:	78ba      	ldrb	r2, [r7, #2]
 8000d40:	78f9      	ldrb	r1, [r7, #3]
 8000d42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d44:	9302      	str	r3, [sp, #8]
 8000d46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d4a:	9301      	str	r3, [sp, #4]
 8000d4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	4623      	mov	r3, r4
 8000d54:	f004 fe22 	bl	800599c <USB_HC_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd90      	pop	{r4, r7, pc}

08000d6e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b084      	sub	sp, #16
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	460b      	mov	r3, r1
 8000d78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d101      	bne.n	8000d8c <HAL_HCD_HC_Halt+0x1e>
 8000d88:	2302      	movs	r3, #2
 8000d8a:	e00f      	b.n	8000dac <HAL_HCD_HC_Halt+0x3e>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2201      	movs	r2, #1
 8000d90:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	78fa      	ldrb	r2, [r7, #3]
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f005 f85c 	bl	8005e5a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	70fb      	strb	r3, [r7, #3]
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	70bb      	strb	r3, [r7, #2]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8000dce:	78fa      	ldrb	r2, [r7, #3]
 8000dd0:	6879      	ldr	r1, [r7, #4]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	440b      	add	r3, r1
 8000ddc:	333b      	adds	r3, #59	; 0x3b
 8000dde:	78ba      	ldrb	r2, [r7, #2]
 8000de0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000de2:	78fa      	ldrb	r2, [r7, #3]
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	4613      	mov	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4413      	add	r3, r2
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	440b      	add	r3, r1
 8000df0:	333f      	adds	r3, #63	; 0x3f
 8000df2:	787a      	ldrb	r2, [r7, #1]
 8000df4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8000df6:	7c3b      	ldrb	r3, [r7, #16]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d10a      	bne.n	8000e12 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000dfc:	78fa      	ldrb	r2, [r7, #3]
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	4613      	mov	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	440b      	add	r3, r1
 8000e0a:	3342      	adds	r3, #66	; 0x42
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	e009      	b.n	8000e26 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e12:	78fa      	ldrb	r2, [r7, #3]
 8000e14:	6879      	ldr	r1, [r7, #4]
 8000e16:	4613      	mov	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	4413      	add	r3, r2
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	440b      	add	r3, r1
 8000e20:	3342      	adds	r3, #66	; 0x42
 8000e22:	2202      	movs	r2, #2
 8000e24:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000e26:	787b      	ldrb	r3, [r7, #1]
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	f200 80d6 	bhi.w	8000fda <HAL_HCD_HC_SubmitRequest+0x226>
 8000e2e:	a201      	add	r2, pc, #4	; (adr r2, 8000e34 <HAL_HCD_HC_SubmitRequest+0x80>)
 8000e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e34:	08000e45 	.word	0x08000e45
 8000e38:	08000fc5 	.word	0x08000fc5
 8000e3c:	08000eb1 	.word	0x08000eb1
 8000e40:	08000f3b 	.word	0x08000f3b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000e44:	7c3b      	ldrb	r3, [r7, #16]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	f040 80c9 	bne.w	8000fde <HAL_HCD_HC_SubmitRequest+0x22a>
 8000e4c:	78bb      	ldrb	r3, [r7, #2]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 80c5 	bne.w	8000fde <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8000e54:	8b3b      	ldrh	r3, [r7, #24]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d109      	bne.n	8000e6e <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8000e5a:	78fa      	ldrb	r2, [r7, #3]
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4413      	add	r3, r2
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	440b      	add	r3, r1
 8000e68:	3351      	adds	r3, #81	; 0x51
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000e6e:	78fa      	ldrb	r2, [r7, #3]
 8000e70:	6879      	ldr	r1, [r7, #4]
 8000e72:	4613      	mov	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	440b      	add	r3, r1
 8000e7c:	3351      	adds	r3, #81	; 0x51
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d10a      	bne.n	8000e9a <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000e84:	78fa      	ldrb	r2, [r7, #3]
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4413      	add	r3, r2
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	440b      	add	r3, r1
 8000e92:	3342      	adds	r3, #66	; 0x42
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000e98:	e0a1      	b.n	8000fde <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e9a:	78fa      	ldrb	r2, [r7, #3]
 8000e9c:	6879      	ldr	r1, [r7, #4]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	440b      	add	r3, r1
 8000ea8:	3342      	adds	r3, #66	; 0x42
 8000eaa:	2202      	movs	r2, #2
 8000eac:	701a      	strb	r2, [r3, #0]
      break;
 8000eae:	e096      	b.n	8000fde <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8000eb0:	78bb      	ldrb	r3, [r7, #2]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d120      	bne.n	8000ef8 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000eb6:	78fa      	ldrb	r2, [r7, #3]
 8000eb8:	6879      	ldr	r1, [r7, #4]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	440b      	add	r3, r1
 8000ec4:	3351      	adds	r3, #81	; 0x51
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d10a      	bne.n	8000ee2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ecc:	78fa      	ldrb	r2, [r7, #3]
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4413      	add	r3, r2
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	440b      	add	r3, r1
 8000eda:	3342      	adds	r3, #66	; 0x42
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8000ee0:	e07e      	b.n	8000fe0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000ee2:	78fa      	ldrb	r2, [r7, #3]
 8000ee4:	6879      	ldr	r1, [r7, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	440b      	add	r3, r1
 8000ef0:	3342      	adds	r3, #66	; 0x42
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	701a      	strb	r2, [r3, #0]
      break;
 8000ef6:	e073      	b.n	8000fe0 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000ef8:	78fa      	ldrb	r2, [r7, #3]
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	4613      	mov	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	440b      	add	r3, r1
 8000f06:	3350      	adds	r3, #80	; 0x50
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d10a      	bne.n	8000f24 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f0e:	78fa      	ldrb	r2, [r7, #3]
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	4613      	mov	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	440b      	add	r3, r1
 8000f1c:	3342      	adds	r3, #66	; 0x42
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
      break;
 8000f22:	e05d      	b.n	8000fe0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f24:	78fa      	ldrb	r2, [r7, #3]
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	440b      	add	r3, r1
 8000f32:	3342      	adds	r3, #66	; 0x42
 8000f34:	2202      	movs	r2, #2
 8000f36:	701a      	strb	r2, [r3, #0]
      break;
 8000f38:	e052      	b.n	8000fe0 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8000f3a:	78bb      	ldrb	r3, [r7, #2]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d120      	bne.n	8000f82 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f40:	78fa      	ldrb	r2, [r7, #3]
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	4613      	mov	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4413      	add	r3, r2
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	440b      	add	r3, r1
 8000f4e:	3351      	adds	r3, #81	; 0x51
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10a      	bne.n	8000f6c <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f56:	78fa      	ldrb	r2, [r7, #3]
 8000f58:	6879      	ldr	r1, [r7, #4]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	440b      	add	r3, r1
 8000f64:	3342      	adds	r3, #66	; 0x42
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000f6a:	e039      	b.n	8000fe0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f6c:	78fa      	ldrb	r2, [r7, #3]
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	440b      	add	r3, r1
 8000f7a:	3342      	adds	r3, #66	; 0x42
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	701a      	strb	r2, [r3, #0]
      break;
 8000f80:	e02e      	b.n	8000fe0 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000f82:	78fa      	ldrb	r2, [r7, #3]
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	4613      	mov	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	440b      	add	r3, r1
 8000f90:	3350      	adds	r3, #80	; 0x50
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d10a      	bne.n	8000fae <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f98:	78fa      	ldrb	r2, [r7, #3]
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	440b      	add	r3, r1
 8000fa6:	3342      	adds	r3, #66	; 0x42
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
      break;
 8000fac:	e018      	b.n	8000fe0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000fae:	78fa      	ldrb	r2, [r7, #3]
 8000fb0:	6879      	ldr	r1, [r7, #4]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	440b      	add	r3, r1
 8000fbc:	3342      	adds	r3, #66	; 0x42
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	701a      	strb	r2, [r3, #0]
      break;
 8000fc2:	e00d      	b.n	8000fe0 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fc4:	78fa      	ldrb	r2, [r7, #3]
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	440b      	add	r3, r1
 8000fd2:	3342      	adds	r3, #66	; 0x42
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
      break;
 8000fd8:	e002      	b.n	8000fe0 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8000fda:	bf00      	nop
 8000fdc:	e000      	b.n	8000fe0 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8000fde:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000fe0:	78fa      	ldrb	r2, [r7, #3]
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	440b      	add	r3, r1
 8000fee:	3344      	adds	r3, #68	; 0x44
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8000ff4:	78fa      	ldrb	r2, [r7, #3]
 8000ff6:	8b39      	ldrh	r1, [r7, #24]
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	4403      	add	r3, r0
 8001004:	3348      	adds	r3, #72	; 0x48
 8001006:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001008:	78fa      	ldrb	r2, [r7, #3]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	335c      	adds	r3, #92	; 0x5c
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800101c:	78fa      	ldrb	r2, [r7, #3]
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	4613      	mov	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	440b      	add	r3, r1
 800102a:	334c      	adds	r3, #76	; 0x4c
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001030:	78fa      	ldrb	r2, [r7, #3]
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	4613      	mov	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	440b      	add	r3, r1
 800103e:	3339      	adds	r3, #57	; 0x39
 8001040:	78fa      	ldrb	r2, [r7, #3]
 8001042:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001044:	78fa      	ldrb	r2, [r7, #3]
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	440b      	add	r3, r1
 8001052:	335d      	adds	r3, #93	; 0x5d
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6818      	ldr	r0, [r3, #0]
 800105c:	78fa      	ldrb	r2, [r7, #3]
 800105e:	4613      	mov	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	3338      	adds	r3, #56	; 0x38
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	18d1      	adds	r1, r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	461a      	mov	r2, r3
 8001074:	f004 fd9c 	bl	8005bb0 <USB_HC_StartXfer>
 8001078:	4603      	mov	r3, r0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop

08001084 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f004 fab9 	bl	8005612 <USB_GetMode>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	f040 80f1 	bne.w	800128a <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f004 fa9d 	bl	80055ec <USB_ReadInterrupts>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 80e7 	beq.w	8001288 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f004 fa94 	bl	80055ec <USB_ReadInterrupts>
 80010c4:	4603      	mov	r3, r0
 80010c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80010ce:	d104      	bne.n	80010da <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f004 fa84 	bl	80055ec <USB_ReadInterrupts>
 80010e4:	4603      	mov	r3, r0
 80010e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80010ee:	d104      	bne.n	80010fa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f004 fa74 	bl	80055ec <USB_ReadInterrupts>
 8001104:	4603      	mov	r3, r0
 8001106:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800110a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800110e:	d104      	bne.n	800111a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001118:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f004 fa64 	bl	80055ec <USB_ReadInterrupts>
 8001124:	4603      	mov	r3, r0
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b02      	cmp	r3, #2
 800112c:	d103      	bne.n	8001136 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2202      	movs	r2, #2
 8001134:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f004 fa56 	bl	80055ec <USB_ReadInterrupts>
 8001140:	4603      	mov	r3, r0
 8001142:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001146:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800114a:	d117      	bne.n	800117c <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800115a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800115e:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f007 fc93 	bl	8008a8c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2101      	movs	r1, #1
 800116c:	4618      	mov	r0, r3
 800116e:	f004 fb4f 	bl	8005810 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800117a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f004 fa33 	bl	80055ec <USB_ReadInterrupts>
 8001186:	4603      	mov	r3, r0
 8001188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800118c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001190:	d102      	bne.n	8001198 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f001 f8c8 	bl	8002328 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f004 fa25 	bl	80055ec <USB_ReadInterrupts>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	2b08      	cmp	r3, #8
 80011aa:	d106      	bne.n	80011ba <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f007 fc51 	bl	8008a54 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2208      	movs	r2, #8
 80011b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f004 fa14 	bl	80055ec <USB_ReadInterrupts>
 80011c4:	4603      	mov	r3, r0
 80011c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80011ce:	d138      	bne.n	8001242 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f004 fe2f 	bl	8005e38 <USB_HC_ReadInterrupt>
 80011da:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	e025      	b.n	800122e <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	f003 030f 	and.w	r3, r3, #15
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	fa22 f303 	lsr.w	r3, r2, r3
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d018      	beq.n	8001228 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	015a      	lsls	r2, r3, #5
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4413      	add	r3, r2
 80011fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800120c:	d106      	bne.n	800121c <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	4619      	mov	r1, r3
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f8cf 	bl	80013b8 <HCD_HC_IN_IRQHandler>
 800121a:	e005      	b.n	8001228 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	b2db      	uxtb	r3, r3
 8001220:	4619      	mov	r1, r3
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 fc5f 	bl	8001ae6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	3301      	adds	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	429a      	cmp	r2, r3
 8001236:	d3d4      	bcc.n	80011e2 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001240:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f004 f9d0 	bl	80055ec <USB_ReadInterrupts>
 800124c:	4603      	mov	r3, r0
 800124e:	f003 0310 	and.w	r3, r3, #16
 8001252:	2b10      	cmp	r3, #16
 8001254:	d101      	bne.n	800125a <HAL_HCD_IRQHandler+0x1d6>
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <HAL_HCD_IRQHandler+0x1d8>
 800125a:	2300      	movs	r3, #0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d014      	beq.n	800128a <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	699a      	ldr	r2, [r3, #24]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0210 	bic.w	r2, r2, #16
 800126e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 ffad 	bl	80021d0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	699a      	ldr	r2, [r3, #24]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f042 0210 	orr.w	r2, r2, #16
 8001284:	619a      	str	r2, [r3, #24]
 8001286:	e000      	b.n	800128a <HAL_HCD_IRQHandler+0x206>
      return;
 8001288:	bf00      	nop
    }
  }
}
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d101      	bne.n	80012a6 <HAL_HCD_Start+0x16>
 80012a2:	2302      	movs	r3, #2
 80012a4:	e013      	b.n	80012ce <HAL_HCD_Start+0x3e>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 f8a7 	bl	8005406 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2101      	movs	r1, #1
 80012be:	4618      	mov	r0, r3
 80012c0:	f004 fb0a 	bl	80058d8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d101      	bne.n	80012ec <HAL_HCD_Stop+0x16>
 80012e8:	2302      	movs	r3, #2
 80012ea:	e00d      	b.n	8001308 <HAL_HCD_Stop+0x32>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f004 fee9 	bl	80060d0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f004 fab1 	bl	8005884 <USB_ResetPort>
 8001322:	4603      	mov	r3, r0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001338:	78fa      	ldrb	r2, [r7, #3]
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	440b      	add	r3, r1
 8001346:	335c      	adds	r3, #92	; 0x5c
 8001348:	781b      	ldrb	r3, [r3, #0]
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	460b      	mov	r3, r1
 8001360:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001362:	78fa      	ldrb	r2, [r7, #3]
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	440b      	add	r3, r1
 8001370:	334c      	adds	r3, #76	; 0x4c
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f004 faf3 	bl	8005978 <USB_GetCurrentFrame>
 8001392:	4603      	mov	r3, r0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f004 face 	bl	800594a <USB_GetHostSpeed>
 80013ae:	4603      	mov	r3, r0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80013ce:	78fb      	ldrb	r3, [r7, #3]
 80013d0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	015a      	lsls	r2, r3, #5
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4413      	add	r3, r2
 80013da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d119      	bne.n	800141c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	015a      	lsls	r2, r3, #5
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4413      	add	r3, r2
 80013f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013f4:	461a      	mov	r2, r3
 80013f6:	2304      	movs	r3, #4
 80013f8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	015a      	lsls	r2, r3, #5
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4413      	add	r3, r2
 8001402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	0151      	lsls	r1, r2, #5
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	440a      	add	r2, r1
 8001410:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001414:	f043 0302 	orr.w	r3, r3, #2
 8001418:	60d3      	str	r3, [r2, #12]
 800141a:	e095      	b.n	8001548 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	015a      	lsls	r2, r3, #5
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4413      	add	r3, r2
 8001424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 0320 	and.w	r3, r3, #32
 800142e:	2b20      	cmp	r3, #32
 8001430:	d109      	bne.n	8001446 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	015a      	lsls	r2, r3, #5
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4413      	add	r3, r2
 800143a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800143e:	461a      	mov	r2, r3
 8001440:	2320      	movs	r3, #32
 8001442:	6093      	str	r3, [r2, #8]
 8001444:	e080      	b.n	8001548 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	015a      	lsls	r2, r3, #5
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4413      	add	r3, r2
 800144e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 0308 	and.w	r3, r3, #8
 8001458:	2b08      	cmp	r3, #8
 800145a:	d134      	bne.n	80014c6 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	015a      	lsls	r2, r3, #5
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4413      	add	r3, r2
 8001464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	0151      	lsls	r1, r2, #5
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	440a      	add	r2, r1
 8001472:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001476:	f043 0302 	orr.w	r3, r3, #2
 800147a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	440b      	add	r3, r1
 800148a:	335d      	adds	r3, #93	; 0x5d
 800148c:	2205      	movs	r2, #5
 800148e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	015a      	lsls	r2, r3, #5
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4413      	add	r3, r2
 8001498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800149c:	461a      	mov	r2, r3
 800149e:	2310      	movs	r3, #16
 80014a0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	015a      	lsls	r2, r3, #5
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4413      	add	r3, r2
 80014aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014ae:	461a      	mov	r2, r3
 80014b0:	2308      	movs	r3, #8
 80014b2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	4611      	mov	r1, r2
 80014be:	4618      	mov	r0, r3
 80014c0:	f004 fccb 	bl	8005e5a <USB_HC_Halt>
 80014c4:	e040      	b.n	8001548 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	015a      	lsls	r2, r3, #5
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4413      	add	r3, r2
 80014ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014dc:	d134      	bne.n	8001548 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	015a      	lsls	r2, r3, #5
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	4413      	add	r3, r2
 80014e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	0151      	lsls	r1, r2, #5
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	440a      	add	r2, r1
 80014f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f004 fca6 	bl	8005e5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	015a      	lsls	r2, r3, #5
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4413      	add	r3, r2
 8001516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800151a:	461a      	mov	r2, r3
 800151c:	2310      	movs	r3, #16
 800151e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	440b      	add	r3, r1
 800152e:	335d      	adds	r3, #93	; 0x5d
 8001530:	2208      	movs	r2, #8
 8001532:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	015a      	lsls	r2, r3, #5
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4413      	add	r3, r2
 800153c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001540:	461a      	mov	r2, r3
 8001542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001546:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	015a      	lsls	r2, r3, #5
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4413      	add	r3, r2
 8001550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800155a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800155e:	d122      	bne.n	80015a6 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	015a      	lsls	r2, r3, #5
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4413      	add	r3, r2
 8001568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	0151      	lsls	r1, r2, #5
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	440a      	add	r2, r1
 8001576:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800157a:	f043 0302 	orr.w	r3, r3, #2
 800157e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	4611      	mov	r1, r2
 800158a:	4618      	mov	r0, r3
 800158c:	f004 fc65 	bl	8005e5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	015a      	lsls	r2, r3, #5
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4413      	add	r3, r2
 8001598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800159c:	461a      	mov	r2, r3
 800159e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015a2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80015a4:	e29b      	b.n	8001ade <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	015a      	lsls	r2, r3, #5
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4413      	add	r3, r2
 80015ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	f040 80c1 	bne.w	8001740 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d01b      	beq.n	80015fe <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	440b      	add	r3, r1
 80015d4:	3348      	adds	r3, #72	; 0x48
 80015d6:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	0159      	lsls	r1, r3, #5
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	440b      	add	r3, r1
 80015e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80015ea:	1ad1      	subs	r1, r2, r3
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	4403      	add	r3, r0
 80015fa:	334c      	adds	r3, #76	; 0x4c
 80015fc:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	440b      	add	r3, r1
 800160c:	335d      	adds	r3, #93	; 0x5d
 800160e:	2201      	movs	r2, #1
 8001610:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	440b      	add	r3, r1
 8001620:	3358      	adds	r3, #88	; 0x58
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	015a      	lsls	r2, r3, #5
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	4413      	add	r3, r2
 800162e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001632:	461a      	mov	r2, r3
 8001634:	2301      	movs	r3, #1
 8001636:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	440b      	add	r3, r1
 8001646:	333f      	adds	r3, #63	; 0x3f
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00a      	beq.n	8001664 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	440b      	add	r3, r1
 800165c:	333f      	adds	r3, #63	; 0x3f
 800165e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001660:	2b02      	cmp	r3, #2
 8001662:	d121      	bne.n	80016a8 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	015a      	lsls	r2, r3, #5
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4413      	add	r3, r2
 800166c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	0151      	lsls	r1, r2, #5
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	440a      	add	r2, r1
 800167a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800167e:	f043 0302 	orr.w	r3, r3, #2
 8001682:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	4611      	mov	r1, r2
 800168e:	4618      	mov	r0, r3
 8001690:	f004 fbe3 	bl	8005e5a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	015a      	lsls	r2, r3, #5
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	4413      	add	r3, r2
 800169c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016a0:	461a      	mov	r2, r3
 80016a2:	2310      	movs	r3, #16
 80016a4:	6093      	str	r3, [r2, #8]
 80016a6:	e034      	b.n	8001712 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	440b      	add	r3, r1
 80016b6:	333f      	adds	r3, #63	; 0x3f
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d129      	bne.n	8001712 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	015a      	lsls	r2, r3, #5
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	4413      	add	r3, r2
 80016c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	0151      	lsls	r1, r2, #5
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	440a      	add	r2, r1
 80016d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016dc:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	440b      	add	r3, r1
 80016ec:	335c      	adds	r3, #92	; 0x5c
 80016ee:	2201      	movs	r2, #1
 80016f0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	b2d8      	uxtb	r0, r3
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	440b      	add	r3, r1
 8001704:	335c      	adds	r3, #92	; 0x5c
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4601      	mov	r1, r0
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f007 f9cb 	bl	8008aa8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	440b      	add	r3, r1
 8001720:	3350      	adds	r3, #80	; 0x50
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	f083 0301 	eor.w	r3, r3, #1
 8001728:	b2d8      	uxtb	r0, r3
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	440b      	add	r3, r1
 8001738:	3350      	adds	r3, #80	; 0x50
 800173a:	4602      	mov	r2, r0
 800173c:	701a      	strb	r2, [r3, #0]
}
 800173e:	e1ce      	b.n	8001ade <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	015a      	lsls	r2, r3, #5
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4413      	add	r3, r2
 8001748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b02      	cmp	r3, #2
 8001754:	f040 80f1 	bne.w	800193a <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	015a      	lsls	r2, r3, #5
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4413      	add	r3, r2
 8001760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	0151      	lsls	r1, r2, #5
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	440a      	add	r2, r1
 800176e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001772:	f023 0302 	bic.w	r3, r3, #2
 8001776:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	440b      	add	r3, r1
 8001786:	335d      	adds	r3, #93	; 0x5d
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d10a      	bne.n	80017a4 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	440b      	add	r3, r1
 800179c:	335c      	adds	r3, #92	; 0x5c
 800179e:	2201      	movs	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]
 80017a2:	e0b0      	b.n	8001906 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	440b      	add	r3, r1
 80017b2:	335d      	adds	r3, #93	; 0x5d
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b05      	cmp	r3, #5
 80017b8:	d10a      	bne.n	80017d0 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	440b      	add	r3, r1
 80017c8:	335c      	adds	r3, #92	; 0x5c
 80017ca:	2205      	movs	r2, #5
 80017cc:	701a      	strb	r2, [r3, #0]
 80017ce:	e09a      	b.n	8001906 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	440b      	add	r3, r1
 80017de:	335d      	adds	r3, #93	; 0x5d
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b06      	cmp	r3, #6
 80017e4:	d00a      	beq.n	80017fc <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	440b      	add	r3, r1
 80017f4:	335d      	adds	r3, #93	; 0x5d
 80017f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d156      	bne.n	80018aa <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	440b      	add	r3, r1
 800180a:	3358      	adds	r3, #88	; 0x58
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	1c59      	adds	r1, r3, #1
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4403      	add	r3, r0
 800181e:	3358      	adds	r3, #88	; 0x58
 8001820:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	3358      	adds	r3, #88	; 0x58
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b03      	cmp	r3, #3
 8001836:	d914      	bls.n	8001862 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	440b      	add	r3, r1
 8001846:	3358      	adds	r3, #88	; 0x58
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	335c      	adds	r3, #92	; 0x5c
 800185c:	2204      	movs	r2, #4
 800185e:	701a      	strb	r2, [r3, #0]
 8001860:	e009      	b.n	8001876 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	440b      	add	r3, r1
 8001870:	335c      	adds	r3, #92	; 0x5c
 8001872:	2202      	movs	r2, #2
 8001874:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	015a      	lsls	r2, r3, #5
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4413      	add	r3, r2
 800187e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800188c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001894:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	015a      	lsls	r2, r3, #5
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4413      	add	r3, r2
 800189e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018a2:	461a      	mov	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	e02d      	b.n	8001906 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	440b      	add	r3, r1
 80018b8:	335d      	adds	r3, #93	; 0x5d
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b03      	cmp	r3, #3
 80018be:	d122      	bne.n	8001906 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	440b      	add	r3, r1
 80018ce:	335c      	adds	r3, #92	; 0x5c
 80018d0:	2202      	movs	r2, #2
 80018d2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	015a      	lsls	r2, r3, #5
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4413      	add	r3, r2
 80018dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80018ea:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018f2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	015a      	lsls	r2, r3, #5
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4413      	add	r3, r2
 80018fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001900:	461a      	mov	r2, r3
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	015a      	lsls	r2, r3, #5
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4413      	add	r3, r2
 800190e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001912:	461a      	mov	r2, r3
 8001914:	2302      	movs	r3, #2
 8001916:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	b2d8      	uxtb	r0, r3
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	440b      	add	r3, r1
 800192a:	335c      	adds	r3, #92	; 0x5c
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	4601      	mov	r1, r0
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f007 f8b8 	bl	8008aa8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001938:	e0d1      	b.n	8001ade <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	015a      	lsls	r2, r3, #5
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4413      	add	r3, r2
 8001942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194c:	2b80      	cmp	r3, #128	; 0x80
 800194e:	d13e      	bne.n	80019ce <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	015a      	lsls	r2, r3, #5
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4413      	add	r3, r2
 8001958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	0151      	lsls	r1, r2, #5
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	440a      	add	r2, r1
 8001966:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800196a:	f043 0302 	orr.w	r3, r3, #2
 800196e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	440b      	add	r3, r1
 800197e:	3358      	adds	r3, #88	; 0x58
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	1c59      	adds	r1, r3, #1
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4403      	add	r3, r0
 8001992:	3358      	adds	r3, #88	; 0x58
 8001994:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	440b      	add	r3, r1
 80019a4:	335d      	adds	r3, #93	; 0x5d
 80019a6:	2206      	movs	r2, #6
 80019a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f004 fa50 	bl	8005e5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	015a      	lsls	r2, r3, #5
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c6:	461a      	mov	r2, r3
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	6093      	str	r3, [r2, #8]
}
 80019cc:	e087      	b.n	8001ade <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	015a      	lsls	r2, r3, #5
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	4413      	add	r3, r2
 80019d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 0310 	and.w	r3, r3, #16
 80019e0:	2b10      	cmp	r3, #16
 80019e2:	d17c      	bne.n	8001ade <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	440b      	add	r3, r1
 80019f2:	333f      	adds	r3, #63	; 0x3f
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d122      	bne.n	8001a40 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	440b      	add	r3, r1
 8001a08:	3358      	adds	r3, #88	; 0x58
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	015a      	lsls	r2, r3, #5
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	4413      	add	r3, r2
 8001a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	0151      	lsls	r1, r2, #5
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	440a      	add	r2, r1
 8001a24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a28:	f043 0302 	orr.w	r3, r3, #2
 8001a2c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	4611      	mov	r1, r2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f004 fa0e 	bl	8005e5a <USB_HC_Halt>
 8001a3e:	e045      	b.n	8001acc <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	4613      	mov	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	440b      	add	r3, r1
 8001a4e:	333f      	adds	r3, #63	; 0x3f
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00a      	beq.n	8001a6c <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	440b      	add	r3, r1
 8001a64:	333f      	adds	r3, #63	; 0x3f
 8001a66:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d12f      	bne.n	8001acc <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	440b      	add	r3, r1
 8001a7a:	3358      	adds	r3, #88	; 0x58
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d121      	bne.n	8001acc <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	440b      	add	r3, r1
 8001a96:	335d      	adds	r3, #93	; 0x5d
 8001a98:	2203      	movs	r2, #3
 8001a9a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	015a      	lsls	r2, r3, #5
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	0151      	lsls	r1, r2, #5
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	440a      	add	r2, r1
 8001ab2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ab6:	f043 0302 	orr.w	r3, r3, #2
 8001aba:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f004 f9c7 	bl	8005e5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	015a      	lsls	r2, r3, #5
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ad8:	461a      	mov	r2, r3
 8001ada:	2310      	movs	r3, #16
 8001adc:	6093      	str	r3, [r2, #8]
}
 8001ade:	bf00      	nop
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b086      	sub	sp, #24
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	460b      	mov	r3, r1
 8001af0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	015a      	lsls	r2, r3, #5
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	4413      	add	r3, r2
 8001b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d119      	bne.n	8001b4a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	015a      	lsls	r2, r3, #5
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b22:	461a      	mov	r2, r3
 8001b24:	2304      	movs	r3, #4
 8001b26:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	015a      	lsls	r2, r3, #5
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4413      	add	r3, r2
 8001b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	0151      	lsls	r1, r2, #5
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	440a      	add	r2, r1
 8001b3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b42:	f043 0302 	orr.w	r3, r3, #2
 8001b46:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001b48:	e33e      	b.n	80021c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	015a      	lsls	r2, r3, #5
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4413      	add	r3, r2
 8001b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 0320 	and.w	r3, r3, #32
 8001b5c:	2b20      	cmp	r3, #32
 8001b5e:	d141      	bne.n	8001be4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	015a      	lsls	r2, r3, #5
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4413      	add	r3, r2
 8001b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	2320      	movs	r3, #32
 8001b70:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	440b      	add	r3, r1
 8001b80:	333d      	adds	r3, #61	; 0x3d
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	f040 831f 	bne.w	80021c8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	440b      	add	r3, r1
 8001b98:	333d      	adds	r3, #61	; 0x3d
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	440b      	add	r3, r1
 8001bac:	335c      	adds	r3, #92	; 0x5c
 8001bae:	2202      	movs	r2, #2
 8001bb0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	015a      	lsls	r2, r3, #5
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4413      	add	r3, r2
 8001bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	0151      	lsls	r1, r2, #5
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	440a      	add	r2, r1
 8001bc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	4611      	mov	r1, r2
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f004 f93c 	bl	8005e5a <USB_HC_Halt>
}
 8001be2:	e2f1      	b.n	80021c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	015a      	lsls	r2, r3, #5
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4413      	add	r3, r2
 8001bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf6:	2b40      	cmp	r3, #64	; 0x40
 8001bf8:	d13f      	bne.n	8001c7a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	335d      	adds	r3, #93	; 0x5d
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	440b      	add	r3, r1
 8001c1c:	333d      	adds	r3, #61	; 0x3d
 8001c1e:	2201      	movs	r2, #1
 8001c20:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	440b      	add	r3, r1
 8001c30:	3358      	adds	r3, #88	; 0x58
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	015a      	lsls	r2, r3, #5
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	0151      	lsls	r1, r2, #5
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	440a      	add	r2, r1
 8001c4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	4611      	mov	r1, r2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f004 f8fa 	bl	8005e5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	015a      	lsls	r2, r3, #5
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c72:	461a      	mov	r2, r3
 8001c74:	2340      	movs	r3, #64	; 0x40
 8001c76:	6093      	str	r3, [r2, #8]
}
 8001c78:	e2a6      	b.n	80021c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	015a      	lsls	r2, r3, #5
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4413      	add	r3, r2
 8001c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c90:	d122      	bne.n	8001cd8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	015a      	lsls	r2, r3, #5
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4413      	add	r3, r2
 8001c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	0151      	lsls	r1, r2, #5
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	440a      	add	r2, r1
 8001ca8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f004 f8cc 	bl	8005e5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	015a      	lsls	r2, r3, #5
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4413      	add	r3, r2
 8001cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cce:	461a      	mov	r2, r3
 8001cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd4:	6093      	str	r3, [r2, #8]
}
 8001cd6:	e277      	b.n	80021c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	015a      	lsls	r2, r3, #5
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4413      	add	r3, r2
 8001ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d135      	bne.n	8001d5a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	440b      	add	r3, r1
 8001cfc:	3358      	adds	r3, #88	; 0x58
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	015a      	lsls	r2, r3, #5
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	0151      	lsls	r1, r2, #5
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	440a      	add	r2, r1
 8001d18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f004 f894 	bl	8005e5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	015a      	lsls	r2, r3, #5
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4413      	add	r3, r2
 8001d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2301      	movs	r3, #1
 8001d42:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	440b      	add	r3, r1
 8001d52:	335d      	adds	r3, #93	; 0x5d
 8001d54:	2201      	movs	r2, #1
 8001d56:	701a      	strb	r2, [r3, #0]
}
 8001d58:	e236      	b.n	80021c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	015a      	lsls	r2, r3, #5
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4413      	add	r3, r2
 8001d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d12b      	bne.n	8001dc8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	015a      	lsls	r2, r3, #5
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4413      	add	r3, r2
 8001d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	2308      	movs	r3, #8
 8001d80:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	015a      	lsls	r2, r3, #5
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	0151      	lsls	r1, r2, #5
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	440a      	add	r2, r1
 8001d98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	4611      	mov	r1, r2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f004 f854 	bl	8005e5a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	440b      	add	r3, r1
 8001dc0:	335d      	adds	r3, #93	; 0x5d
 8001dc2:	2205      	movs	r2, #5
 8001dc4:	701a      	strb	r2, [r3, #0]
}
 8001dc6:	e1ff      	b.n	80021c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	015a      	lsls	r2, r3, #5
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4413      	add	r3, r2
 8001dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b10      	cmp	r3, #16
 8001ddc:	d155      	bne.n	8001e8a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	440b      	add	r3, r1
 8001dec:	3358      	adds	r3, #88	; 0x58
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	440b      	add	r3, r1
 8001e00:	335d      	adds	r3, #93	; 0x5d
 8001e02:	2203      	movs	r2, #3
 8001e04:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	440b      	add	r3, r1
 8001e14:	333d      	adds	r3, #61	; 0x3d
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d114      	bne.n	8001e46 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	440b      	add	r3, r1
 8001e2a:	333c      	adds	r3, #60	; 0x3c
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d109      	bne.n	8001e46 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	4613      	mov	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	440b      	add	r3, r1
 8001e40:	333d      	adds	r3, #61	; 0x3d
 8001e42:	2201      	movs	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	015a      	lsls	r2, r3, #5
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	0151      	lsls	r1, r2, #5
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	440a      	add	r2, r1
 8001e5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	4611      	mov	r1, r2
 8001e70:	4618      	mov	r0, r3
 8001e72:	f003 fff2 	bl	8005e5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	015a      	lsls	r2, r3, #5
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e82:	461a      	mov	r2, r3
 8001e84:	2310      	movs	r3, #16
 8001e86:	6093      	str	r3, [r2, #8]
}
 8001e88:	e19e      	b.n	80021c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	015a      	lsls	r2, r3, #5
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4413      	add	r3, r2
 8001e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9c:	2b80      	cmp	r3, #128	; 0x80
 8001e9e:	d12b      	bne.n	8001ef8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	015a      	lsls	r2, r3, #5
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	0151      	lsls	r1, r2, #5
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	440a      	add	r2, r1
 8001eb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eba:	f043 0302 	orr.w	r3, r3, #2
 8001ebe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	4611      	mov	r1, r2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f003 ffc5 	bl	8005e5a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	440b      	add	r3, r1
 8001ede:	335d      	adds	r3, #93	; 0x5d
 8001ee0:	2206      	movs	r2, #6
 8001ee2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	015a      	lsls	r2, r3, #5
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4413      	add	r3, r2
 8001eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	6093      	str	r3, [r2, #8]
}
 8001ef6:	e167      	b.n	80021c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	015a      	lsls	r2, r3, #5
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4413      	add	r3, r2
 8001f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0e:	d135      	bne.n	8001f7c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	0151      	lsls	r1, r2, #5
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	440a      	add	r2, r1
 8001f26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f2a:	f043 0302 	orr.w	r3, r3, #2
 8001f2e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f003 ff8d 	bl	8005e5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	2310      	movs	r3, #16
 8001f50:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	015a      	lsls	r2, r3, #5
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5e:	461a      	mov	r2, r3
 8001f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f64:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	440b      	add	r3, r1
 8001f74:	335d      	adds	r3, #93	; 0x5d
 8001f76:	2208      	movs	r2, #8
 8001f78:	701a      	strb	r2, [r3, #0]
}
 8001f7a:	e125      	b.n	80021c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	015a      	lsls	r2, r3, #5
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4413      	add	r3, r2
 8001f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	f040 811a 	bne.w	80021c8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	0151      	lsls	r1, r2, #5
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	440a      	add	r2, r1
 8001faa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fae:	f023 0302 	bic.w	r3, r3, #2
 8001fb2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	440b      	add	r3, r1
 8001fc2:	335d      	adds	r3, #93	; 0x5d
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d137      	bne.n	800203a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	440b      	add	r3, r1
 8001fd8:	335c      	adds	r3, #92	; 0x5c
 8001fda:	2201      	movs	r2, #1
 8001fdc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	440b      	add	r3, r1
 8001fec:	333f      	adds	r3, #63	; 0x3f
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d00b      	beq.n	800200c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	440b      	add	r3, r1
 8002002:	333f      	adds	r3, #63	; 0x3f
 8002004:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002006:	2b03      	cmp	r3, #3
 8002008:	f040 80c5 	bne.w	8002196 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	440b      	add	r3, r1
 800201a:	3351      	adds	r3, #81	; 0x51
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	f083 0301 	eor.w	r3, r3, #1
 8002022:	b2d8      	uxtb	r0, r3
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	440b      	add	r3, r1
 8002032:	3351      	adds	r3, #81	; 0x51
 8002034:	4602      	mov	r2, r0
 8002036:	701a      	strb	r2, [r3, #0]
 8002038:	e0ad      	b.n	8002196 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	440b      	add	r3, r1
 8002048:	335d      	adds	r3, #93	; 0x5d
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b03      	cmp	r3, #3
 800204e:	d10a      	bne.n	8002066 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	440b      	add	r3, r1
 800205e:	335c      	adds	r3, #92	; 0x5c
 8002060:	2202      	movs	r2, #2
 8002062:	701a      	strb	r2, [r3, #0]
 8002064:	e097      	b.n	8002196 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	440b      	add	r3, r1
 8002074:	335d      	adds	r3, #93	; 0x5d
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b04      	cmp	r3, #4
 800207a:	d10a      	bne.n	8002092 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	440b      	add	r3, r1
 800208a:	335c      	adds	r3, #92	; 0x5c
 800208c:	2202      	movs	r2, #2
 800208e:	701a      	strb	r2, [r3, #0]
 8002090:	e081      	b.n	8002196 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	440b      	add	r3, r1
 80020a0:	335d      	adds	r3, #93	; 0x5d
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b05      	cmp	r3, #5
 80020a6:	d10a      	bne.n	80020be <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	440b      	add	r3, r1
 80020b6:	335c      	adds	r3, #92	; 0x5c
 80020b8:	2205      	movs	r2, #5
 80020ba:	701a      	strb	r2, [r3, #0]
 80020bc:	e06b      	b.n	8002196 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	440b      	add	r3, r1
 80020cc:	335d      	adds	r3, #93	; 0x5d
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b06      	cmp	r3, #6
 80020d2:	d00a      	beq.n	80020ea <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	440b      	add	r3, r1
 80020e2:	335d      	adds	r3, #93	; 0x5d
 80020e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d155      	bne.n	8002196 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	440b      	add	r3, r1
 80020f8:	3358      	adds	r3, #88	; 0x58
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	1c59      	adds	r1, r3, #1
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4403      	add	r3, r0
 800210c:	3358      	adds	r3, #88	; 0x58
 800210e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	440b      	add	r3, r1
 800211e:	3358      	adds	r3, #88	; 0x58
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b03      	cmp	r3, #3
 8002124:	d914      	bls.n	8002150 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	440b      	add	r3, r1
 8002134:	3358      	adds	r3, #88	; 0x58
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	440b      	add	r3, r1
 8002148:	335c      	adds	r3, #92	; 0x5c
 800214a:	2204      	movs	r2, #4
 800214c:	701a      	strb	r2, [r3, #0]
 800214e:	e009      	b.n	8002164 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	440b      	add	r3, r1
 800215e:	335c      	adds	r3, #92	; 0x5c
 8002160:	2202      	movs	r2, #2
 8002162:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	015a      	lsls	r2, r3, #5
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4413      	add	r3, r2
 800216c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800217a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002182:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	015a      	lsls	r2, r3, #5
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4413      	add	r3, r2
 800218c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002190:	461a      	mov	r2, r3
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	015a      	lsls	r2, r3, #5
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4413      	add	r3, r2
 800219e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a2:	461a      	mov	r2, r3
 80021a4:	2302      	movs	r3, #2
 80021a6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	b2d8      	uxtb	r0, r3
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	440b      	add	r3, r1
 80021ba:	335c      	adds	r3, #92	; 0x5c
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	4601      	mov	r1, r0
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f006 fc70 	bl	8008aa8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80021c8:	bf00      	nop
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	; 0x28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	f003 030f 	and.w	r3, r3, #15
 80021f0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	0c5b      	lsrs	r3, r3, #17
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	091b      	lsrs	r3, r3, #4
 8002200:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002204:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d003      	beq.n	8002214 <HCD_RXQLVL_IRQHandler+0x44>
 800220c:	2b05      	cmp	r3, #5
 800220e:	f000 8082 	beq.w	8002316 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002212:	e083      	b.n	800231c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d07f      	beq.n	800231a <HCD_RXQLVL_IRQHandler+0x14a>
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	440b      	add	r3, r1
 8002228:	3344      	adds	r3, #68	; 0x44
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d074      	beq.n	800231a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6818      	ldr	r0, [r3, #0]
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	440b      	add	r3, r1
 8002242:	3344      	adds	r3, #68	; 0x44
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	b292      	uxth	r2, r2
 800224a:	4619      	mov	r1, r3
 800224c:	f003 f9a5 	bl	800559a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	440b      	add	r3, r1
 800225e:	3344      	adds	r3, #68	; 0x44
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	18d1      	adds	r1, r2, r3
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	4403      	add	r3, r0
 8002274:	3344      	adds	r3, #68	; 0x44
 8002276:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	440b      	add	r3, r1
 8002286:	334c      	adds	r3, #76	; 0x4c
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	18d1      	adds	r1, r2, r3
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4403      	add	r3, r0
 800229c:	334c      	adds	r3, #76	; 0x4c
 800229e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	6a3b      	ldr	r3, [r7, #32]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ac:	691a      	ldr	r2, [r3, #16]
 80022ae:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <HCD_RXQLVL_IRQHandler+0x154>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d031      	beq.n	800231a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022cc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022d4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e2:	461a      	mov	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	440b      	add	r3, r1
 80022f6:	3350      	adds	r3, #80	; 0x50
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	f083 0301 	eor.w	r3, r3, #1
 80022fe:	b2d8      	uxtb	r0, r3
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	440b      	add	r3, r1
 800230e:	3350      	adds	r3, #80	; 0x50
 8002310:	4602      	mov	r2, r0
 8002312:	701a      	strb	r2, [r3, #0]
      break;
 8002314:	e001      	b.n	800231a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002316:	bf00      	nop
 8002318:	e000      	b.n	800231c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800231a:	bf00      	nop
  }
}
 800231c:	bf00      	nop
 800231e:	3728      	adds	r7, #40	; 0x28
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	1ff80000 	.word	0x1ff80000

08002328 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002354:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b02      	cmp	r3, #2
 800235e:	d113      	bne.n	8002388 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b01      	cmp	r3, #1
 8002368:	d10a      	bne.n	8002380 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699a      	ldr	r2, [r3, #24]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002378:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f006 fb78 	bl	8008a70 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	f043 0302 	orr.w	r3, r3, #2
 8002386:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b08      	cmp	r3, #8
 8002390:	d147      	bne.n	8002422 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f043 0308 	orr.w	r3, r3, #8
 8002398:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d129      	bne.n	80023f8 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d113      	bne.n	80023d4 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80023b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023b6:	d106      	bne.n	80023c6 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2102      	movs	r1, #2
 80023be:	4618      	mov	r0, r3
 80023c0:	f003 fa26 	bl	8005810 <USB_InitFSLSPClkSel>
 80023c4:	e011      	b.n	80023ea <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2101      	movs	r1, #1
 80023cc:	4618      	mov	r0, r3
 80023ce:	f003 fa1f 	bl	8005810 <USB_InitFSLSPClkSel>
 80023d2:	e00a      	b.n	80023ea <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d106      	bne.n	80023ea <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023e2:	461a      	mov	r2, r3
 80023e4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80023e8:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f006 fb6a 	bl	8008ac4 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f006 fb3d 	bl	8008a70 <HAL_HCD_Connect_Callback>
 80023f6:	e014      	b.n	8002422 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f006 fb71 	bl	8008ae0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800240c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002410:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	699a      	ldr	r2, [r3, #24]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002420:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b20      	cmp	r3, #32
 800242a:	d103      	bne.n	8002434 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	f043 0320 	orr.w	r3, r3, #32
 8002432:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800243a:	461a      	mov	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	6013      	str	r3, [r2, #0]
}
 8002440:	bf00      	nop
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e11f      	b.n	800269a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f005 fff4 	bl	800845c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2224      	movs	r2, #36	; 0x24
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0201 	bic.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800249a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024ac:	f001 f9de 	bl	800386c <HAL_RCC_GetPCLK1Freq>
 80024b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	4a7b      	ldr	r2, [pc, #492]	; (80026a4 <HAL_I2C_Init+0x25c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d807      	bhi.n	80024cc <HAL_I2C_Init+0x84>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4a7a      	ldr	r2, [pc, #488]	; (80026a8 <HAL_I2C_Init+0x260>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	bf94      	ite	ls
 80024c4:	2301      	movls	r3, #1
 80024c6:	2300      	movhi	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	e006      	b.n	80024da <HAL_I2C_Init+0x92>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4a77      	ldr	r2, [pc, #476]	; (80026ac <HAL_I2C_Init+0x264>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	bf94      	ite	ls
 80024d4:	2301      	movls	r3, #1
 80024d6:	2300      	movhi	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e0db      	b.n	800269a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	4a72      	ldr	r2, [pc, #456]	; (80026b0 <HAL_I2C_Init+0x268>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	0c9b      	lsrs	r3, r3, #18
 80024ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	430a      	orrs	r2, r1
 8002500:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	4a64      	ldr	r2, [pc, #400]	; (80026a4 <HAL_I2C_Init+0x25c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d802      	bhi.n	800251c <HAL_I2C_Init+0xd4>
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	3301      	adds	r3, #1
 800251a:	e009      	b.n	8002530 <HAL_I2C_Init+0xe8>
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002522:	fb02 f303 	mul.w	r3, r2, r3
 8002526:	4a63      	ldr	r2, [pc, #396]	; (80026b4 <HAL_I2C_Init+0x26c>)
 8002528:	fba2 2303 	umull	r2, r3, r2, r3
 800252c:	099b      	lsrs	r3, r3, #6
 800252e:	3301      	adds	r3, #1
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6812      	ldr	r2, [r2, #0]
 8002534:	430b      	orrs	r3, r1
 8002536:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002542:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	4956      	ldr	r1, [pc, #344]	; (80026a4 <HAL_I2C_Init+0x25c>)
 800254c:	428b      	cmp	r3, r1
 800254e:	d80d      	bhi.n	800256c <HAL_I2C_Init+0x124>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1e59      	subs	r1, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	fbb1 f3f3 	udiv	r3, r1, r3
 800255e:	3301      	adds	r3, #1
 8002560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002564:	2b04      	cmp	r3, #4
 8002566:	bf38      	it	cc
 8002568:	2304      	movcc	r3, #4
 800256a:	e04f      	b.n	800260c <HAL_I2C_Init+0x1c4>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d111      	bne.n	8002598 <HAL_I2C_Init+0x150>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	1e58      	subs	r0, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6859      	ldr	r1, [r3, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	440b      	add	r3, r1
 8002582:	fbb0 f3f3 	udiv	r3, r0, r3
 8002586:	3301      	adds	r3, #1
 8002588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf0c      	ite	eq
 8002590:	2301      	moveq	r3, #1
 8002592:	2300      	movne	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	e012      	b.n	80025be <HAL_I2C_Init+0x176>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1e58      	subs	r0, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6859      	ldr	r1, [r3, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	0099      	lsls	r1, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ae:	3301      	adds	r3, #1
 80025b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	bf0c      	ite	eq
 80025b8:	2301      	moveq	r3, #1
 80025ba:	2300      	movne	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Init+0x17e>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e022      	b.n	800260c <HAL_I2C_Init+0x1c4>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10e      	bne.n	80025ec <HAL_I2C_Init+0x1a4>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1e58      	subs	r0, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6859      	ldr	r1, [r3, #4]
 80025d6:	460b      	mov	r3, r1
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	440b      	add	r3, r1
 80025dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80025e0:	3301      	adds	r3, #1
 80025e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ea:	e00f      	b.n	800260c <HAL_I2C_Init+0x1c4>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1e58      	subs	r0, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6859      	ldr	r1, [r3, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	0099      	lsls	r1, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002602:	3301      	adds	r3, #1
 8002604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002608:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	6809      	ldr	r1, [r1, #0]
 8002610:	4313      	orrs	r3, r2
 8002612:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69da      	ldr	r2, [r3, #28]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800263a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6911      	ldr	r1, [r2, #16]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68d2      	ldr	r2, [r2, #12]
 8002646:	4311      	orrs	r1, r2
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	430b      	orrs	r3, r1
 800264e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695a      	ldr	r2, [r3, #20]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2220      	movs	r2, #32
 8002686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	000186a0 	.word	0x000186a0
 80026a8:	001e847f 	.word	0x001e847f
 80026ac:	003d08ff 	.word	0x003d08ff
 80026b0:	431bde83 	.word	0x431bde83
 80026b4:	10624dd3 	.word	0x10624dd3

080026b8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e128      	b.n	800291c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d109      	bne.n	80026ea <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a90      	ldr	r2, [pc, #576]	; (8002924 <HAL_I2S_Init+0x26c>)
 80026e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f005 ff01 	bl	80084ec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2202      	movs	r2, #2
 80026ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002700:	f023 030f 	bic.w	r3, r3, #15
 8002704:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2202      	movs	r2, #2
 800270c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d060      	beq.n	80027d8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d102      	bne.n	8002724 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800271e:	2310      	movs	r3, #16
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	e001      	b.n	8002728 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002724:	2320      	movs	r3, #32
 8002726:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b20      	cmp	r3, #32
 800272e:	d802      	bhi.n	8002736 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002736:	2001      	movs	r0, #1
 8002738:	f001 f9a2 	bl	8003a80 <HAL_RCCEx_GetPeriphCLKFreq>
 800273c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002746:	d125      	bne.n	8002794 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d010      	beq.n	8002772 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	fbb2 f2f3 	udiv	r2, r2, r3
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	461a      	mov	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	fbb2 f3f3 	udiv	r3, r2, r3
 800276c:	3305      	adds	r3, #5
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	e01f      	b.n	80027b2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	fbb2 f2f3 	udiv	r2, r2, r3
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	461a      	mov	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	fbb2 f3f3 	udiv	r3, r2, r3
 800278e:	3305      	adds	r3, #5
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	e00e      	b.n	80027b2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	fbb2 f2f3 	udiv	r2, r2, r3
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	461a      	mov	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ae:	3305      	adds	r3, #5
 80027b0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4a5c      	ldr	r2, [pc, #368]	; (8002928 <HAL_I2S_Init+0x270>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	08db      	lsrs	r3, r3, #3
 80027bc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	085b      	lsrs	r3, r3, #1
 80027ce:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	021b      	lsls	r3, r3, #8
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	e003      	b.n	80027e0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80027d8:	2302      	movs	r3, #2
 80027da:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d902      	bls.n	80027ec <HAL_I2S_Init+0x134>
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	2bff      	cmp	r3, #255	; 0xff
 80027ea:	d907      	bls.n	80027fc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f0:	f043 0210 	orr.w	r2, r3, #16
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e08f      	b.n	800291c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	ea42 0103 	orr.w	r1, r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	430a      	orrs	r2, r1
 800280e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800281a:	f023 030f 	bic.w	r3, r3, #15
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6851      	ldr	r1, [r2, #4]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6892      	ldr	r2, [r2, #8]
 8002826:	4311      	orrs	r1, r2
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	68d2      	ldr	r2, [r2, #12]
 800282c:	4311      	orrs	r1, r2
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6992      	ldr	r2, [r2, #24]
 8002832:	430a      	orrs	r2, r1
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800283e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d161      	bne.n	800290c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a38      	ldr	r2, [pc, #224]	; (800292c <HAL_I2S_Init+0x274>)
 800284c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a37      	ldr	r2, [pc, #220]	; (8002930 <HAL_I2S_Init+0x278>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d101      	bne.n	800285c <HAL_I2S_Init+0x1a4>
 8002858:	4b36      	ldr	r3, [pc, #216]	; (8002934 <HAL_I2S_Init+0x27c>)
 800285a:	e001      	b.n	8002860 <HAL_I2S_Init+0x1a8>
 800285c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6812      	ldr	r2, [r2, #0]
 8002866:	4932      	ldr	r1, [pc, #200]	; (8002930 <HAL_I2S_Init+0x278>)
 8002868:	428a      	cmp	r2, r1
 800286a:	d101      	bne.n	8002870 <HAL_I2S_Init+0x1b8>
 800286c:	4a31      	ldr	r2, [pc, #196]	; (8002934 <HAL_I2S_Init+0x27c>)
 800286e:	e001      	b.n	8002874 <HAL_I2S_Init+0x1bc>
 8002870:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002874:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002878:	f023 030f 	bic.w	r3, r3, #15
 800287c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a2b      	ldr	r2, [pc, #172]	; (8002930 <HAL_I2S_Init+0x278>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d101      	bne.n	800288c <HAL_I2S_Init+0x1d4>
 8002888:	4b2a      	ldr	r3, [pc, #168]	; (8002934 <HAL_I2S_Init+0x27c>)
 800288a:	e001      	b.n	8002890 <HAL_I2S_Init+0x1d8>
 800288c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002890:	2202      	movs	r2, #2
 8002892:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a25      	ldr	r2, [pc, #148]	; (8002930 <HAL_I2S_Init+0x278>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d101      	bne.n	80028a2 <HAL_I2S_Init+0x1ea>
 800289e:	4b25      	ldr	r3, [pc, #148]	; (8002934 <HAL_I2S_Init+0x27c>)
 80028a0:	e001      	b.n	80028a6 <HAL_I2S_Init+0x1ee>
 80028a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028b2:	d003      	beq.n	80028bc <HAL_I2S_Init+0x204>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d103      	bne.n	80028c4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80028bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	e001      	b.n	80028c8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80028c4:	2300      	movs	r3, #0
 80028c6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	b299      	uxth	r1, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80028de:	4303      	orrs	r3, r0
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	430b      	orrs	r3, r1
 80028e4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80028e6:	4313      	orrs	r3, r2
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	897b      	ldrh	r3, [r7, #10]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028f4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a0d      	ldr	r2, [pc, #52]	; (8002930 <HAL_I2S_Init+0x278>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d101      	bne.n	8002904 <HAL_I2S_Init+0x24c>
 8002900:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <HAL_I2S_Init+0x27c>)
 8002902:	e001      	b.n	8002908 <HAL_I2S_Init+0x250>
 8002904:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002908:	897a      	ldrh	r2, [r7, #10]
 800290a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3720      	adds	r7, #32
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	08002a2f 	.word	0x08002a2f
 8002928:	cccccccd 	.word	0xcccccccd
 800292c:	08002b45 	.word	0x08002b45
 8002930:	40003800 	.word	0x40003800
 8002934:	40003400 	.word	0x40003400

08002938 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	881a      	ldrh	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	1c9a      	adds	r2, r3, #2
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002996:	b29b      	uxth	r3, r3
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10e      	bne.n	80029c8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029b8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff ffb8 	bl	8002938 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80029c8:	bf00      	nop
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e2:	b292      	uxth	r2, r2
 80029e4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	1c9a      	adds	r2, r3, #2
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10e      	bne.n	8002a26 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a16:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff ff93 	bl	800294c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b086      	sub	sp, #24
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d13a      	bne.n	8002ac0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d109      	bne.n	8002a68 <I2S_IRQHandler+0x3a>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5e:	2b40      	cmp	r3, #64	; 0x40
 8002a60:	d102      	bne.n	8002a68 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff ffb4 	bl	80029d0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6e:	2b40      	cmp	r3, #64	; 0x40
 8002a70:	d126      	bne.n	8002ac0 <I2S_IRQHandler+0x92>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d11f      	bne.n	8002ac0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a8e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a90:	2300      	movs	r3, #0
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	f043 0202 	orr.w	r2, r3, #2
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff ff50 	bl	8002960 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d136      	bne.n	8002b3a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d109      	bne.n	8002aea <I2S_IRQHandler+0xbc>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae0:	2b80      	cmp	r3, #128	; 0x80
 8002ae2:	d102      	bne.n	8002aea <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff ff45 	bl	8002974 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d122      	bne.n	8002b3a <I2S_IRQHandler+0x10c>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 0320 	and.w	r3, r3, #32
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	d11b      	bne.n	8002b3a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b10:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2c:	f043 0204 	orr.w	r2, r3, #4
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff ff13 	bl	8002960 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4aa2      	ldr	r2, [pc, #648]	; (8002de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d101      	bne.n	8002b62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002b5e:	4ba2      	ldr	r3, [pc, #648]	; (8002de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b60:	e001      	b.n	8002b66 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002b62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a9b      	ldr	r2, [pc, #620]	; (8002de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d101      	bne.n	8002b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002b7c:	4b9a      	ldr	r3, [pc, #616]	; (8002de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b7e:	e001      	b.n	8002b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002b80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b90:	d004      	beq.n	8002b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f040 8099 	bne.w	8002cce <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d107      	bne.n	8002bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f925 	bl	8002e00 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d107      	bne.n	8002bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f9c8 	bl	8002f60 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd6:	2b40      	cmp	r3, #64	; 0x40
 8002bd8:	d13a      	bne.n	8002c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f003 0320 	and.w	r3, r3, #32
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d035      	beq.n	8002c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a7e      	ldr	r2, [pc, #504]	; (8002de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d101      	bne.n	8002bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002bee:	4b7e      	ldr	r3, [pc, #504]	; (8002de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bf0:	e001      	b.n	8002bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002bf2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4979      	ldr	r1, [pc, #484]	; (8002de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bfe:	428b      	cmp	r3, r1
 8002c00:	d101      	bne.n	8002c06 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002c02:	4b79      	ldr	r3, [pc, #484]	; (8002de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c04:	e001      	b.n	8002c0a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002c06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c0e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c1e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c20:	2300      	movs	r3, #0
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	f043 0202 	orr.w	r2, r3, #2
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff fe88 	bl	8002960 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	f040 80be 	bne.w	8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f003 0320 	and.w	r3, r3, #32
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 80b8 	beq.w	8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c76:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a59      	ldr	r2, [pc, #356]	; (8002de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d101      	bne.n	8002c86 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002c82:	4b59      	ldr	r3, [pc, #356]	; (8002de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c84:	e001      	b.n	8002c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002c86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4954      	ldr	r1, [pc, #336]	; (8002de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c92:	428b      	cmp	r3, r1
 8002c94:	d101      	bne.n	8002c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002c96:	4b54      	ldr	r3, [pc, #336]	; (8002de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c98:	e001      	b.n	8002c9e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002c9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ca2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60bb      	str	r3, [r7, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	f043 0204 	orr.w	r2, r3, #4
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff fe4a 	bl	8002960 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ccc:	e084      	b.n	8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d107      	bne.n	8002ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f8be 	bl	8002e64 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d107      	bne.n	8002d02 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f8fd 	bl	8002efc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d08:	2b40      	cmp	r3, #64	; 0x40
 8002d0a:	d12f      	bne.n	8002d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d02a      	beq.n	8002d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d24:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a2e      	ldr	r2, [pc, #184]	; (8002de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d101      	bne.n	8002d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002d30:	4b2d      	ldr	r3, [pc, #180]	; (8002de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d32:	e001      	b.n	8002d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002d34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4929      	ldr	r1, [pc, #164]	; (8002de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d40:	428b      	cmp	r3, r1
 8002d42:	d101      	bne.n	8002d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002d44:	4b28      	ldr	r3, [pc, #160]	; (8002de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d46:	e001      	b.n	8002d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002d48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d50:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	f043 0202 	orr.w	r2, r3, #2
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7ff fdfa 	bl	8002960 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d131      	bne.n	8002dda <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f003 0320 	and.w	r3, r3, #32
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d02c      	beq.n	8002dda <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a17      	ldr	r2, [pc, #92]	; (8002de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d101      	bne.n	8002d8e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002d8a:	4b17      	ldr	r3, [pc, #92]	; (8002de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d8c:	e001      	b.n	8002d92 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002d8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4912      	ldr	r1, [pc, #72]	; (8002de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d9a:	428b      	cmp	r3, r1
 8002d9c:	d101      	bne.n	8002da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002d9e:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002da0:	e001      	b.n	8002da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002da2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002da6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002daa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dba:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc8:	f043 0204 	orr.w	r2, r3, #4
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff fdc5 	bl	8002960 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002dd6:	e000      	b.n	8002dda <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002dd8:	bf00      	nop
}
 8002dda:	bf00      	nop
 8002ddc:	3720      	adds	r7, #32
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40003800 	.word	0x40003800
 8002de8:	40003400 	.word	0x40003400

08002dec <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	1c99      	adds	r1, r3, #2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6251      	str	r1, [r2, #36]	; 0x24
 8002e12:	881a      	ldrh	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d113      	bne.n	8002e5a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e40:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d106      	bne.n	8002e5a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff ffc9 	bl	8002dec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
	...

08002e64 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	1c99      	adds	r1, r3, #2
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6251      	str	r1, [r2, #36]	; 0x24
 8002e76:	8819      	ldrh	r1, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a1d      	ldr	r2, [pc, #116]	; (8002ef4 <I2SEx_TxISR_I2SExt+0x90>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d101      	bne.n	8002e86 <I2SEx_TxISR_I2SExt+0x22>
 8002e82:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <I2SEx_TxISR_I2SExt+0x94>)
 8002e84:	e001      	b.n	8002e8a <I2SEx_TxISR_I2SExt+0x26>
 8002e86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e8a:	460a      	mov	r2, r1
 8002e8c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d121      	bne.n	8002eea <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a12      	ldr	r2, [pc, #72]	; (8002ef4 <I2SEx_TxISR_I2SExt+0x90>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d101      	bne.n	8002eb4 <I2SEx_TxISR_I2SExt+0x50>
 8002eb0:	4b11      	ldr	r3, [pc, #68]	; (8002ef8 <I2SEx_TxISR_I2SExt+0x94>)
 8002eb2:	e001      	b.n	8002eb8 <I2SEx_TxISR_I2SExt+0x54>
 8002eb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	490d      	ldr	r1, [pc, #52]	; (8002ef4 <I2SEx_TxISR_I2SExt+0x90>)
 8002ec0:	428b      	cmp	r3, r1
 8002ec2:	d101      	bne.n	8002ec8 <I2SEx_TxISR_I2SExt+0x64>
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <I2SEx_TxISR_I2SExt+0x94>)
 8002ec6:	e001      	b.n	8002ecc <I2SEx_TxISR_I2SExt+0x68>
 8002ec8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ecc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ed0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d106      	bne.n	8002eea <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff ff81 	bl	8002dec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40003800 	.word	0x40003800
 8002ef8:	40003400 	.word	0x40003400

08002efc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68d8      	ldr	r0, [r3, #12]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	1c99      	adds	r1, r3, #2
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f14:	b282      	uxth	r2, r0
 8002f16:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d113      	bne.n	8002f58 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f3e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff ff4a 	bl	8002dec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f58:	bf00      	nop
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a20      	ldr	r2, [pc, #128]	; (8002ff0 <I2SEx_RxISR_I2SExt+0x90>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d101      	bne.n	8002f76 <I2SEx_RxISR_I2SExt+0x16>
 8002f72:	4b20      	ldr	r3, [pc, #128]	; (8002ff4 <I2SEx_RxISR_I2SExt+0x94>)
 8002f74:	e001      	b.n	8002f7a <I2SEx_RxISR_I2SExt+0x1a>
 8002f76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f7a:	68d8      	ldr	r0, [r3, #12]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	1c99      	adds	r1, r3, #2
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f86:	b282      	uxth	r2, r0
 8002f88:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d121      	bne.n	8002fe6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a12      	ldr	r2, [pc, #72]	; (8002ff0 <I2SEx_RxISR_I2SExt+0x90>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d101      	bne.n	8002fb0 <I2SEx_RxISR_I2SExt+0x50>
 8002fac:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <I2SEx_RxISR_I2SExt+0x94>)
 8002fae:	e001      	b.n	8002fb4 <I2SEx_RxISR_I2SExt+0x54>
 8002fb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	490d      	ldr	r1, [pc, #52]	; (8002ff0 <I2SEx_RxISR_I2SExt+0x90>)
 8002fbc:	428b      	cmp	r3, r1
 8002fbe:	d101      	bne.n	8002fc4 <I2SEx_RxISR_I2SExt+0x64>
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <I2SEx_RxISR_I2SExt+0x94>)
 8002fc2:	e001      	b.n	8002fc8 <I2SEx_RxISR_I2SExt+0x68>
 8002fc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fc8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fcc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d106      	bne.n	8002fe6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff ff03 	bl	8002dec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40003800 	.word	0x40003800
 8002ff4:	40003400 	.word	0x40003400

08002ff8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e25b      	b.n	80034c2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d075      	beq.n	8003102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003016:	4ba3      	ldr	r3, [pc, #652]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 030c 	and.w	r3, r3, #12
 800301e:	2b04      	cmp	r3, #4
 8003020:	d00c      	beq.n	800303c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003022:	4ba0      	ldr	r3, [pc, #640]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800302a:	2b08      	cmp	r3, #8
 800302c:	d112      	bne.n	8003054 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800302e:	4b9d      	ldr	r3, [pc, #628]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003036:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800303a:	d10b      	bne.n	8003054 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800303c:	4b99      	ldr	r3, [pc, #612]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d05b      	beq.n	8003100 <HAL_RCC_OscConfig+0x108>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d157      	bne.n	8003100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e236      	b.n	80034c2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800305c:	d106      	bne.n	800306c <HAL_RCC_OscConfig+0x74>
 800305e:	4b91      	ldr	r3, [pc, #580]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a90      	ldr	r2, [pc, #576]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	e01d      	b.n	80030a8 <HAL_RCC_OscConfig+0xb0>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003074:	d10c      	bne.n	8003090 <HAL_RCC_OscConfig+0x98>
 8003076:	4b8b      	ldr	r3, [pc, #556]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a8a      	ldr	r2, [pc, #552]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 800307c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	4b88      	ldr	r3, [pc, #544]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a87      	ldr	r2, [pc, #540]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	e00b      	b.n	80030a8 <HAL_RCC_OscConfig+0xb0>
 8003090:	4b84      	ldr	r3, [pc, #528]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a83      	ldr	r2, [pc, #524]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	4b81      	ldr	r3, [pc, #516]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a80      	ldr	r2, [pc, #512]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 80030a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d013      	beq.n	80030d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b0:	f7fd fa70 	bl	8000594 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b8:	f7fd fa6c 	bl	8000594 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b64      	cmp	r3, #100	; 0x64
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e1fb      	b.n	80034c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	4b76      	ldr	r3, [pc, #472]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCC_OscConfig+0xc0>
 80030d6:	e014      	b.n	8003102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7fd fa5c 	bl	8000594 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030e0:	f7fd fa58 	bl	8000594 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b64      	cmp	r3, #100	; 0x64
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e1e7      	b.n	80034c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f2:	4b6c      	ldr	r3, [pc, #432]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0xe8>
 80030fe:	e000      	b.n	8003102 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d063      	beq.n	80031d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800310e:	4b65      	ldr	r3, [pc, #404]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00b      	beq.n	8003132 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800311a:	4b62      	ldr	r3, [pc, #392]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003122:	2b08      	cmp	r3, #8
 8003124:	d11c      	bne.n	8003160 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003126:	4b5f      	ldr	r3, [pc, #380]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d116      	bne.n	8003160 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003132:	4b5c      	ldr	r3, [pc, #368]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d005      	beq.n	800314a <HAL_RCC_OscConfig+0x152>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d001      	beq.n	800314a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e1bb      	b.n	80034c2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314a:	4b56      	ldr	r3, [pc, #344]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4952      	ldr	r1, [pc, #328]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315e:	e03a      	b.n	80031d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d020      	beq.n	80031aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003168:	4b4f      	ldr	r3, [pc, #316]	; (80032a8 <HAL_RCC_OscConfig+0x2b0>)
 800316a:	2201      	movs	r2, #1
 800316c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316e:	f7fd fa11 	bl	8000594 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003176:	f7fd fa0d 	bl	8000594 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e19c      	b.n	80034c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003188:	4b46      	ldr	r3, [pc, #280]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f0      	beq.n	8003176 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003194:	4b43      	ldr	r3, [pc, #268]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4940      	ldr	r1, [pc, #256]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	600b      	str	r3, [r1, #0]
 80031a8:	e015      	b.n	80031d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031aa:	4b3f      	ldr	r3, [pc, #252]	; (80032a8 <HAL_RCC_OscConfig+0x2b0>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7fd f9f0 	bl	8000594 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b8:	f7fd f9ec 	bl	8000594 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e17b      	b.n	80034c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ca:	4b36      	ldr	r3, [pc, #216]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d030      	beq.n	8003244 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d016      	beq.n	8003218 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ea:	4b30      	ldr	r3, [pc, #192]	; (80032ac <HAL_RCC_OscConfig+0x2b4>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f0:	f7fd f9d0 	bl	8000594 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031f8:	f7fd f9cc 	bl	8000594 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e15b      	b.n	80034c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800320a:	4b26      	ldr	r3, [pc, #152]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 800320c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0x200>
 8003216:	e015      	b.n	8003244 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003218:	4b24      	ldr	r3, [pc, #144]	; (80032ac <HAL_RCC_OscConfig+0x2b4>)
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321e:	f7fd f9b9 	bl	8000594 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003226:	f7fd f9b5 	bl	8000594 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e144      	b.n	80034c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003238:	4b1a      	ldr	r3, [pc, #104]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 800323a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1f0      	bne.n	8003226 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80a0 	beq.w	8003392 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003252:	2300      	movs	r3, #0
 8003254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003256:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10f      	bne.n	8003282 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	4b0f      	ldr	r3, [pc, #60]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	4a0e      	ldr	r2, [pc, #56]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 800326c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003270:	6413      	str	r3, [r2, #64]	; 0x40
 8003272:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800327e:	2301      	movs	r3, #1
 8003280:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003282:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <HAL_RCC_OscConfig+0x2b8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328a:	2b00      	cmp	r3, #0
 800328c:	d121      	bne.n	80032d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800328e:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <HAL_RCC_OscConfig+0x2b8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a07      	ldr	r2, [pc, #28]	; (80032b0 <HAL_RCC_OscConfig+0x2b8>)
 8003294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800329a:	f7fd f97b 	bl	8000594 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a0:	e011      	b.n	80032c6 <HAL_RCC_OscConfig+0x2ce>
 80032a2:	bf00      	nop
 80032a4:	40023800 	.word	0x40023800
 80032a8:	42470000 	.word	0x42470000
 80032ac:	42470e80 	.word	0x42470e80
 80032b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b4:	f7fd f96e 	bl	8000594 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e0fd      	b.n	80034c2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c6:	4b81      	ldr	r3, [pc, #516]	; (80034cc <HAL_RCC_OscConfig+0x4d4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f0      	beq.n	80032b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d106      	bne.n	80032e8 <HAL_RCC_OscConfig+0x2f0>
 80032da:	4b7d      	ldr	r3, [pc, #500]	; (80034d0 <HAL_RCC_OscConfig+0x4d8>)
 80032dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032de:	4a7c      	ldr	r2, [pc, #496]	; (80034d0 <HAL_RCC_OscConfig+0x4d8>)
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	6713      	str	r3, [r2, #112]	; 0x70
 80032e6:	e01c      	b.n	8003322 <HAL_RCC_OscConfig+0x32a>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2b05      	cmp	r3, #5
 80032ee:	d10c      	bne.n	800330a <HAL_RCC_OscConfig+0x312>
 80032f0:	4b77      	ldr	r3, [pc, #476]	; (80034d0 <HAL_RCC_OscConfig+0x4d8>)
 80032f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f4:	4a76      	ldr	r2, [pc, #472]	; (80034d0 <HAL_RCC_OscConfig+0x4d8>)
 80032f6:	f043 0304 	orr.w	r3, r3, #4
 80032fa:	6713      	str	r3, [r2, #112]	; 0x70
 80032fc:	4b74      	ldr	r3, [pc, #464]	; (80034d0 <HAL_RCC_OscConfig+0x4d8>)
 80032fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003300:	4a73      	ldr	r2, [pc, #460]	; (80034d0 <HAL_RCC_OscConfig+0x4d8>)
 8003302:	f043 0301 	orr.w	r3, r3, #1
 8003306:	6713      	str	r3, [r2, #112]	; 0x70
 8003308:	e00b      	b.n	8003322 <HAL_RCC_OscConfig+0x32a>
 800330a:	4b71      	ldr	r3, [pc, #452]	; (80034d0 <HAL_RCC_OscConfig+0x4d8>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330e:	4a70      	ldr	r2, [pc, #448]	; (80034d0 <HAL_RCC_OscConfig+0x4d8>)
 8003310:	f023 0301 	bic.w	r3, r3, #1
 8003314:	6713      	str	r3, [r2, #112]	; 0x70
 8003316:	4b6e      	ldr	r3, [pc, #440]	; (80034d0 <HAL_RCC_OscConfig+0x4d8>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331a:	4a6d      	ldr	r2, [pc, #436]	; (80034d0 <HAL_RCC_OscConfig+0x4d8>)
 800331c:	f023 0304 	bic.w	r3, r3, #4
 8003320:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d015      	beq.n	8003356 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332a:	f7fd f933 	bl	8000594 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003330:	e00a      	b.n	8003348 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003332:	f7fd f92f 	bl	8000594 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003340:	4293      	cmp	r3, r2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e0bc      	b.n	80034c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003348:	4b61      	ldr	r3, [pc, #388]	; (80034d0 <HAL_RCC_OscConfig+0x4d8>)
 800334a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0ee      	beq.n	8003332 <HAL_RCC_OscConfig+0x33a>
 8003354:	e014      	b.n	8003380 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003356:	f7fd f91d 	bl	8000594 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800335c:	e00a      	b.n	8003374 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800335e:	f7fd f919 	bl	8000594 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	f241 3288 	movw	r2, #5000	; 0x1388
 800336c:	4293      	cmp	r3, r2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e0a6      	b.n	80034c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003374:	4b56      	ldr	r3, [pc, #344]	; (80034d0 <HAL_RCC_OscConfig+0x4d8>)
 8003376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1ee      	bne.n	800335e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003380:	7dfb      	ldrb	r3, [r7, #23]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d105      	bne.n	8003392 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003386:	4b52      	ldr	r3, [pc, #328]	; (80034d0 <HAL_RCC_OscConfig+0x4d8>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	4a51      	ldr	r2, [pc, #324]	; (80034d0 <HAL_RCC_OscConfig+0x4d8>)
 800338c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003390:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 8092 	beq.w	80034c0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800339c:	4b4c      	ldr	r3, [pc, #304]	; (80034d0 <HAL_RCC_OscConfig+0x4d8>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 030c 	and.w	r3, r3, #12
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d05c      	beq.n	8003462 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d141      	bne.n	8003434 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b0:	4b48      	ldr	r3, [pc, #288]	; (80034d4 <HAL_RCC_OscConfig+0x4dc>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b6:	f7fd f8ed 	bl	8000594 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033be:	f7fd f8e9 	bl	8000594 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e078      	b.n	80034c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d0:	4b3f      	ldr	r3, [pc, #252]	; (80034d0 <HAL_RCC_OscConfig+0x4d8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1f0      	bne.n	80033be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69da      	ldr	r2, [r3, #28]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	019b      	lsls	r3, r3, #6
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f2:	085b      	lsrs	r3, r3, #1
 80033f4:	3b01      	subs	r3, #1
 80033f6:	041b      	lsls	r3, r3, #16
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	061b      	lsls	r3, r3, #24
 8003400:	4933      	ldr	r1, [pc, #204]	; (80034d0 <HAL_RCC_OscConfig+0x4d8>)
 8003402:	4313      	orrs	r3, r2
 8003404:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003406:	4b33      	ldr	r3, [pc, #204]	; (80034d4 <HAL_RCC_OscConfig+0x4dc>)
 8003408:	2201      	movs	r2, #1
 800340a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340c:	f7fd f8c2 	bl	8000594 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003414:	f7fd f8be 	bl	8000594 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e04d      	b.n	80034c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003426:	4b2a      	ldr	r3, [pc, #168]	; (80034d0 <HAL_RCC_OscConfig+0x4d8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0x41c>
 8003432:	e045      	b.n	80034c0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003434:	4b27      	ldr	r3, [pc, #156]	; (80034d4 <HAL_RCC_OscConfig+0x4dc>)
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343a:	f7fd f8ab 	bl	8000594 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003442:	f7fd f8a7 	bl	8000594 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e036      	b.n	80034c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003454:	4b1e      	ldr	r3, [pc, #120]	; (80034d0 <HAL_RCC_OscConfig+0x4d8>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1f0      	bne.n	8003442 <HAL_RCC_OscConfig+0x44a>
 8003460:	e02e      	b.n	80034c0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e029      	b.n	80034c2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800346e:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <HAL_RCC_OscConfig+0x4d8>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	429a      	cmp	r2, r3
 8003480:	d11c      	bne.n	80034bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800348c:	429a      	cmp	r2, r3
 800348e:	d115      	bne.n	80034bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003496:	4013      	ands	r3, r2
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800349c:	4293      	cmp	r3, r2
 800349e:	d10d      	bne.n	80034bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d106      	bne.n	80034bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40007000 	.word	0x40007000
 80034d0:	40023800 	.word	0x40023800
 80034d4:	42470060 	.word	0x42470060

080034d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0cc      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034ec:	4b68      	ldr	r3, [pc, #416]	; (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d90c      	bls.n	8003514 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fa:	4b65      	ldr	r3, [pc, #404]	; (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003502:	4b63      	ldr	r3, [pc, #396]	; (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0b8      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d020      	beq.n	8003562 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800352c:	4b59      	ldr	r3, [pc, #356]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4a58      	ldr	r2, [pc, #352]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003536:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003544:	4b53      	ldr	r3, [pc, #332]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4a52      	ldr	r2, [pc, #328]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800354e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003550:	4b50      	ldr	r3, [pc, #320]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	494d      	ldr	r1, [pc, #308]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	4313      	orrs	r3, r2
 8003560:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d044      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d107      	bne.n	8003586 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003576:	4b47      	ldr	r3, [pc, #284]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d119      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e07f      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d003      	beq.n	8003596 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003592:	2b03      	cmp	r3, #3
 8003594:	d107      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003596:	4b3f      	ldr	r3, [pc, #252]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d109      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e06f      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a6:	4b3b      	ldr	r3, [pc, #236]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e067      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035b6:	4b37      	ldr	r3, [pc, #220]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f023 0203 	bic.w	r2, r3, #3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	4934      	ldr	r1, [pc, #208]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035c8:	f7fc ffe4 	bl	8000594 <HAL_GetTick>
 80035cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ce:	e00a      	b.n	80035e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d0:	f7fc ffe0 	bl	8000594 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f241 3288 	movw	r2, #5000	; 0x1388
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e04f      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e6:	4b2b      	ldr	r3, [pc, #172]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 020c 	and.w	r2, r3, #12
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d1eb      	bne.n	80035d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035f8:	4b25      	ldr	r3, [pc, #148]	; (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 030f 	and.w	r3, r3, #15
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d20c      	bcs.n	8003620 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003606:	4b22      	ldr	r3, [pc, #136]	; (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800360e:	4b20      	ldr	r3, [pc, #128]	; (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d001      	beq.n	8003620 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e032      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d008      	beq.n	800363e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800362c:	4b19      	ldr	r3, [pc, #100]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	4916      	ldr	r1, [pc, #88]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d009      	beq.n	800365e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800364a:	4b12      	ldr	r3, [pc, #72]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	490e      	ldr	r1, [pc, #56]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	4313      	orrs	r3, r2
 800365c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800365e:	f000 f821 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 8003662:	4601      	mov	r1, r0
 8003664:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	091b      	lsrs	r3, r3, #4
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	4a0a      	ldr	r2, [pc, #40]	; (8003698 <HAL_RCC_ClockConfig+0x1c0>)
 8003670:	5cd3      	ldrb	r3, [r2, r3]
 8003672:	fa21 f303 	lsr.w	r3, r1, r3
 8003676:	4a09      	ldr	r2, [pc, #36]	; (800369c <HAL_RCC_ClockConfig+0x1c4>)
 8003678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800367a:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <HAL_RCC_ClockConfig+0x1c8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7fc ff44 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40023c00 	.word	0x40023c00
 8003694:	40023800 	.word	0x40023800
 8003698:	08009154 	.word	0x08009154
 800369c:	20000028 	.word	0x20000028
 80036a0:	20000000 	.word	0x20000000

080036a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	607b      	str	r3, [r7, #4]
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	2300      	movs	r3, #0
 80036b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036ba:	4b63      	ldr	r3, [pc, #396]	; (8003848 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 030c 	and.w	r3, r3, #12
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d007      	beq.n	80036d6 <HAL_RCC_GetSysClockFreq+0x32>
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d008      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0x38>
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f040 80b4 	bne.w	8003838 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036d0:	4b5e      	ldr	r3, [pc, #376]	; (800384c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80036d2:	60bb      	str	r3, [r7, #8]
       break;
 80036d4:	e0b3      	b.n	800383e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036d6:	4b5e      	ldr	r3, [pc, #376]	; (8003850 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80036d8:	60bb      	str	r3, [r7, #8]
      break;
 80036da:	e0b0      	b.n	800383e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036dc:	4b5a      	ldr	r3, [pc, #360]	; (8003848 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036e6:	4b58      	ldr	r3, [pc, #352]	; (8003848 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d04a      	beq.n	8003788 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036f2:	4b55      	ldr	r3, [pc, #340]	; (8003848 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	099b      	lsrs	r3, r3, #6
 80036f8:	f04f 0400 	mov.w	r4, #0
 80036fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	ea03 0501 	and.w	r5, r3, r1
 8003708:	ea04 0602 	and.w	r6, r4, r2
 800370c:	4629      	mov	r1, r5
 800370e:	4632      	mov	r2, r6
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	f04f 0400 	mov.w	r4, #0
 8003718:	0154      	lsls	r4, r2, #5
 800371a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800371e:	014b      	lsls	r3, r1, #5
 8003720:	4619      	mov	r1, r3
 8003722:	4622      	mov	r2, r4
 8003724:	1b49      	subs	r1, r1, r5
 8003726:	eb62 0206 	sbc.w	r2, r2, r6
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	f04f 0400 	mov.w	r4, #0
 8003732:	0194      	lsls	r4, r2, #6
 8003734:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003738:	018b      	lsls	r3, r1, #6
 800373a:	1a5b      	subs	r3, r3, r1
 800373c:	eb64 0402 	sbc.w	r4, r4, r2
 8003740:	f04f 0100 	mov.w	r1, #0
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	00e2      	lsls	r2, r4, #3
 800374a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800374e:	00d9      	lsls	r1, r3, #3
 8003750:	460b      	mov	r3, r1
 8003752:	4614      	mov	r4, r2
 8003754:	195b      	adds	r3, r3, r5
 8003756:	eb44 0406 	adc.w	r4, r4, r6
 800375a:	f04f 0100 	mov.w	r1, #0
 800375e:	f04f 0200 	mov.w	r2, #0
 8003762:	0262      	lsls	r2, r4, #9
 8003764:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003768:	0259      	lsls	r1, r3, #9
 800376a:	460b      	mov	r3, r1
 800376c:	4614      	mov	r4, r2
 800376e:	4618      	mov	r0, r3
 8003770:	4621      	mov	r1, r4
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f04f 0400 	mov.w	r4, #0
 8003778:	461a      	mov	r2, r3
 800377a:	4623      	mov	r3, r4
 800377c:	f7fc fd24 	bl	80001c8 <__aeabi_uldivmod>
 8003780:	4603      	mov	r3, r0
 8003782:	460c      	mov	r4, r1
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	e049      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003788:	4b2f      	ldr	r3, [pc, #188]	; (8003848 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	099b      	lsrs	r3, r3, #6
 800378e:	f04f 0400 	mov.w	r4, #0
 8003792:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	ea03 0501 	and.w	r5, r3, r1
 800379e:	ea04 0602 	and.w	r6, r4, r2
 80037a2:	4629      	mov	r1, r5
 80037a4:	4632      	mov	r2, r6
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	f04f 0400 	mov.w	r4, #0
 80037ae:	0154      	lsls	r4, r2, #5
 80037b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037b4:	014b      	lsls	r3, r1, #5
 80037b6:	4619      	mov	r1, r3
 80037b8:	4622      	mov	r2, r4
 80037ba:	1b49      	subs	r1, r1, r5
 80037bc:	eb62 0206 	sbc.w	r2, r2, r6
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	f04f 0400 	mov.w	r4, #0
 80037c8:	0194      	lsls	r4, r2, #6
 80037ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037ce:	018b      	lsls	r3, r1, #6
 80037d0:	1a5b      	subs	r3, r3, r1
 80037d2:	eb64 0402 	sbc.w	r4, r4, r2
 80037d6:	f04f 0100 	mov.w	r1, #0
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	00e2      	lsls	r2, r4, #3
 80037e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037e4:	00d9      	lsls	r1, r3, #3
 80037e6:	460b      	mov	r3, r1
 80037e8:	4614      	mov	r4, r2
 80037ea:	195b      	adds	r3, r3, r5
 80037ec:	eb44 0406 	adc.w	r4, r4, r6
 80037f0:	f04f 0100 	mov.w	r1, #0
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	02a2      	lsls	r2, r4, #10
 80037fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80037fe:	0299      	lsls	r1, r3, #10
 8003800:	460b      	mov	r3, r1
 8003802:	4614      	mov	r4, r2
 8003804:	4618      	mov	r0, r3
 8003806:	4621      	mov	r1, r4
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f04f 0400 	mov.w	r4, #0
 800380e:	461a      	mov	r2, r3
 8003810:	4623      	mov	r3, r4
 8003812:	f7fc fcd9 	bl	80001c8 <__aeabi_uldivmod>
 8003816:	4603      	mov	r3, r0
 8003818:	460c      	mov	r4, r1
 800381a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800381c:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	0c1b      	lsrs	r3, r3, #16
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	3301      	adds	r3, #1
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	fbb2 f3f3 	udiv	r3, r2, r3
 8003834:	60bb      	str	r3, [r7, #8]
      break;
 8003836:	e002      	b.n	800383e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003838:	4b04      	ldr	r3, [pc, #16]	; (800384c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800383a:	60bb      	str	r3, [r7, #8]
      break;
 800383c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800383e:	68bb      	ldr	r3, [r7, #8]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003848:	40023800 	.word	0x40023800
 800384c:	00f42400 	.word	0x00f42400
 8003850:	007a1200 	.word	0x007a1200

08003854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003858:	4b03      	ldr	r3, [pc, #12]	; (8003868 <HAL_RCC_GetHCLKFreq+0x14>)
 800385a:	681b      	ldr	r3, [r3, #0]
}
 800385c:	4618      	mov	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20000028 	.word	0x20000028

0800386c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003870:	f7ff fff0 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 8003874:	4601      	mov	r1, r0
 8003876:	4b05      	ldr	r3, [pc, #20]	; (800388c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	0a9b      	lsrs	r3, r3, #10
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	4a03      	ldr	r2, [pc, #12]	; (8003890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003882:	5cd3      	ldrb	r3, [r2, r3]
 8003884:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003888:	4618      	mov	r0, r3
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40023800 	.word	0x40023800
 8003890:	08009164 	.word	0x08009164

08003894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003898:	f7ff ffdc 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 800389c:	4601      	mov	r1, r0
 800389e:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	0b5b      	lsrs	r3, r3, #13
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	4a03      	ldr	r2, [pc, #12]	; (80038b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038aa:	5cd3      	ldrb	r3, [r2, r3]
 80038ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40023800 	.word	0x40023800
 80038b8:	08009164 	.word	0x08009164

080038bc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d105      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d035      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038e4:	4b62      	ldr	r3, [pc, #392]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038ea:	f7fc fe53 	bl	8000594 <HAL_GetTick>
 80038ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038f0:	e008      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038f2:	f7fc fe4f 	bl	8000594 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e0b0      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003904:	4b5b      	ldr	r3, [pc, #364]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f0      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	019a      	lsls	r2, r3, #6
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	071b      	lsls	r3, r3, #28
 800391c:	4955      	ldr	r1, [pc, #340]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003924:	4b52      	ldr	r3, [pc, #328]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003926:	2201      	movs	r2, #1
 8003928:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800392a:	f7fc fe33 	bl	8000594 <HAL_GetTick>
 800392e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003930:	e008      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003932:	f7fc fe2f 	bl	8000594 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e090      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003944:	4b4b      	ldr	r3, [pc, #300]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0f0      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 8083 	beq.w	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	4b44      	ldr	r3, [pc, #272]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	4a43      	ldr	r2, [pc, #268]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800396c:	6413      	str	r3, [r2, #64]	; 0x40
 800396e:	4b41      	ldr	r3, [pc, #260]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800397a:	4b3f      	ldr	r3, [pc, #252]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a3e      	ldr	r2, [pc, #248]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003984:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003986:	f7fc fe05 	bl	8000594 <HAL_GetTick>
 800398a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800398c:	e008      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800398e:	f7fc fe01 	bl	8000594 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e062      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80039a0:	4b35      	ldr	r3, [pc, #212]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0f0      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039ac:	4b31      	ldr	r3, [pc, #196]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d02f      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d028      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039ca:	4b2a      	ldr	r3, [pc, #168]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039d4:	4b29      	ldr	r3, [pc, #164]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039da:	4b28      	ldr	r3, [pc, #160]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80039e0:	4a24      	ldr	r2, [pc, #144]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039e6:	4b23      	ldr	r3, [pc, #140]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d114      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80039f2:	f7fc fdcf 	bl	8000594 <HAL_GetTick>
 80039f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f8:	e00a      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039fa:	f7fc fdcb 	bl	8000594 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e02a      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a10:	4b18      	ldr	r3, [pc, #96]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0ee      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a28:	d10d      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003a2a:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a3e:	490d      	ldr	r1, [pc, #52]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	608b      	str	r3, [r1, #8]
 8003a44:	e005      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003a46:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	4a0a      	ldr	r2, [pc, #40]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a4c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a50:	6093      	str	r3, [r2, #8]
 8003a52:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a5e:	4905      	ldr	r1, [pc, #20]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	42470068 	.word	0x42470068
 8003a74:	40023800 	.word	0x40023800
 8003a78:	40007000 	.word	0x40007000
 8003a7c:	42470e40 	.word	0x42470e40

08003a80 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d13d      	bne.n	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003a9e:	4b22      	ldr	r3, [pc, #136]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003aa6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d004      	beq.n	8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d12f      	bne.n	8003b12 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003ab2:	4b1e      	ldr	r3, [pc, #120]	; (8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ab4:	617b      	str	r3, [r7, #20]
          break;
 8003ab6:	e02f      	b.n	8003b18 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003ab8:	4b1b      	ldr	r3, [pc, #108]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ac4:	d108      	bne.n	8003ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ac6:	4b18      	ldr	r3, [pc, #96]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ace:	4a18      	ldr	r2, [pc, #96]	; (8003b30 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	e007      	b.n	8003ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ad8:	4b13      	ldr	r3, [pc, #76]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ae0:	4a14      	ldr	r2, [pc, #80]	; (8003b34 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003ae8:	4b0f      	ldr	r3, [pc, #60]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aee:	099b      	lsrs	r3, r3, #6
 8003af0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003afc:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b02:	0f1b      	lsrs	r3, r3, #28
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0e:	617b      	str	r3, [r7, #20]
          break;
 8003b10:	e002      	b.n	8003b18 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	617b      	str	r3, [r7, #20]
          break;
 8003b16:	bf00      	nop
        }
      }
      break;
 8003b18:	bf00      	nop
    }
  }
  return frequency;
 8003b1a:	697b      	ldr	r3, [r7, #20]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	371c      	adds	r7, #28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	00bb8000 	.word	0x00bb8000
 8003b30:	007a1200 	.word	0x007a1200
 8003b34:	00f42400 	.word	0x00f42400

08003b38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e056      	b.n	8003bf8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d106      	bne.n	8003b6a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f004 fd29 	bl	80085bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b80:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	ea42 0103 	orr.w	r1, r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	0c1b      	lsrs	r3, r3, #16
 8003bc8:	f003 0104 	and.w	r1, r3, #4
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	69da      	ldr	r2, [r3, #28]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003be6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e01d      	b.n	8003c4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f004 fd10 	bl	800864c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4610      	mov	r0, r2
 8003c40:	f000 fb34 	bl	80042ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b082      	sub	sp, #8
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e01d      	b.n	8003ca4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d106      	bne.n	8003c82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f815 	bl	8003cac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2202      	movs	r2, #2
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3304      	adds	r3, #4
 8003c92:	4619      	mov	r1, r3
 8003c94:	4610      	mov	r0, r2
 8003c96:	f000 fb09 	bl	80042ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	6839      	ldr	r1, [r7, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 fdd4 	bl	8004880 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a15      	ldr	r2, [pc, #84]	; (8003d34 <HAL_TIM_PWM_Start+0x74>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d004      	beq.n	8003cec <HAL_TIM_PWM_Start+0x2c>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a14      	ldr	r2, [pc, #80]	; (8003d38 <HAL_TIM_PWM_Start+0x78>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d101      	bne.n	8003cf0 <HAL_TIM_PWM_Start+0x30>
 8003cec:	2301      	movs	r3, #1
 8003cee:	e000      	b.n	8003cf2 <HAL_TIM_PWM_Start+0x32>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d007      	beq.n	8003d06 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b06      	cmp	r3, #6
 8003d16:	d007      	beq.n	8003d28 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40010000 	.word	0x40010000
 8003d38:	40010400 	.word	0x40010400

08003d3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d122      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d11b      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f06f 0202 	mvn.w	r2, #2
 8003d68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 fa75 	bl	800426e <HAL_TIM_IC_CaptureCallback>
 8003d84:	e005      	b.n	8003d92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 fa67 	bl	800425a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fa78 	bl	8004282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d122      	bne.n	8003dec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d11b      	bne.n	8003dec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0204 	mvn.w	r2, #4
 8003dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fa4b 	bl	800426e <HAL_TIM_IC_CaptureCallback>
 8003dd8:	e005      	b.n	8003de6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 fa3d 	bl	800425a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fa4e 	bl	8004282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d122      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d11b      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0208 	mvn.w	r2, #8
 8003e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2204      	movs	r2, #4
 8003e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fa21 	bl	800426e <HAL_TIM_IC_CaptureCallback>
 8003e2c:	e005      	b.n	8003e3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fa13 	bl	800425a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fa24 	bl	8004282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0310 	and.w	r3, r3, #16
 8003e4a:	2b10      	cmp	r3, #16
 8003e4c:	d122      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0310 	and.w	r3, r3, #16
 8003e58:	2b10      	cmp	r3, #16
 8003e5a:	d11b      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0210 	mvn.w	r2, #16
 8003e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2208      	movs	r2, #8
 8003e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f9f7 	bl	800426e <HAL_TIM_IC_CaptureCallback>
 8003e80:	e005      	b.n	8003e8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f9e9 	bl	800425a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f9fa 	bl	8004282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d10e      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d107      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0201 	mvn.w	r2, #1
 8003eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f9c3 	bl	8004246 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eca:	2b80      	cmp	r3, #128	; 0x80
 8003ecc:	d10e      	bne.n	8003eec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed8:	2b80      	cmp	r3, #128	; 0x80
 8003eda:	d107      	bne.n	8003eec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 fd76 	bl	80049d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef6:	2b40      	cmp	r3, #64	; 0x40
 8003ef8:	d10e      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f04:	2b40      	cmp	r3, #64	; 0x40
 8003f06:	d107      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f9bf 	bl	8004296 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b20      	cmp	r3, #32
 8003f24:	d10e      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f003 0320 	and.w	r3, r3, #32
 8003f30:	2b20      	cmp	r3, #32
 8003f32:	d107      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f06f 0220 	mvn.w	r2, #32
 8003f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 fd40 	bl	80049c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f44:	bf00      	nop
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d101      	bne.n	8003f66 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f62:	2302      	movs	r3, #2
 8003f64:	e0b4      	b.n	80040d0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2202      	movs	r2, #2
 8003f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b0c      	cmp	r3, #12
 8003f7a:	f200 809f 	bhi.w	80040bc <HAL_TIM_PWM_ConfigChannel+0x170>
 8003f7e:	a201      	add	r2, pc, #4	; (adr r2, 8003f84 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f84:	08003fb9 	.word	0x08003fb9
 8003f88:	080040bd 	.word	0x080040bd
 8003f8c:	080040bd 	.word	0x080040bd
 8003f90:	080040bd 	.word	0x080040bd
 8003f94:	08003ff9 	.word	0x08003ff9
 8003f98:	080040bd 	.word	0x080040bd
 8003f9c:	080040bd 	.word	0x080040bd
 8003fa0:	080040bd 	.word	0x080040bd
 8003fa4:	0800403b 	.word	0x0800403b
 8003fa8:	080040bd 	.word	0x080040bd
 8003fac:	080040bd 	.word	0x080040bd
 8003fb0:	080040bd 	.word	0x080040bd
 8003fb4:	0800407b 	.word	0x0800407b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68b9      	ldr	r1, [r7, #8]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fa14 	bl	80043ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699a      	ldr	r2, [r3, #24]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0208 	orr.w	r2, r2, #8
 8003fd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699a      	ldr	r2, [r3, #24]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0204 	bic.w	r2, r2, #4
 8003fe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6999      	ldr	r1, [r3, #24]
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	619a      	str	r2, [r3, #24]
      break;
 8003ff6:	e062      	b.n	80040be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fa64 	bl	80044cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699a      	ldr	r2, [r3, #24]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699a      	ldr	r2, [r3, #24]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6999      	ldr	r1, [r3, #24]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	021a      	lsls	r2, r3, #8
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	619a      	str	r2, [r3, #24]
      break;
 8004038:	e041      	b.n	80040be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68b9      	ldr	r1, [r7, #8]
 8004040:	4618      	mov	r0, r3
 8004042:	f000 fab9 	bl	80045b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69da      	ldr	r2, [r3, #28]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f042 0208 	orr.w	r2, r2, #8
 8004054:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69da      	ldr	r2, [r3, #28]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0204 	bic.w	r2, r2, #4
 8004064:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69d9      	ldr	r1, [r3, #28]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	61da      	str	r2, [r3, #28]
      break;
 8004078:	e021      	b.n	80040be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68b9      	ldr	r1, [r7, #8]
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fb0d 	bl	80046a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	69da      	ldr	r2, [r3, #28]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	69da      	ldr	r2, [r3, #28]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69d9      	ldr	r1, [r3, #28]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	021a      	lsls	r2, r3, #8
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	61da      	str	r2, [r3, #28]
      break;
 80040ba:	e000      	b.n	80040be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80040bc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_TIM_ConfigClockSource+0x18>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e0a6      	b.n	800423e <HAL_TIM_ConfigClockSource+0x166>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800410e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004116:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b40      	cmp	r3, #64	; 0x40
 8004126:	d067      	beq.n	80041f8 <HAL_TIM_ConfigClockSource+0x120>
 8004128:	2b40      	cmp	r3, #64	; 0x40
 800412a:	d80b      	bhi.n	8004144 <HAL_TIM_ConfigClockSource+0x6c>
 800412c:	2b10      	cmp	r3, #16
 800412e:	d073      	beq.n	8004218 <HAL_TIM_ConfigClockSource+0x140>
 8004130:	2b10      	cmp	r3, #16
 8004132:	d802      	bhi.n	800413a <HAL_TIM_ConfigClockSource+0x62>
 8004134:	2b00      	cmp	r3, #0
 8004136:	d06f      	beq.n	8004218 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004138:	e078      	b.n	800422c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800413a:	2b20      	cmp	r3, #32
 800413c:	d06c      	beq.n	8004218 <HAL_TIM_ConfigClockSource+0x140>
 800413e:	2b30      	cmp	r3, #48	; 0x30
 8004140:	d06a      	beq.n	8004218 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004142:	e073      	b.n	800422c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004144:	2b70      	cmp	r3, #112	; 0x70
 8004146:	d00d      	beq.n	8004164 <HAL_TIM_ConfigClockSource+0x8c>
 8004148:	2b70      	cmp	r3, #112	; 0x70
 800414a:	d804      	bhi.n	8004156 <HAL_TIM_ConfigClockSource+0x7e>
 800414c:	2b50      	cmp	r3, #80	; 0x50
 800414e:	d033      	beq.n	80041b8 <HAL_TIM_ConfigClockSource+0xe0>
 8004150:	2b60      	cmp	r3, #96	; 0x60
 8004152:	d041      	beq.n	80041d8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004154:	e06a      	b.n	800422c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800415a:	d066      	beq.n	800422a <HAL_TIM_ConfigClockSource+0x152>
 800415c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004160:	d017      	beq.n	8004192 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004162:	e063      	b.n	800422c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6818      	ldr	r0, [r3, #0]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	6899      	ldr	r1, [r3, #8]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f000 fb64 	bl	8004840 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004186:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	609a      	str	r2, [r3, #8]
      break;
 8004190:	e04c      	b.n	800422c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6818      	ldr	r0, [r3, #0]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	6899      	ldr	r1, [r3, #8]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f000 fb4d 	bl	8004840 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041b4:	609a      	str	r2, [r3, #8]
      break;
 80041b6:	e039      	b.n	800422c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6818      	ldr	r0, [r3, #0]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	6859      	ldr	r1, [r3, #4]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	461a      	mov	r2, r3
 80041c6:	f000 fac1 	bl	800474c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2150      	movs	r1, #80	; 0x50
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 fb1a 	bl	800480a <TIM_ITRx_SetConfig>
      break;
 80041d6:	e029      	b.n	800422c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	6859      	ldr	r1, [r3, #4]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	461a      	mov	r2, r3
 80041e6:	f000 fae0 	bl	80047aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2160      	movs	r1, #96	; 0x60
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fb0a 	bl	800480a <TIM_ITRx_SetConfig>
      break;
 80041f6:	e019      	b.n	800422c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6818      	ldr	r0, [r3, #0]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	6859      	ldr	r1, [r3, #4]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	461a      	mov	r2, r3
 8004206:	f000 faa1 	bl	800474c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2140      	movs	r1, #64	; 0x40
 8004210:	4618      	mov	r0, r3
 8004212:	f000 fafa 	bl	800480a <TIM_ITRx_SetConfig>
      break;
 8004216:	e009      	b.n	800422c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4619      	mov	r1, r3
 8004222:	4610      	mov	r0, r2
 8004224:	f000 faf1 	bl	800480a <TIM_ITRx_SetConfig>
      break;
 8004228:	e000      	b.n	800422c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800422a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
	...

080042ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a40      	ldr	r2, [pc, #256]	; (80043c0 <TIM_Base_SetConfig+0x114>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d013      	beq.n	80042ec <TIM_Base_SetConfig+0x40>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ca:	d00f      	beq.n	80042ec <TIM_Base_SetConfig+0x40>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a3d      	ldr	r2, [pc, #244]	; (80043c4 <TIM_Base_SetConfig+0x118>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00b      	beq.n	80042ec <TIM_Base_SetConfig+0x40>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a3c      	ldr	r2, [pc, #240]	; (80043c8 <TIM_Base_SetConfig+0x11c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d007      	beq.n	80042ec <TIM_Base_SetConfig+0x40>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a3b      	ldr	r2, [pc, #236]	; (80043cc <TIM_Base_SetConfig+0x120>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d003      	beq.n	80042ec <TIM_Base_SetConfig+0x40>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a3a      	ldr	r2, [pc, #232]	; (80043d0 <TIM_Base_SetConfig+0x124>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d108      	bne.n	80042fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a2f      	ldr	r2, [pc, #188]	; (80043c0 <TIM_Base_SetConfig+0x114>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d02b      	beq.n	800435e <TIM_Base_SetConfig+0xb2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800430c:	d027      	beq.n	800435e <TIM_Base_SetConfig+0xb2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a2c      	ldr	r2, [pc, #176]	; (80043c4 <TIM_Base_SetConfig+0x118>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d023      	beq.n	800435e <TIM_Base_SetConfig+0xb2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a2b      	ldr	r2, [pc, #172]	; (80043c8 <TIM_Base_SetConfig+0x11c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d01f      	beq.n	800435e <TIM_Base_SetConfig+0xb2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a2a      	ldr	r2, [pc, #168]	; (80043cc <TIM_Base_SetConfig+0x120>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d01b      	beq.n	800435e <TIM_Base_SetConfig+0xb2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a29      	ldr	r2, [pc, #164]	; (80043d0 <TIM_Base_SetConfig+0x124>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d017      	beq.n	800435e <TIM_Base_SetConfig+0xb2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a28      	ldr	r2, [pc, #160]	; (80043d4 <TIM_Base_SetConfig+0x128>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d013      	beq.n	800435e <TIM_Base_SetConfig+0xb2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a27      	ldr	r2, [pc, #156]	; (80043d8 <TIM_Base_SetConfig+0x12c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00f      	beq.n	800435e <TIM_Base_SetConfig+0xb2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a26      	ldr	r2, [pc, #152]	; (80043dc <TIM_Base_SetConfig+0x130>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d00b      	beq.n	800435e <TIM_Base_SetConfig+0xb2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a25      	ldr	r2, [pc, #148]	; (80043e0 <TIM_Base_SetConfig+0x134>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d007      	beq.n	800435e <TIM_Base_SetConfig+0xb2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a24      	ldr	r2, [pc, #144]	; (80043e4 <TIM_Base_SetConfig+0x138>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d003      	beq.n	800435e <TIM_Base_SetConfig+0xb2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a23      	ldr	r2, [pc, #140]	; (80043e8 <TIM_Base_SetConfig+0x13c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d108      	bne.n	8004370 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4313      	orrs	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a0a      	ldr	r2, [pc, #40]	; (80043c0 <TIM_Base_SetConfig+0x114>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d003      	beq.n	80043a4 <TIM_Base_SetConfig+0xf8>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a0c      	ldr	r2, [pc, #48]	; (80043d0 <TIM_Base_SetConfig+0x124>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d103      	bne.n	80043ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	615a      	str	r2, [r3, #20]
}
 80043b2:	bf00      	nop
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40010000 	.word	0x40010000
 80043c4:	40000400 	.word	0x40000400
 80043c8:	40000800 	.word	0x40000800
 80043cc:	40000c00 	.word	0x40000c00
 80043d0:	40010400 	.word	0x40010400
 80043d4:	40014000 	.word	0x40014000
 80043d8:	40014400 	.word	0x40014400
 80043dc:	40014800 	.word	0x40014800
 80043e0:	40001800 	.word	0x40001800
 80043e4:	40001c00 	.word	0x40001c00
 80043e8:	40002000 	.word	0x40002000

080043ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	f023 0201 	bic.w	r2, r3, #1
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 0303 	bic.w	r3, r3, #3
 8004422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f023 0302 	bic.w	r3, r3, #2
 8004434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	4313      	orrs	r3, r2
 800443e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a20      	ldr	r2, [pc, #128]	; (80044c4 <TIM_OC1_SetConfig+0xd8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d003      	beq.n	8004450 <TIM_OC1_SetConfig+0x64>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a1f      	ldr	r2, [pc, #124]	; (80044c8 <TIM_OC1_SetConfig+0xdc>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d10c      	bne.n	800446a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f023 0308 	bic.w	r3, r3, #8
 8004456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f023 0304 	bic.w	r3, r3, #4
 8004468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a15      	ldr	r2, [pc, #84]	; (80044c4 <TIM_OC1_SetConfig+0xd8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d003      	beq.n	800447a <TIM_OC1_SetConfig+0x8e>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a14      	ldr	r2, [pc, #80]	; (80044c8 <TIM_OC1_SetConfig+0xdc>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d111      	bne.n	800449e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004480:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004488:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4313      	orrs	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	621a      	str	r2, [r3, #32]
}
 80044b8:	bf00      	nop
 80044ba:	371c      	adds	r7, #28
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	40010000 	.word	0x40010000
 80044c8:	40010400 	.word	0x40010400

080044cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	f023 0210 	bic.w	r2, r3, #16
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	021b      	lsls	r3, r3, #8
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4313      	orrs	r3, r2
 800450e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f023 0320 	bic.w	r3, r3, #32
 8004516:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	4313      	orrs	r3, r2
 8004522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a22      	ldr	r2, [pc, #136]	; (80045b0 <TIM_OC2_SetConfig+0xe4>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d003      	beq.n	8004534 <TIM_OC2_SetConfig+0x68>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a21      	ldr	r2, [pc, #132]	; (80045b4 <TIM_OC2_SetConfig+0xe8>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d10d      	bne.n	8004550 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800453a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	011b      	lsls	r3, r3, #4
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800454e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a17      	ldr	r2, [pc, #92]	; (80045b0 <TIM_OC2_SetConfig+0xe4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d003      	beq.n	8004560 <TIM_OC2_SetConfig+0x94>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a16      	ldr	r2, [pc, #88]	; (80045b4 <TIM_OC2_SetConfig+0xe8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d113      	bne.n	8004588 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004566:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800456e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	621a      	str	r2, [r3, #32]
}
 80045a2:	bf00      	nop
 80045a4:	371c      	adds	r7, #28
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	40010000 	.word	0x40010000
 80045b4:	40010400 	.word	0x40010400

080045b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 0303 	bic.w	r3, r3, #3
 80045ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	021b      	lsls	r3, r3, #8
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	4313      	orrs	r3, r2
 800460c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a21      	ldr	r2, [pc, #132]	; (8004698 <TIM_OC3_SetConfig+0xe0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d003      	beq.n	800461e <TIM_OC3_SetConfig+0x66>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a20      	ldr	r2, [pc, #128]	; (800469c <TIM_OC3_SetConfig+0xe4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d10d      	bne.n	800463a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004624:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	021b      	lsls	r3, r3, #8
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	4313      	orrs	r3, r2
 8004630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a16      	ldr	r2, [pc, #88]	; (8004698 <TIM_OC3_SetConfig+0xe0>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d003      	beq.n	800464a <TIM_OC3_SetConfig+0x92>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a15      	ldr	r2, [pc, #84]	; (800469c <TIM_OC3_SetConfig+0xe4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d113      	bne.n	8004672 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	4313      	orrs	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4313      	orrs	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	621a      	str	r2, [r3, #32]
}
 800468c:	bf00      	nop
 800468e:	371c      	adds	r7, #28
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	40010000 	.word	0x40010000
 800469c:	40010400 	.word	0x40010400

080046a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	021b      	lsls	r3, r3, #8
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	031b      	lsls	r3, r3, #12
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a12      	ldr	r2, [pc, #72]	; (8004744 <TIM_OC4_SetConfig+0xa4>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d003      	beq.n	8004708 <TIM_OC4_SetConfig+0x68>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a11      	ldr	r2, [pc, #68]	; (8004748 <TIM_OC4_SetConfig+0xa8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d109      	bne.n	800471c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800470e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	019b      	lsls	r3, r3, #6
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	621a      	str	r2, [r3, #32]
}
 8004736:	bf00      	nop
 8004738:	371c      	adds	r7, #28
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	40010000 	.word	0x40010000
 8004748:	40010400 	.word	0x40010400

0800474c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	f023 0201 	bic.w	r2, r3, #1
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f023 030a 	bic.w	r3, r3, #10
 8004788:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	4313      	orrs	r3, r2
 8004790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	621a      	str	r2, [r3, #32]
}
 800479e:	bf00      	nop
 80047a0:	371c      	adds	r7, #28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b087      	sub	sp, #28
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	f023 0210 	bic.w	r2, r3, #16
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	031b      	lsls	r3, r3, #12
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	621a      	str	r2, [r3, #32]
}
 80047fe:	bf00      	nop
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800480a:	b480      	push	{r7}
 800480c:	b085      	sub	sp, #20
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004820:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	f043 0307 	orr.w	r3, r3, #7
 800482c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	609a      	str	r2, [r3, #8]
}
 8004834:	bf00      	nop
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
 800484c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800485a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	021a      	lsls	r2, r3, #8
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	431a      	orrs	r2, r3
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4313      	orrs	r3, r2
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	609a      	str	r2, [r3, #8]
}
 8004874:	bf00      	nop
 8004876:	371c      	adds	r7, #28
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f003 031f 	and.w	r3, r3, #31
 8004892:	2201      	movs	r2, #1
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a1a      	ldr	r2, [r3, #32]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	43db      	mvns	r3, r3
 80048a2:	401a      	ands	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a1a      	ldr	r2, [r3, #32]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f003 031f 	and.w	r3, r3, #31
 80048b2:	6879      	ldr	r1, [r7, #4]
 80048b4:	fa01 f303 	lsl.w	r3, r1, r3
 80048b8:	431a      	orrs	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	621a      	str	r2, [r3, #32]
}
 80048be:	bf00      	nop
 80048c0:	371c      	adds	r7, #28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
	...

080048cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d101      	bne.n	80048e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048e0:	2302      	movs	r3, #2
 80048e2:	e05a      	b.n	800499a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a21      	ldr	r2, [pc, #132]	; (80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d022      	beq.n	800496e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004930:	d01d      	beq.n	800496e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a1d      	ldr	r2, [pc, #116]	; (80049ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d018      	beq.n	800496e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1b      	ldr	r2, [pc, #108]	; (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d013      	beq.n	800496e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a1a      	ldr	r2, [pc, #104]	; (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00e      	beq.n	800496e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a18      	ldr	r2, [pc, #96]	; (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d009      	beq.n	800496e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a17      	ldr	r2, [pc, #92]	; (80049bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d004      	beq.n	800496e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a15      	ldr	r2, [pc, #84]	; (80049c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d10c      	bne.n	8004988 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004974:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	4313      	orrs	r3, r2
 800497e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40010000 	.word	0x40010000
 80049ac:	40000400 	.word	0x40000400
 80049b0:	40000800 	.word	0x40000800
 80049b4:	40000c00 	.word	0x40000c00
 80049b8:	40010400 	.word	0x40010400
 80049bc:	40014000 	.word	0x40014000
 80049c0:	40001800 	.word	0x40001800

080049c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e03f      	b.n	8004a7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f003 fe92 	bl	800873c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2224      	movs	r2, #36	; 0x24
 8004a1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f90b 	bl	8004c4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	691a      	ldr	r2, [r3, #16]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	695a      	ldr	r2, [r3, #20]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b088      	sub	sp, #32
 8004a8a:	af02      	add	r7, sp, #8
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	603b      	str	r3, [r7, #0]
 8004a92:	4613      	mov	r3, r2
 8004a94:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b20      	cmp	r3, #32
 8004aa4:	f040 8083 	bne.w	8004bae <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <HAL_UART_Transmit+0x2e>
 8004aae:	88fb      	ldrh	r3, [r7, #6]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e07b      	b.n	8004bb0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_UART_Transmit+0x40>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	e074      	b.n	8004bb0 <HAL_UART_Transmit+0x12a>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2221      	movs	r2, #33	; 0x21
 8004ad8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004adc:	f7fb fd5a 	bl	8000594 <HAL_GetTick>
 8004ae0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	88fa      	ldrh	r2, [r7, #6]
 8004ae6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	88fa      	ldrh	r2, [r7, #6]
 8004aec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004af6:	e042      	b.n	8004b7e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0e:	d122      	bne.n	8004b56 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	2200      	movs	r2, #0
 8004b18:	2180      	movs	r1, #128	; 0x80
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 f84c 	bl	8004bb8 <UART_WaitOnFlagUntilTimeout>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e042      	b.n	8004bb0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	461a      	mov	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b3c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d103      	bne.n	8004b4e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	3302      	adds	r3, #2
 8004b4a:	60bb      	str	r3, [r7, #8]
 8004b4c:	e017      	b.n	8004b7e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	3301      	adds	r3, #1
 8004b52:	60bb      	str	r3, [r7, #8]
 8004b54:	e013      	b.n	8004b7e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	2180      	movs	r1, #128	; 0x80
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f000 f829 	bl	8004bb8 <UART_WaitOnFlagUntilTimeout>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e01f      	b.n	8004bb0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	60ba      	str	r2, [r7, #8]
 8004b76:	781a      	ldrb	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1b7      	bne.n	8004af8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	2140      	movs	r1, #64	; 0x40
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 f810 	bl	8004bb8 <UART_WaitOnFlagUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e006      	b.n	8004bb0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004baa:	2300      	movs	r3, #0
 8004bac:	e000      	b.n	8004bb0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004bae:	2302      	movs	r3, #2
  }
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	603b      	str	r3, [r7, #0]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc8:	e02c      	b.n	8004c24 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bd0:	d028      	beq.n	8004c24 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d007      	beq.n	8004be8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bd8:	f7fb fcdc 	bl	8000594 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d21d      	bcs.n	8004c24 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bf6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695a      	ldr	r2, [r3, #20]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0201 	bic.w	r2, r2, #1
 8004c06:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e00f      	b.n	8004c44 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	bf0c      	ite	eq
 8004c34:	2301      	moveq	r3, #1
 8004c36:	2300      	movne	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d0c3      	beq.n	8004bca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c50:	b085      	sub	sp, #20
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	431a      	orrs	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004c8e:	f023 030c 	bic.w	r3, r3, #12
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6812      	ldr	r2, [r2, #0]
 8004c96:	68f9      	ldr	r1, [r7, #12]
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699a      	ldr	r2, [r3, #24]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cba:	f040 818b 	bne.w	8004fd4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4ac1      	ldr	r2, [pc, #772]	; (8004fc8 <UART_SetConfig+0x37c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d005      	beq.n	8004cd4 <UART_SetConfig+0x88>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4abf      	ldr	r2, [pc, #764]	; (8004fcc <UART_SetConfig+0x380>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	f040 80bd 	bne.w	8004e4e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cd4:	f7fe fdde 	bl	8003894 <HAL_RCC_GetPCLK2Freq>
 8004cd8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	461d      	mov	r5, r3
 8004cde:	f04f 0600 	mov.w	r6, #0
 8004ce2:	46a8      	mov	r8, r5
 8004ce4:	46b1      	mov	r9, r6
 8004ce6:	eb18 0308 	adds.w	r3, r8, r8
 8004cea:	eb49 0409 	adc.w	r4, r9, r9
 8004cee:	4698      	mov	r8, r3
 8004cf0:	46a1      	mov	r9, r4
 8004cf2:	eb18 0805 	adds.w	r8, r8, r5
 8004cf6:	eb49 0906 	adc.w	r9, r9, r6
 8004cfa:	f04f 0100 	mov.w	r1, #0
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d06:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d0a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d0e:	4688      	mov	r8, r1
 8004d10:	4691      	mov	r9, r2
 8004d12:	eb18 0005 	adds.w	r0, r8, r5
 8004d16:	eb49 0106 	adc.w	r1, r9, r6
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	461d      	mov	r5, r3
 8004d20:	f04f 0600 	mov.w	r6, #0
 8004d24:	196b      	adds	r3, r5, r5
 8004d26:	eb46 0406 	adc.w	r4, r6, r6
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	4623      	mov	r3, r4
 8004d2e:	f7fb fa4b 	bl	80001c8 <__aeabi_uldivmod>
 8004d32:	4603      	mov	r3, r0
 8004d34:	460c      	mov	r4, r1
 8004d36:	461a      	mov	r2, r3
 8004d38:	4ba5      	ldr	r3, [pc, #660]	; (8004fd0 <UART_SetConfig+0x384>)
 8004d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d3e:	095b      	lsrs	r3, r3, #5
 8004d40:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	461d      	mov	r5, r3
 8004d48:	f04f 0600 	mov.w	r6, #0
 8004d4c:	46a9      	mov	r9, r5
 8004d4e:	46b2      	mov	sl, r6
 8004d50:	eb19 0309 	adds.w	r3, r9, r9
 8004d54:	eb4a 040a 	adc.w	r4, sl, sl
 8004d58:	4699      	mov	r9, r3
 8004d5a:	46a2      	mov	sl, r4
 8004d5c:	eb19 0905 	adds.w	r9, r9, r5
 8004d60:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d64:	f04f 0100 	mov.w	r1, #0
 8004d68:	f04f 0200 	mov.w	r2, #0
 8004d6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d78:	4689      	mov	r9, r1
 8004d7a:	4692      	mov	sl, r2
 8004d7c:	eb19 0005 	adds.w	r0, r9, r5
 8004d80:	eb4a 0106 	adc.w	r1, sl, r6
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	461d      	mov	r5, r3
 8004d8a:	f04f 0600 	mov.w	r6, #0
 8004d8e:	196b      	adds	r3, r5, r5
 8004d90:	eb46 0406 	adc.w	r4, r6, r6
 8004d94:	461a      	mov	r2, r3
 8004d96:	4623      	mov	r3, r4
 8004d98:	f7fb fa16 	bl	80001c8 <__aeabi_uldivmod>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	460c      	mov	r4, r1
 8004da0:	461a      	mov	r2, r3
 8004da2:	4b8b      	ldr	r3, [pc, #556]	; (8004fd0 <UART_SetConfig+0x384>)
 8004da4:	fba3 1302 	umull	r1, r3, r3, r2
 8004da8:	095b      	lsrs	r3, r3, #5
 8004daa:	2164      	movs	r1, #100	; 0x64
 8004dac:	fb01 f303 	mul.w	r3, r1, r3
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	3332      	adds	r3, #50	; 0x32
 8004db6:	4a86      	ldr	r2, [pc, #536]	; (8004fd0 <UART_SetConfig+0x384>)
 8004db8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbc:	095b      	lsrs	r3, r3, #5
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004dc4:	4498      	add	r8, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	461d      	mov	r5, r3
 8004dca:	f04f 0600 	mov.w	r6, #0
 8004dce:	46a9      	mov	r9, r5
 8004dd0:	46b2      	mov	sl, r6
 8004dd2:	eb19 0309 	adds.w	r3, r9, r9
 8004dd6:	eb4a 040a 	adc.w	r4, sl, sl
 8004dda:	4699      	mov	r9, r3
 8004ddc:	46a2      	mov	sl, r4
 8004dde:	eb19 0905 	adds.w	r9, r9, r5
 8004de2:	eb4a 0a06 	adc.w	sl, sl, r6
 8004de6:	f04f 0100 	mov.w	r1, #0
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004df2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004df6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004dfa:	4689      	mov	r9, r1
 8004dfc:	4692      	mov	sl, r2
 8004dfe:	eb19 0005 	adds.w	r0, r9, r5
 8004e02:	eb4a 0106 	adc.w	r1, sl, r6
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	461d      	mov	r5, r3
 8004e0c:	f04f 0600 	mov.w	r6, #0
 8004e10:	196b      	adds	r3, r5, r5
 8004e12:	eb46 0406 	adc.w	r4, r6, r6
 8004e16:	461a      	mov	r2, r3
 8004e18:	4623      	mov	r3, r4
 8004e1a:	f7fb f9d5 	bl	80001c8 <__aeabi_uldivmod>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	460c      	mov	r4, r1
 8004e22:	461a      	mov	r2, r3
 8004e24:	4b6a      	ldr	r3, [pc, #424]	; (8004fd0 <UART_SetConfig+0x384>)
 8004e26:	fba3 1302 	umull	r1, r3, r3, r2
 8004e2a:	095b      	lsrs	r3, r3, #5
 8004e2c:	2164      	movs	r1, #100	; 0x64
 8004e2e:	fb01 f303 	mul.w	r3, r1, r3
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	3332      	adds	r3, #50	; 0x32
 8004e38:	4a65      	ldr	r2, [pc, #404]	; (8004fd0 <UART_SetConfig+0x384>)
 8004e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	f003 0207 	and.w	r2, r3, #7
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4442      	add	r2, r8
 8004e4a:	609a      	str	r2, [r3, #8]
 8004e4c:	e26f      	b.n	800532e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e4e:	f7fe fd0d 	bl	800386c <HAL_RCC_GetPCLK1Freq>
 8004e52:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	461d      	mov	r5, r3
 8004e58:	f04f 0600 	mov.w	r6, #0
 8004e5c:	46a8      	mov	r8, r5
 8004e5e:	46b1      	mov	r9, r6
 8004e60:	eb18 0308 	adds.w	r3, r8, r8
 8004e64:	eb49 0409 	adc.w	r4, r9, r9
 8004e68:	4698      	mov	r8, r3
 8004e6a:	46a1      	mov	r9, r4
 8004e6c:	eb18 0805 	adds.w	r8, r8, r5
 8004e70:	eb49 0906 	adc.w	r9, r9, r6
 8004e74:	f04f 0100 	mov.w	r1, #0
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004e80:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004e84:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004e88:	4688      	mov	r8, r1
 8004e8a:	4691      	mov	r9, r2
 8004e8c:	eb18 0005 	adds.w	r0, r8, r5
 8004e90:	eb49 0106 	adc.w	r1, r9, r6
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	461d      	mov	r5, r3
 8004e9a:	f04f 0600 	mov.w	r6, #0
 8004e9e:	196b      	adds	r3, r5, r5
 8004ea0:	eb46 0406 	adc.w	r4, r6, r6
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4623      	mov	r3, r4
 8004ea8:	f7fb f98e 	bl	80001c8 <__aeabi_uldivmod>
 8004eac:	4603      	mov	r3, r0
 8004eae:	460c      	mov	r4, r1
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4b47      	ldr	r3, [pc, #284]	; (8004fd0 <UART_SetConfig+0x384>)
 8004eb4:	fba3 2302 	umull	r2, r3, r3, r2
 8004eb8:	095b      	lsrs	r3, r3, #5
 8004eba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	461d      	mov	r5, r3
 8004ec2:	f04f 0600 	mov.w	r6, #0
 8004ec6:	46a9      	mov	r9, r5
 8004ec8:	46b2      	mov	sl, r6
 8004eca:	eb19 0309 	adds.w	r3, r9, r9
 8004ece:	eb4a 040a 	adc.w	r4, sl, sl
 8004ed2:	4699      	mov	r9, r3
 8004ed4:	46a2      	mov	sl, r4
 8004ed6:	eb19 0905 	adds.w	r9, r9, r5
 8004eda:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ede:	f04f 0100 	mov.w	r1, #0
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004eea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004eee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ef2:	4689      	mov	r9, r1
 8004ef4:	4692      	mov	sl, r2
 8004ef6:	eb19 0005 	adds.w	r0, r9, r5
 8004efa:	eb4a 0106 	adc.w	r1, sl, r6
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	461d      	mov	r5, r3
 8004f04:	f04f 0600 	mov.w	r6, #0
 8004f08:	196b      	adds	r3, r5, r5
 8004f0a:	eb46 0406 	adc.w	r4, r6, r6
 8004f0e:	461a      	mov	r2, r3
 8004f10:	4623      	mov	r3, r4
 8004f12:	f7fb f959 	bl	80001c8 <__aeabi_uldivmod>
 8004f16:	4603      	mov	r3, r0
 8004f18:	460c      	mov	r4, r1
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	4b2c      	ldr	r3, [pc, #176]	; (8004fd0 <UART_SetConfig+0x384>)
 8004f1e:	fba3 1302 	umull	r1, r3, r3, r2
 8004f22:	095b      	lsrs	r3, r3, #5
 8004f24:	2164      	movs	r1, #100	; 0x64
 8004f26:	fb01 f303 	mul.w	r3, r1, r3
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	3332      	adds	r3, #50	; 0x32
 8004f30:	4a27      	ldr	r2, [pc, #156]	; (8004fd0 <UART_SetConfig+0x384>)
 8004f32:	fba2 2303 	umull	r2, r3, r2, r3
 8004f36:	095b      	lsrs	r3, r3, #5
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f3e:	4498      	add	r8, r3
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	461d      	mov	r5, r3
 8004f44:	f04f 0600 	mov.w	r6, #0
 8004f48:	46a9      	mov	r9, r5
 8004f4a:	46b2      	mov	sl, r6
 8004f4c:	eb19 0309 	adds.w	r3, r9, r9
 8004f50:	eb4a 040a 	adc.w	r4, sl, sl
 8004f54:	4699      	mov	r9, r3
 8004f56:	46a2      	mov	sl, r4
 8004f58:	eb19 0905 	adds.w	r9, r9, r5
 8004f5c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f60:	f04f 0100 	mov.w	r1, #0
 8004f64:	f04f 0200 	mov.w	r2, #0
 8004f68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f74:	4689      	mov	r9, r1
 8004f76:	4692      	mov	sl, r2
 8004f78:	eb19 0005 	adds.w	r0, r9, r5
 8004f7c:	eb4a 0106 	adc.w	r1, sl, r6
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	461d      	mov	r5, r3
 8004f86:	f04f 0600 	mov.w	r6, #0
 8004f8a:	196b      	adds	r3, r5, r5
 8004f8c:	eb46 0406 	adc.w	r4, r6, r6
 8004f90:	461a      	mov	r2, r3
 8004f92:	4623      	mov	r3, r4
 8004f94:	f7fb f918 	bl	80001c8 <__aeabi_uldivmod>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	460c      	mov	r4, r1
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	4b0c      	ldr	r3, [pc, #48]	; (8004fd0 <UART_SetConfig+0x384>)
 8004fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	2164      	movs	r1, #100	; 0x64
 8004fa8:	fb01 f303 	mul.w	r3, r1, r3
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	3332      	adds	r3, #50	; 0x32
 8004fb2:	4a07      	ldr	r2, [pc, #28]	; (8004fd0 <UART_SetConfig+0x384>)
 8004fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb8:	095b      	lsrs	r3, r3, #5
 8004fba:	f003 0207 	and.w	r2, r3, #7
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4442      	add	r2, r8
 8004fc4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004fc6:	e1b2      	b.n	800532e <UART_SetConfig+0x6e2>
 8004fc8:	40011000 	.word	0x40011000
 8004fcc:	40011400 	.word	0x40011400
 8004fd0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4ad7      	ldr	r2, [pc, #860]	; (8005338 <UART_SetConfig+0x6ec>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d005      	beq.n	8004fea <UART_SetConfig+0x39e>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4ad6      	ldr	r2, [pc, #856]	; (800533c <UART_SetConfig+0x6f0>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	f040 80d1 	bne.w	800518c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fea:	f7fe fc53 	bl	8003894 <HAL_RCC_GetPCLK2Freq>
 8004fee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	469a      	mov	sl, r3
 8004ff4:	f04f 0b00 	mov.w	fp, #0
 8004ff8:	46d0      	mov	r8, sl
 8004ffa:	46d9      	mov	r9, fp
 8004ffc:	eb18 0308 	adds.w	r3, r8, r8
 8005000:	eb49 0409 	adc.w	r4, r9, r9
 8005004:	4698      	mov	r8, r3
 8005006:	46a1      	mov	r9, r4
 8005008:	eb18 080a 	adds.w	r8, r8, sl
 800500c:	eb49 090b 	adc.w	r9, r9, fp
 8005010:	f04f 0100 	mov.w	r1, #0
 8005014:	f04f 0200 	mov.w	r2, #0
 8005018:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800501c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005020:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005024:	4688      	mov	r8, r1
 8005026:	4691      	mov	r9, r2
 8005028:	eb1a 0508 	adds.w	r5, sl, r8
 800502c:	eb4b 0609 	adc.w	r6, fp, r9
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	4619      	mov	r1, r3
 8005036:	f04f 0200 	mov.w	r2, #0
 800503a:	f04f 0300 	mov.w	r3, #0
 800503e:	f04f 0400 	mov.w	r4, #0
 8005042:	0094      	lsls	r4, r2, #2
 8005044:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005048:	008b      	lsls	r3, r1, #2
 800504a:	461a      	mov	r2, r3
 800504c:	4623      	mov	r3, r4
 800504e:	4628      	mov	r0, r5
 8005050:	4631      	mov	r1, r6
 8005052:	f7fb f8b9 	bl	80001c8 <__aeabi_uldivmod>
 8005056:	4603      	mov	r3, r0
 8005058:	460c      	mov	r4, r1
 800505a:	461a      	mov	r2, r3
 800505c:	4bb8      	ldr	r3, [pc, #736]	; (8005340 <UART_SetConfig+0x6f4>)
 800505e:	fba3 2302 	umull	r2, r3, r3, r2
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	469b      	mov	fp, r3
 800506c:	f04f 0c00 	mov.w	ip, #0
 8005070:	46d9      	mov	r9, fp
 8005072:	46e2      	mov	sl, ip
 8005074:	eb19 0309 	adds.w	r3, r9, r9
 8005078:	eb4a 040a 	adc.w	r4, sl, sl
 800507c:	4699      	mov	r9, r3
 800507e:	46a2      	mov	sl, r4
 8005080:	eb19 090b 	adds.w	r9, r9, fp
 8005084:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005088:	f04f 0100 	mov.w	r1, #0
 800508c:	f04f 0200 	mov.w	r2, #0
 8005090:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005094:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005098:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800509c:	4689      	mov	r9, r1
 800509e:	4692      	mov	sl, r2
 80050a0:	eb1b 0509 	adds.w	r5, fp, r9
 80050a4:	eb4c 060a 	adc.w	r6, ip, sl
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	4619      	mov	r1, r3
 80050ae:	f04f 0200 	mov.w	r2, #0
 80050b2:	f04f 0300 	mov.w	r3, #0
 80050b6:	f04f 0400 	mov.w	r4, #0
 80050ba:	0094      	lsls	r4, r2, #2
 80050bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050c0:	008b      	lsls	r3, r1, #2
 80050c2:	461a      	mov	r2, r3
 80050c4:	4623      	mov	r3, r4
 80050c6:	4628      	mov	r0, r5
 80050c8:	4631      	mov	r1, r6
 80050ca:	f7fb f87d 	bl	80001c8 <__aeabi_uldivmod>
 80050ce:	4603      	mov	r3, r0
 80050d0:	460c      	mov	r4, r1
 80050d2:	461a      	mov	r2, r3
 80050d4:	4b9a      	ldr	r3, [pc, #616]	; (8005340 <UART_SetConfig+0x6f4>)
 80050d6:	fba3 1302 	umull	r1, r3, r3, r2
 80050da:	095b      	lsrs	r3, r3, #5
 80050dc:	2164      	movs	r1, #100	; 0x64
 80050de:	fb01 f303 	mul.w	r3, r1, r3
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	011b      	lsls	r3, r3, #4
 80050e6:	3332      	adds	r3, #50	; 0x32
 80050e8:	4a95      	ldr	r2, [pc, #596]	; (8005340 <UART_SetConfig+0x6f4>)
 80050ea:	fba2 2303 	umull	r2, r3, r2, r3
 80050ee:	095b      	lsrs	r3, r3, #5
 80050f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050f4:	4498      	add	r8, r3
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	469b      	mov	fp, r3
 80050fa:	f04f 0c00 	mov.w	ip, #0
 80050fe:	46d9      	mov	r9, fp
 8005100:	46e2      	mov	sl, ip
 8005102:	eb19 0309 	adds.w	r3, r9, r9
 8005106:	eb4a 040a 	adc.w	r4, sl, sl
 800510a:	4699      	mov	r9, r3
 800510c:	46a2      	mov	sl, r4
 800510e:	eb19 090b 	adds.w	r9, r9, fp
 8005112:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005116:	f04f 0100 	mov.w	r1, #0
 800511a:	f04f 0200 	mov.w	r2, #0
 800511e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005122:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005126:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800512a:	4689      	mov	r9, r1
 800512c:	4692      	mov	sl, r2
 800512e:	eb1b 0509 	adds.w	r5, fp, r9
 8005132:	eb4c 060a 	adc.w	r6, ip, sl
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	4619      	mov	r1, r3
 800513c:	f04f 0200 	mov.w	r2, #0
 8005140:	f04f 0300 	mov.w	r3, #0
 8005144:	f04f 0400 	mov.w	r4, #0
 8005148:	0094      	lsls	r4, r2, #2
 800514a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800514e:	008b      	lsls	r3, r1, #2
 8005150:	461a      	mov	r2, r3
 8005152:	4623      	mov	r3, r4
 8005154:	4628      	mov	r0, r5
 8005156:	4631      	mov	r1, r6
 8005158:	f7fb f836 	bl	80001c8 <__aeabi_uldivmod>
 800515c:	4603      	mov	r3, r0
 800515e:	460c      	mov	r4, r1
 8005160:	461a      	mov	r2, r3
 8005162:	4b77      	ldr	r3, [pc, #476]	; (8005340 <UART_SetConfig+0x6f4>)
 8005164:	fba3 1302 	umull	r1, r3, r3, r2
 8005168:	095b      	lsrs	r3, r3, #5
 800516a:	2164      	movs	r1, #100	; 0x64
 800516c:	fb01 f303 	mul.w	r3, r1, r3
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	3332      	adds	r3, #50	; 0x32
 8005176:	4a72      	ldr	r2, [pc, #456]	; (8005340 <UART_SetConfig+0x6f4>)
 8005178:	fba2 2303 	umull	r2, r3, r2, r3
 800517c:	095b      	lsrs	r3, r3, #5
 800517e:	f003 020f 	and.w	r2, r3, #15
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4442      	add	r2, r8
 8005188:	609a      	str	r2, [r3, #8]
 800518a:	e0d0      	b.n	800532e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800518c:	f7fe fb6e 	bl	800386c <HAL_RCC_GetPCLK1Freq>
 8005190:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	469a      	mov	sl, r3
 8005196:	f04f 0b00 	mov.w	fp, #0
 800519a:	46d0      	mov	r8, sl
 800519c:	46d9      	mov	r9, fp
 800519e:	eb18 0308 	adds.w	r3, r8, r8
 80051a2:	eb49 0409 	adc.w	r4, r9, r9
 80051a6:	4698      	mov	r8, r3
 80051a8:	46a1      	mov	r9, r4
 80051aa:	eb18 080a 	adds.w	r8, r8, sl
 80051ae:	eb49 090b 	adc.w	r9, r9, fp
 80051b2:	f04f 0100 	mov.w	r1, #0
 80051b6:	f04f 0200 	mov.w	r2, #0
 80051ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80051be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80051c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80051c6:	4688      	mov	r8, r1
 80051c8:	4691      	mov	r9, r2
 80051ca:	eb1a 0508 	adds.w	r5, sl, r8
 80051ce:	eb4b 0609 	adc.w	r6, fp, r9
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	4619      	mov	r1, r3
 80051d8:	f04f 0200 	mov.w	r2, #0
 80051dc:	f04f 0300 	mov.w	r3, #0
 80051e0:	f04f 0400 	mov.w	r4, #0
 80051e4:	0094      	lsls	r4, r2, #2
 80051e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051ea:	008b      	lsls	r3, r1, #2
 80051ec:	461a      	mov	r2, r3
 80051ee:	4623      	mov	r3, r4
 80051f0:	4628      	mov	r0, r5
 80051f2:	4631      	mov	r1, r6
 80051f4:	f7fa ffe8 	bl	80001c8 <__aeabi_uldivmod>
 80051f8:	4603      	mov	r3, r0
 80051fa:	460c      	mov	r4, r1
 80051fc:	461a      	mov	r2, r3
 80051fe:	4b50      	ldr	r3, [pc, #320]	; (8005340 <UART_SetConfig+0x6f4>)
 8005200:	fba3 2302 	umull	r2, r3, r3, r2
 8005204:	095b      	lsrs	r3, r3, #5
 8005206:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	469b      	mov	fp, r3
 800520e:	f04f 0c00 	mov.w	ip, #0
 8005212:	46d9      	mov	r9, fp
 8005214:	46e2      	mov	sl, ip
 8005216:	eb19 0309 	adds.w	r3, r9, r9
 800521a:	eb4a 040a 	adc.w	r4, sl, sl
 800521e:	4699      	mov	r9, r3
 8005220:	46a2      	mov	sl, r4
 8005222:	eb19 090b 	adds.w	r9, r9, fp
 8005226:	eb4a 0a0c 	adc.w	sl, sl, ip
 800522a:	f04f 0100 	mov.w	r1, #0
 800522e:	f04f 0200 	mov.w	r2, #0
 8005232:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005236:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800523a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800523e:	4689      	mov	r9, r1
 8005240:	4692      	mov	sl, r2
 8005242:	eb1b 0509 	adds.w	r5, fp, r9
 8005246:	eb4c 060a 	adc.w	r6, ip, sl
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	4619      	mov	r1, r3
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	f04f 0400 	mov.w	r4, #0
 800525c:	0094      	lsls	r4, r2, #2
 800525e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005262:	008b      	lsls	r3, r1, #2
 8005264:	461a      	mov	r2, r3
 8005266:	4623      	mov	r3, r4
 8005268:	4628      	mov	r0, r5
 800526a:	4631      	mov	r1, r6
 800526c:	f7fa ffac 	bl	80001c8 <__aeabi_uldivmod>
 8005270:	4603      	mov	r3, r0
 8005272:	460c      	mov	r4, r1
 8005274:	461a      	mov	r2, r3
 8005276:	4b32      	ldr	r3, [pc, #200]	; (8005340 <UART_SetConfig+0x6f4>)
 8005278:	fba3 1302 	umull	r1, r3, r3, r2
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	2164      	movs	r1, #100	; 0x64
 8005280:	fb01 f303 	mul.w	r3, r1, r3
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	011b      	lsls	r3, r3, #4
 8005288:	3332      	adds	r3, #50	; 0x32
 800528a:	4a2d      	ldr	r2, [pc, #180]	; (8005340 <UART_SetConfig+0x6f4>)
 800528c:	fba2 2303 	umull	r2, r3, r2, r3
 8005290:	095b      	lsrs	r3, r3, #5
 8005292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005296:	4498      	add	r8, r3
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	469b      	mov	fp, r3
 800529c:	f04f 0c00 	mov.w	ip, #0
 80052a0:	46d9      	mov	r9, fp
 80052a2:	46e2      	mov	sl, ip
 80052a4:	eb19 0309 	adds.w	r3, r9, r9
 80052a8:	eb4a 040a 	adc.w	r4, sl, sl
 80052ac:	4699      	mov	r9, r3
 80052ae:	46a2      	mov	sl, r4
 80052b0:	eb19 090b 	adds.w	r9, r9, fp
 80052b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80052b8:	f04f 0100 	mov.w	r1, #0
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052cc:	4689      	mov	r9, r1
 80052ce:	4692      	mov	sl, r2
 80052d0:	eb1b 0509 	adds.w	r5, fp, r9
 80052d4:	eb4c 060a 	adc.w	r6, ip, sl
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	4619      	mov	r1, r3
 80052de:	f04f 0200 	mov.w	r2, #0
 80052e2:	f04f 0300 	mov.w	r3, #0
 80052e6:	f04f 0400 	mov.w	r4, #0
 80052ea:	0094      	lsls	r4, r2, #2
 80052ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80052f0:	008b      	lsls	r3, r1, #2
 80052f2:	461a      	mov	r2, r3
 80052f4:	4623      	mov	r3, r4
 80052f6:	4628      	mov	r0, r5
 80052f8:	4631      	mov	r1, r6
 80052fa:	f7fa ff65 	bl	80001c8 <__aeabi_uldivmod>
 80052fe:	4603      	mov	r3, r0
 8005300:	460c      	mov	r4, r1
 8005302:	461a      	mov	r2, r3
 8005304:	4b0e      	ldr	r3, [pc, #56]	; (8005340 <UART_SetConfig+0x6f4>)
 8005306:	fba3 1302 	umull	r1, r3, r3, r2
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	2164      	movs	r1, #100	; 0x64
 800530e:	fb01 f303 	mul.w	r3, r1, r3
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	3332      	adds	r3, #50	; 0x32
 8005318:	4a09      	ldr	r2, [pc, #36]	; (8005340 <UART_SetConfig+0x6f4>)
 800531a:	fba2 2303 	umull	r2, r3, r2, r3
 800531e:	095b      	lsrs	r3, r3, #5
 8005320:	f003 020f 	and.w	r2, r3, #15
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4442      	add	r2, r8
 800532a:	609a      	str	r2, [r3, #8]
}
 800532c:	e7ff      	b.n	800532e <UART_SetConfig+0x6e2>
 800532e:	bf00      	nop
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005338:	40011000 	.word	0x40011000
 800533c:	40011400 	.word	0x40011400
 8005340:	51eb851f 	.word	0x51eb851f

08005344 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005344:	b084      	sub	sp, #16
 8005346:	b580      	push	{r7, lr}
 8005348:	b084      	sub	sp, #16
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
 800534e:	f107 001c 	add.w	r0, r7, #28
 8005352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005358:	2b01      	cmp	r3, #1
 800535a:	d122      	bne.n	80053a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005360:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005386:	2b01      	cmp	r3, #1
 8005388:	d105      	bne.n	8005396 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f94a 	bl	8005630 <USB_CoreReset>
 800539c:	4603      	mov	r3, r0
 800539e:	73fb      	strb	r3, [r7, #15]
 80053a0:	e01a      	b.n	80053d8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f93e 	bl	8005630 <USB_CoreReset>
 80053b4:	4603      	mov	r3, r0
 80053b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80053b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d106      	bne.n	80053cc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	639a      	str	r2, [r3, #56]	; 0x38
 80053ca:	e005      	b.n	80053d8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80053d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d10b      	bne.n	80053f6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f043 0206 	orr.w	r2, r3, #6
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f043 0220 	orr.w	r2, r3, #32
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80053f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005402:	b004      	add	sp, #16
 8005404:	4770      	bx	lr

08005406 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f043 0201 	orr.w	r2, r3, #1
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f023 0201 	bic.w	r2, r3, #1
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b082      	sub	sp, #8
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	460b      	mov	r3, r1
 8005454:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005462:	78fb      	ldrb	r3, [r7, #3]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d106      	bne.n	8005476 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	60da      	str	r2, [r3, #12]
 8005474:	e00b      	b.n	800548e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005476:	78fb      	ldrb	r3, [r7, #3]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d106      	bne.n	800548a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	60da      	str	r2, [r3, #12]
 8005488:	e001      	b.n	800548e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e003      	b.n	8005496 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800548e:	2032      	movs	r0, #50	; 0x32
 8005490:	f7fb f88c 	bl	80005ac <HAL_Delay>

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
	...

080054a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	019b      	lsls	r3, r3, #6
 80054b2:	f043 0220 	orr.w	r2, r3, #32
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	3301      	adds	r3, #1
 80054be:	60fb      	str	r3, [r7, #12]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4a09      	ldr	r2, [pc, #36]	; (80054e8 <USB_FlushTxFifo+0x48>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d901      	bls.n	80054cc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e006      	b.n	80054da <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	f003 0320 	and.w	r3, r3, #32
 80054d4:	2b20      	cmp	r3, #32
 80054d6:	d0f0      	beq.n	80054ba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	00030d40 	.word	0x00030d40

080054ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80054f4:	2300      	movs	r3, #0
 80054f6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2210      	movs	r2, #16
 80054fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	3301      	adds	r3, #1
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4a09      	ldr	r2, [pc, #36]	; (800552c <USB_FlushRxFifo+0x40>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d901      	bls.n	8005510 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e006      	b.n	800551e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	f003 0310 	and.w	r3, r3, #16
 8005518:	2b10      	cmp	r3, #16
 800551a:	d0f0      	beq.n	80054fe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	00030d40 	.word	0x00030d40

08005530 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005530:	b480      	push	{r7}
 8005532:	b089      	sub	sp, #36	; 0x24
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	4611      	mov	r1, r2
 800553c:	461a      	mov	r2, r3
 800553e:	460b      	mov	r3, r1
 8005540:	71fb      	strb	r3, [r7, #7]
 8005542:	4613      	mov	r3, r2
 8005544:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800554e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005552:	2b00      	cmp	r3, #0
 8005554:	d11a      	bne.n	800558c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005556:	88bb      	ldrh	r3, [r7, #4]
 8005558:	3303      	adds	r3, #3
 800555a:	089b      	lsrs	r3, r3, #2
 800555c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800555e:	2300      	movs	r3, #0
 8005560:	61bb      	str	r3, [r7, #24]
 8005562:	e00f      	b.n	8005584 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005564:	79fb      	ldrb	r3, [r7, #7]
 8005566:	031a      	lsls	r2, r3, #12
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	4413      	add	r3, r2
 800556c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005570:	461a      	mov	r2, r3
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	3304      	adds	r3, #4
 800557c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	3301      	adds	r3, #1
 8005582:	61bb      	str	r3, [r7, #24]
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	429a      	cmp	r2, r3
 800558a:	d3eb      	bcc.n	8005564 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3724      	adds	r7, #36	; 0x24
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800559a:	b480      	push	{r7}
 800559c:	b089      	sub	sp, #36	; 0x24
 800559e:	af00      	add	r7, sp, #0
 80055a0:	60f8      	str	r0, [r7, #12]
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	4613      	mov	r3, r2
 80055a6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80055b0:	88fb      	ldrh	r3, [r7, #6]
 80055b2:	3303      	adds	r3, #3
 80055b4:	089b      	lsrs	r3, r3, #2
 80055b6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80055b8:	2300      	movs	r3, #0
 80055ba:	61bb      	str	r3, [r7, #24]
 80055bc:	e00b      	b.n	80055d6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	601a      	str	r2, [r3, #0]
    pDest++;
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	3304      	adds	r3, #4
 80055ce:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	3301      	adds	r3, #1
 80055d4:	61bb      	str	r3, [r7, #24]
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d3ef      	bcc.n	80055be <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80055de:	69fb      	ldr	r3, [r7, #28]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3724      	adds	r7, #36	; 0x24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	4013      	ands	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005604:	68fb      	ldr	r3, [r7, #12]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	f003 0301 	and.w	r3, r3, #1
}
 8005622:	4618      	mov	r0, r3
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
	...

08005630 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3301      	adds	r3, #1
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	4a13      	ldr	r2, [pc, #76]	; (8005694 <USB_CoreReset+0x64>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d901      	bls.n	800564e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e01b      	b.n	8005686 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	daf2      	bge.n	800563c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f043 0201 	orr.w	r2, r3, #1
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	3301      	adds	r3, #1
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4a09      	ldr	r2, [pc, #36]	; (8005694 <USB_CoreReset+0x64>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d901      	bls.n	8005678 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e006      	b.n	8005686 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b01      	cmp	r3, #1
 8005682:	d0f0      	beq.n	8005666 <USB_CoreReset+0x36>

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	00030d40 	.word	0x00030d40

08005698 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005698:	b084      	sub	sp, #16
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	f107 001c 	add.w	r0, r7, #28
 80056a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056b4:	461a      	mov	r2, r3
 80056b6:	2300      	movs	r3, #0
 80056b8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ca:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d018      	beq.n	800571c <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d10a      	bne.n	8005706 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056fe:	f043 0304 	orr.w	r3, r3, #4
 8005702:	6013      	str	r3, [r2, #0]
 8005704:	e014      	b.n	8005730 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005714:	f023 0304 	bic.w	r3, r3, #4
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	e009      	b.n	8005730 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800572a:	f023 0304 	bic.w	r3, r3, #4
 800572e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005730:	2110      	movs	r1, #16
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7ff feb4 	bl	80054a0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7ff fed7 	bl	80054ec <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800573e:	2300      	movs	r3, #0
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	e015      	b.n	8005770 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	4413      	add	r3, r2
 800574c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005750:	461a      	mov	r2, r3
 8005752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005756:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4413      	add	r3, r2
 8005760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005764:	461a      	mov	r2, r3
 8005766:	2300      	movs	r3, #0
 8005768:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	3301      	adds	r3, #1
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	429a      	cmp	r2, r3
 8005776:	d3e5      	bcc.n	8005744 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005778:	2101      	movs	r1, #1
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f8ac 	bl	80058d8 <USB_DriveVbus>

  HAL_Delay(200U);
 8005780:	20c8      	movs	r0, #200	; 0xc8
 8005782:	f7fa ff13 	bl	80005ac <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005792:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00b      	beq.n	80057b8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057a6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a14      	ldr	r2, [pc, #80]	; (80057fc <USB_HostInit+0x164>)
 80057ac:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a13      	ldr	r2, [pc, #76]	; (8005800 <USB_HostInit+0x168>)
 80057b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80057b6:	e009      	b.n	80057cc <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2280      	movs	r2, #128	; 0x80
 80057bc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a10      	ldr	r2, [pc, #64]	; (8005804 <USB_HostInit+0x16c>)
 80057c2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a10      	ldr	r2, [pc, #64]	; (8005808 <USB_HostInit+0x170>)
 80057c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d105      	bne.n	80057de <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	f043 0210 	orr.w	r2, r3, #16
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	699a      	ldr	r2, [r3, #24]
 80057e2:	4b0a      	ldr	r3, [pc, #40]	; (800580c <USB_HostInit+0x174>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057f6:	b004      	add	sp, #16
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	01000200 	.word	0x01000200
 8005800:	00e00300 	.word	0x00e00300
 8005804:	00600080 	.word	0x00600080
 8005808:	004000e0 	.word	0x004000e0
 800580c:	a3200008 	.word	0xa3200008

08005810 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	460b      	mov	r3, r1
 800581a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800582e:	f023 0303 	bic.w	r3, r3, #3
 8005832:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	78fb      	ldrb	r3, [r7, #3]
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	68f9      	ldr	r1, [r7, #12]
 8005844:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005848:	4313      	orrs	r3, r2
 800584a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800584c:	78fb      	ldrb	r3, [r7, #3]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d107      	bne.n	8005862 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005858:	461a      	mov	r2, r3
 800585a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800585e:	6053      	str	r3, [r2, #4]
 8005860:	e009      	b.n	8005876 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005862:	78fb      	ldrb	r3, [r7, #3]
 8005864:	2b02      	cmp	r3, #2
 8005866:	d106      	bne.n	8005876 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800586e:	461a      	mov	r2, r3
 8005870:	f241 7370 	movw	r3, #6000	; 0x1770
 8005874:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80058a4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80058ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80058b4:	2064      	movs	r0, #100	; 0x64
 80058b6:	f7fa fe79 	bl	80005ac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80058c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058c6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80058c8:	200a      	movs	r0, #10
 80058ca:	f7fa fe6f 	bl	80005ac <HAL_Delay>

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	460b      	mov	r3, r1
 80058e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80058fc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d109      	bne.n	800591c <USB_DriveVbus+0x44>
 8005908:	78fb      	ldrb	r3, [r7, #3]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d106      	bne.n	800591c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005916:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800591a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005926:	d109      	bne.n	800593c <USB_DriveVbus+0x64>
 8005928:	78fb      	ldrb	r3, [r7, #3]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005936:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800593a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800594a:	b480      	push	{r7}
 800594c:	b085      	sub	sp, #20
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	0c5b      	lsrs	r3, r3, #17
 8005968:	f003 0303 	and.w	r3, r3, #3
}
 800596c:	4618      	mov	r0, r3
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	b29b      	uxth	r3, r3
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
	...

0800599c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	4608      	mov	r0, r1
 80059a6:	4611      	mov	r1, r2
 80059a8:	461a      	mov	r2, r3
 80059aa:	4603      	mov	r3, r0
 80059ac:	70fb      	strb	r3, [r7, #3]
 80059ae:	460b      	mov	r3, r1
 80059b0:	70bb      	strb	r3, [r7, #2]
 80059b2:	4613      	mov	r3, r2
 80059b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80059b6:	2300      	movs	r3, #0
 80059b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80059be:	78fb      	ldrb	r3, [r7, #3]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ca:	461a      	mov	r2, r3
 80059cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059d0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80059d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d87e      	bhi.n	8005ad8 <USB_HC_Init+0x13c>
 80059da:	a201      	add	r2, pc, #4	; (adr r2, 80059e0 <USB_HC_Init+0x44>)
 80059dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e0:	080059f1 	.word	0x080059f1
 80059e4:	08005a9b 	.word	0x08005a9b
 80059e8:	080059f1 	.word	0x080059f1
 80059ec:	08005a5d 	.word	0x08005a5d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059fc:	461a      	mov	r2, r3
 80059fe:	f240 439d 	movw	r3, #1181	; 0x49d
 8005a02:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005a04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	da10      	bge.n	8005a2e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005a0c:	78fb      	ldrb	r3, [r7, #3]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	78fa      	ldrb	r2, [r7, #3]
 8005a1c:	0151      	lsls	r1, r2, #5
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	440a      	add	r2, r1
 8005a22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a2a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005a2c:	e057      	b.n	8005ade <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d051      	beq.n	8005ade <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005a3a:	78fb      	ldrb	r3, [r7, #3]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	78fa      	ldrb	r2, [r7, #3]
 8005a4a:	0151      	lsls	r1, r2, #5
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	440a      	add	r2, r1
 8005a50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a54:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005a58:	60d3      	str	r3, [r2, #12]
      break;
 8005a5a:	e040      	b.n	8005ade <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a5c:	78fb      	ldrb	r3, [r7, #3]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a68:	461a      	mov	r2, r3
 8005a6a:	f240 639d 	movw	r3, #1693	; 0x69d
 8005a6e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005a70:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	da34      	bge.n	8005ae2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005a78:	78fb      	ldrb	r3, [r7, #3]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	78fa      	ldrb	r2, [r7, #3]
 8005a88:	0151      	lsls	r1, r2, #5
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	440a      	add	r2, r1
 8005a8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a96:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005a98:	e023      	b.n	8005ae2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a9a:	78fb      	ldrb	r3, [r7, #3]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f240 2325 	movw	r3, #549	; 0x225
 8005aac:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005aae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	da17      	bge.n	8005ae6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005ab6:	78fb      	ldrb	r3, [r7, #3]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	78fa      	ldrb	r2, [r7, #3]
 8005ac6:	0151      	lsls	r1, r2, #5
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	440a      	add	r2, r1
 8005acc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ad0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005ad4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005ad6:	e006      	b.n	8005ae6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	75fb      	strb	r3, [r7, #23]
      break;
 8005adc:	e004      	b.n	8005ae8 <USB_HC_Init+0x14c>
      break;
 8005ade:	bf00      	nop
 8005ae0:	e002      	b.n	8005ae8 <USB_HC_Init+0x14c>
      break;
 8005ae2:	bf00      	nop
 8005ae4:	e000      	b.n	8005ae8 <USB_HC_Init+0x14c>
      break;
 8005ae6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aee:	699a      	ldr	r2, [r3, #24]
 8005af0:	78fb      	ldrb	r3, [r7, #3]
 8005af2:	f003 030f 	and.w	r3, r3, #15
 8005af6:	2101      	movs	r1, #1
 8005af8:	fa01 f303 	lsl.w	r3, r1, r3
 8005afc:	68b9      	ldr	r1, [r7, #8]
 8005afe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b02:	4313      	orrs	r3, r2
 8005b04:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005b12:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	da03      	bge.n	8005b22 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b1e:	613b      	str	r3, [r7, #16]
 8005b20:	e001      	b.n	8005b26 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005b22:	2300      	movs	r3, #0
 8005b24:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005b26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d103      	bne.n	8005b36 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005b2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	e001      	b.n	8005b3a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b3a:	787b      	ldrb	r3, [r7, #1]
 8005b3c:	059b      	lsls	r3, r3, #22
 8005b3e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005b42:	78bb      	ldrb	r3, [r7, #2]
 8005b44:	02db      	lsls	r3, r3, #11
 8005b46:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b4a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005b4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b50:	049b      	lsls	r3, r3, #18
 8005b52:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005b56:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005b58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005b5e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b64:	78fb      	ldrb	r3, [r7, #3]
 8005b66:	0159      	lsls	r1, r3, #5
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	440b      	add	r3, r1
 8005b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b70:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b76:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005b78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d10f      	bne.n	8005ba0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005b80:	78fb      	ldrb	r3, [r7, #3]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	78fa      	ldrb	r2, [r7, #3]
 8005b90:	0151      	lsls	r1, r2, #5
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	440a      	add	r2, r1
 8005b96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b9e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	371c      	adds	r7, #28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop

08005bb0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08c      	sub	sp, #48	; 0x30
 8005bb4:	af02      	add	r7, sp, #8
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	785b      	ldrb	r3, [r3, #1]
 8005bc6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005bc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bcc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d028      	beq.n	8005c2c <USB_HC_StartXfer+0x7c>
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	791b      	ldrb	r3, [r3, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d124      	bne.n	8005c2c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005be2:	79fb      	ldrb	r3, [r7, #7]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10b      	bne.n	8005c00 <USB_HC_StartXfer+0x50>
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	795b      	ldrb	r3, [r3, #5]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d107      	bne.n	8005c00 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	785b      	ldrb	r3, [r3, #1]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f000 fa2e 	bl	8006058 <USB_DoPing>
      return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	e112      	b.n	8005e26 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8005c00:	79fb      	ldrb	r3, [r7, #7]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d112      	bne.n	8005c2c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	69fa      	ldr	r2, [r7, #28]
 8005c16:	0151      	lsls	r1, r2, #5
 8005c18:	6a3a      	ldr	r2, [r7, #32]
 8005c1a:	440a      	add	r2, r1
 8005c1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c20:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005c24:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d018      	beq.n	8005c66 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	8912      	ldrh	r2, [r2, #8]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	8912      	ldrh	r2, [r2, #8]
 8005c44:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c48:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005c4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005c4c:	8b7b      	ldrh	r3, [r7, #26]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d90b      	bls.n	8005c6a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005c52:	8b7b      	ldrh	r3, [r7, #26]
 8005c54:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005c56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	8912      	ldrh	r2, [r2, #8]
 8005c5c:	fb02 f203 	mul.w	r2, r2, r3
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	611a      	str	r2, [r3, #16]
 8005c64:	e001      	b.n	8005c6a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005c66:	2301      	movs	r3, #1
 8005c68:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	78db      	ldrb	r3, [r3, #3]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d006      	beq.n	8005c80 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005c72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	8912      	ldrh	r2, [r2, #8]
 8005c78:	fb02 f203 	mul.w	r2, r2, r3
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005c88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c8a:	04d9      	lsls	r1, r3, #19
 8005c8c:	4b68      	ldr	r3, [pc, #416]	; (8005e30 <USB_HC_StartXfer+0x280>)
 8005c8e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005c90:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	7a9b      	ldrb	r3, [r3, #10]
 8005c96:	075b      	lsls	r3, r3, #29
 8005c98:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005c9c:	69f9      	ldr	r1, [r7, #28]
 8005c9e:	0148      	lsls	r0, r1, #5
 8005ca0:	6a39      	ldr	r1, [r7, #32]
 8005ca2:	4401      	add	r1, r0
 8005ca4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ca8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005caa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005cac:	79fb      	ldrb	r3, [r7, #7]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d009      	beq.n	8005cc6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	68d9      	ldr	r1, [r3, #12]
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc2:	460a      	mov	r2, r1
 8005cc4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	bf0c      	ite	eq
 8005cd6:	2301      	moveq	r3, #1
 8005cd8:	2300      	movne	r3, #0
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	69fa      	ldr	r2, [r7, #28]
 8005cee:	0151      	lsls	r1, r2, #5
 8005cf0:	6a3a      	ldr	r2, [r7, #32]
 8005cf2:	440a      	add	r2, r1
 8005cf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cf8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005cfc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	6a3b      	ldr	r3, [r7, #32]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	7e7b      	ldrb	r3, [r7, #25]
 8005d0e:	075b      	lsls	r3, r3, #29
 8005d10:	69f9      	ldr	r1, [r7, #28]
 8005d12:	0148      	lsls	r0, r1, #5
 8005d14:	6a39      	ldr	r1, [r7, #32]
 8005d16:	4401      	add	r1, r0
 8005d18:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a41      	ldr	r2, [pc, #260]	; (8005e34 <USB_HC_StartXfer+0x284>)
 8005d30:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d32:	4b40      	ldr	r3, [pc, #256]	; (8005e34 <USB_HC_StartXfer+0x284>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d3a:	4a3e      	ldr	r2, [pc, #248]	; (8005e34 <USB_HC_StartXfer+0x284>)
 8005d3c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	78db      	ldrb	r3, [r3, #3]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d006      	beq.n	8005d54 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005d46:	4b3b      	ldr	r3, [pc, #236]	; (8005e34 <USB_HC_StartXfer+0x284>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d4e:	4a39      	ldr	r2, [pc, #228]	; (8005e34 <USB_HC_StartXfer+0x284>)
 8005d50:	6013      	str	r3, [r2, #0]
 8005d52:	e005      	b.n	8005d60 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005d54:	4b37      	ldr	r3, [pc, #220]	; (8005e34 <USB_HC_StartXfer+0x284>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d5c:	4a35      	ldr	r2, [pc, #212]	; (8005e34 <USB_HC_StartXfer+0x284>)
 8005d5e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d60:	4b34      	ldr	r3, [pc, #208]	; (8005e34 <USB_HC_StartXfer+0x284>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d68:	4a32      	ldr	r2, [pc, #200]	; (8005e34 <USB_HC_StartXfer+0x284>)
 8005d6a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d78:	461a      	mov	r2, r3
 8005d7a:	4b2e      	ldr	r3, [pc, #184]	; (8005e34 <USB_HC_StartXfer+0x284>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005d80:	79fb      	ldrb	r3, [r7, #7]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d14e      	bne.n	8005e24 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	78db      	ldrb	r3, [r3, #3]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d14a      	bne.n	8005e24 <USB_HC_StartXfer+0x274>
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d046      	beq.n	8005e24 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	79db      	ldrb	r3, [r3, #7]
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	d830      	bhi.n	8005e00 <USB_HC_StartXfer+0x250>
 8005d9e:	a201      	add	r2, pc, #4	; (adr r2, 8005da4 <USB_HC_StartXfer+0x1f4>)
 8005da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da4:	08005db5 	.word	0x08005db5
 8005da8:	08005dd9 	.word	0x08005dd9
 8005dac:	08005db5 	.word	0x08005db5
 8005db0:	08005dd9 	.word	0x08005dd9
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	3303      	adds	r3, #3
 8005dba:	089b      	lsrs	r3, r3, #2
 8005dbc:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005dbe:	8afa      	ldrh	r2, [r7, #22]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d91c      	bls.n	8005e04 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	f043 0220 	orr.w	r2, r3, #32
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	619a      	str	r2, [r3, #24]
          }
          break;
 8005dd6:	e015      	b.n	8005e04 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	3303      	adds	r3, #3
 8005dde:	089b      	lsrs	r3, r3, #2
 8005de0:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005de2:	8afa      	ldrh	r2, [r7, #22]
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d90a      	bls.n	8005e08 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	619a      	str	r2, [r3, #24]
          }
          break;
 8005dfe:	e003      	b.n	8005e08 <USB_HC_StartXfer+0x258>

        default:
          break;
 8005e00:	bf00      	nop
 8005e02:	e002      	b.n	8005e0a <USB_HC_StartXfer+0x25a>
          break;
 8005e04:	bf00      	nop
 8005e06:	e000      	b.n	8005e0a <USB_HC_StartXfer+0x25a>
          break;
 8005e08:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	68d9      	ldr	r1, [r3, #12]
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	785a      	ldrb	r2, [r3, #1]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	b298      	uxth	r0, r3
 8005e18:	2300      	movs	r3, #0
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f7ff fb86 	bl	8005530 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3728      	adds	r7, #40	; 0x28
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	1ff80000 	.word	0x1ff80000
 8005e34:	200000ac 	.word	0x200000ac

08005e38 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	b29b      	uxth	r3, r3
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b087      	sub	sp, #28
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	460b      	mov	r3, r1
 8005e64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	0c9b      	lsrs	r3, r3, #18
 8005e82:	f003 0303 	and.w	r3, r3, #3
 8005e86:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d002      	beq.n	8005e94 <USB_HC_Halt+0x3a>
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d16c      	bne.n	8005f6e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	0151      	lsls	r1, r2, #5
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	440a      	add	r2, r1
 8005eaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eb2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d143      	bne.n	8005f48 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	0151      	lsls	r1, r2, #5
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	440a      	add	r2, r1
 8005ed6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ede:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	0151      	lsls	r1, r2, #5
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	440a      	add	r2, r1
 8005ef6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005efa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005efe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	0151      	lsls	r1, r2, #5
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	440a      	add	r2, r1
 8005f16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f1e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	3301      	adds	r3, #1
 8005f24:	617b      	str	r3, [r7, #20]
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f2c:	d81d      	bhi.n	8005f6a <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f44:	d0ec      	beq.n	8005f20 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f46:	e080      	b.n	800604a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	0151      	lsls	r1, r2, #5
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	440a      	add	r2, r1
 8005f5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f66:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f68:	e06f      	b.n	800604a <USB_HC_Halt+0x1f0>
          break;
 8005f6a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f6c:	e06d      	b.n	800604a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	0151      	lsls	r1, r2, #5
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	440a      	add	r2, r1
 8005f84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f8c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d143      	bne.n	8006026 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	0151      	lsls	r1, r2, #5
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	440a      	add	r2, r1
 8005fb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fbc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	0151      	lsls	r1, r2, #5
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	440a      	add	r2, r1
 8005fd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fdc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	0151      	lsls	r1, r2, #5
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	440a      	add	r2, r1
 8005ff4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ff8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ffc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	3301      	adds	r3, #1
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800600a:	d81d      	bhi.n	8006048 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	4413      	add	r3, r2
 8006014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800601e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006022:	d0ec      	beq.n	8005ffe <USB_HC_Halt+0x1a4>
 8006024:	e011      	b.n	800604a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	015a      	lsls	r2, r3, #5
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	4413      	add	r3, r2
 800602e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	0151      	lsls	r1, r2, #5
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	440a      	add	r2, r1
 800603c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006040:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	e000      	b.n	800604a <USB_HC_Halt+0x1f0>
          break;
 8006048:	bf00      	nop
    }
  }

  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	371c      	adds	r7, #28
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006058:	b480      	push	{r7}
 800605a:	b087      	sub	sp, #28
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006068:	78fb      	ldrb	r3, [r7, #3]
 800606a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800606c:	2301      	movs	r3, #1
 800606e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	04da      	lsls	r2, r3, #19
 8006074:	4b15      	ldr	r3, [pc, #84]	; (80060cc <USB_DoPing+0x74>)
 8006076:	4013      	ands	r3, r2
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	0151      	lsls	r1, r2, #5
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	440a      	add	r2, r1
 8006080:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006084:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006088:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	4413      	add	r3, r2
 8006092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060a0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060a8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060b6:	461a      	mov	r2, r3
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	1ff80000 	.word	0x1ff80000

080060d0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7ff f9a1 	bl	8005428 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80060e6:	2110      	movs	r1, #16
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f7ff f9d9 	bl	80054a0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7ff f9fc 	bl	80054ec <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80060f4:	2300      	movs	r3, #0
 80060f6:	613b      	str	r3, [r7, #16]
 80060f8:	e01f      	b.n	800613a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4413      	add	r3, r2
 8006102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006110:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006118:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006120:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4413      	add	r3, r2
 800612a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800612e:	461a      	mov	r2, r3
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	3301      	adds	r3, #1
 8006138:	613b      	str	r3, [r7, #16]
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	2b0f      	cmp	r3, #15
 800613e:	d9dc      	bls.n	80060fa <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006140:	2300      	movs	r3, #0
 8006142:	613b      	str	r3, [r7, #16]
 8006144:	e034      	b.n	80061b0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4413      	add	r3, r2
 800614e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800615c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006164:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800616c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4413      	add	r3, r2
 8006176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800617a:	461a      	mov	r2, r3
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	3301      	adds	r3, #1
 8006184:	617b      	str	r3, [r7, #20]
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800618c:	d80c      	bhi.n	80061a8 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4413      	add	r3, r2
 8006196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061a4:	d0ec      	beq.n	8006180 <USB_StopHost+0xb0>
 80061a6:	e000      	b.n	80061aa <USB_StopHost+0xda>
        break;
 80061a8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	3301      	adds	r3, #1
 80061ae:	613b      	str	r3, [r7, #16]
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	2b0f      	cmp	r3, #15
 80061b4:	d9c7      	bls.n	8006146 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061bc:	461a      	mov	r2, r3
 80061be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061c2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061ca:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7ff f91a 	bl	8005406 <USB_EnableGlobalInt>

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3718      	adds	r7, #24
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 80061dc:	b590      	push	{r4, r7, lr}
 80061de:	b089      	sub	sp, #36	; 0x24
 80061e0:	af04      	add	r7, sp, #16
 80061e2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 80061e4:	2302      	movs	r3, #2
 80061e6:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 80061e8:	2301      	movs	r3, #1
 80061ea:	2202      	movs	r2, #2
 80061ec:	2102      	movs	r1, #2
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fc3a 	bl	8006a68 <USBH_FindInterface>
 80061f4:	4603      	mov	r3, r0
 80061f6:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 80061f8:	7bbb      	ldrb	r3, [r7, #14]
 80061fa:	2bff      	cmp	r3, #255	; 0xff
 80061fc:	f000 812a 	beq.w	8006454 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8006200:	7bbb      	ldrb	r3, [r7, #14]
 8006202:	4619      	mov	r1, r3
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fc13 	bl	8006a30 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8006210:	2050      	movs	r0, #80	; 0x50
 8006212:	f002 febb 	bl	8008f8c <malloc>
 8006216:	4603      	mov	r3, r0
 8006218:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006224:	7bbb      	ldrb	r3, [r7, #14]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	211a      	movs	r1, #26
 800622a:	fb01 f303 	mul.w	r3, r1, r3
 800622e:	4413      	add	r3, r2
 8006230:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	b25b      	sxtb	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	da15      	bge.n	8006268 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800623c:	7bbb      	ldrb	r3, [r7, #14]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	211a      	movs	r1, #26
 8006242:	fb01 f303 	mul.w	r3, r1, r3
 8006246:	4413      	add	r3, r2
 8006248:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800624c:	781a      	ldrb	r2, [r3, #0]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006252:	7bbb      	ldrb	r3, [r7, #14]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	211a      	movs	r1, #26
 8006258:	fb01 f303 	mul.w	r3, r1, r3
 800625c:	4413      	add	r3, r2
 800625e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006262:	881a      	ldrh	r2, [r3, #0]
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	785b      	ldrb	r3, [r3, #1]
 800626c:	4619      	mov	r1, r3
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f001 fd21 	bl	8007cb6 <USBH_AllocPipe>
 8006274:	4603      	mov	r3, r0
 8006276:	461a      	mov	r2, r3
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	7819      	ldrb	r1, [r3, #0]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	7858      	ldrb	r0, [r3, #1]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	8952      	ldrh	r2, [r2, #10]
 8006294:	9202      	str	r2, [sp, #8]
 8006296:	2203      	movs	r2, #3
 8006298:	9201      	str	r2, [sp, #4]
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	4623      	mov	r3, r4
 800629e:	4602      	mov	r2, r0
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f001 fcd9 	bl	8007c58 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	2200      	movs	r2, #0
 80062ac:	4619      	mov	r1, r3
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f002 fd92 	bl	8008dd8 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 80062b4:	2300      	movs	r3, #0
 80062b6:	2200      	movs	r2, #0
 80062b8:	210a      	movs	r1, #10
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fbd4 	bl	8006a68 <USBH_FindInterface>
 80062c0:	4603      	mov	r3, r0
 80062c2:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 80062c4:	7bbb      	ldrb	r3, [r7, #14]
 80062c6:	2bff      	cmp	r3, #255	; 0xff
 80062c8:	f000 80c4 	beq.w	8006454 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80062cc:	7bbb      	ldrb	r3, [r7, #14]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	211a      	movs	r1, #26
 80062d2:	fb01 f303 	mul.w	r3, r1, r3
 80062d6:	4413      	add	r3, r2
 80062d8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	b25b      	sxtb	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	da16      	bge.n	8006312 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062e4:	7bbb      	ldrb	r3, [r7, #14]
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	211a      	movs	r1, #26
 80062ea:	fb01 f303 	mul.w	r3, r1, r3
 80062ee:	4413      	add	r3, r2
 80062f0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80062f4:	781a      	ldrb	r2, [r3, #0]
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80062fa:	7bbb      	ldrb	r3, [r7, #14]
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	211a      	movs	r1, #26
 8006300:	fb01 f303 	mul.w	r3, r1, r3
 8006304:	4413      	add	r3, r2
 8006306:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800630a:	881a      	ldrh	r2, [r3, #0]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	835a      	strh	r2, [r3, #26]
 8006310:	e015      	b.n	800633e <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006312:	7bbb      	ldrb	r3, [r7, #14]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	211a      	movs	r1, #26
 8006318:	fb01 f303 	mul.w	r3, r1, r3
 800631c:	4413      	add	r3, r2
 800631e:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006322:	781a      	ldrb	r2, [r3, #0]
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006328:	7bbb      	ldrb	r3, [r7, #14]
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	211a      	movs	r1, #26
 800632e:	fb01 f303 	mul.w	r3, r1, r3
 8006332:	4413      	add	r3, r2
 8006334:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006338:	881a      	ldrh	r2, [r3, #0]
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800633e:	7bbb      	ldrb	r3, [r7, #14]
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	211a      	movs	r1, #26
 8006344:	fb01 f303 	mul.w	r3, r1, r3
 8006348:	4413      	add	r3, r2
 800634a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	b25b      	sxtb	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	da16      	bge.n	8006384 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006356:	7bbb      	ldrb	r3, [r7, #14]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	211a      	movs	r1, #26
 800635c:	fb01 f303 	mul.w	r3, r1, r3
 8006360:	4413      	add	r3, r2
 8006362:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006366:	781a      	ldrb	r2, [r3, #0]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800636c:	7bbb      	ldrb	r3, [r7, #14]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	211a      	movs	r1, #26
 8006372:	fb01 f303 	mul.w	r3, r1, r3
 8006376:	4413      	add	r3, r2
 8006378:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800637c:	881a      	ldrh	r2, [r3, #0]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	835a      	strh	r2, [r3, #26]
 8006382:	e015      	b.n	80063b0 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006384:	7bbb      	ldrb	r3, [r7, #14]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	211a      	movs	r1, #26
 800638a:	fb01 f303 	mul.w	r3, r1, r3
 800638e:	4413      	add	r3, r2
 8006390:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006394:	781a      	ldrb	r2, [r3, #0]
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800639a:	7bbb      	ldrb	r3, [r7, #14]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	211a      	movs	r1, #26
 80063a0:	fb01 f303 	mul.w	r3, r1, r3
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80063aa:	881a      	ldrh	r2, [r3, #0]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	7b9b      	ldrb	r3, [r3, #14]
 80063b4:	4619      	mov	r1, r3
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f001 fc7d 	bl	8007cb6 <USBH_AllocPipe>
 80063bc:	4603      	mov	r3, r0
 80063be:	461a      	mov	r2, r3
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	7bdb      	ldrb	r3, [r3, #15]
 80063c8:	4619      	mov	r1, r3
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f001 fc73 	bl	8007cb6 <USBH_AllocPipe>
 80063d0:	4603      	mov	r3, r0
 80063d2:	461a      	mov	r2, r3
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	7b59      	ldrb	r1, [r3, #13]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	7b98      	ldrb	r0, [r3, #14]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	8b12      	ldrh	r2, [r2, #24]
 80063f0:	9202      	str	r2, [sp, #8]
 80063f2:	2202      	movs	r2, #2
 80063f4:	9201      	str	r2, [sp, #4]
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	4623      	mov	r3, r4
 80063fa:	4602      	mov	r2, r0
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f001 fc2b 	bl	8007c58 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	7b19      	ldrb	r1, [r3, #12]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	7bd8      	ldrb	r0, [r3, #15]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	8b52      	ldrh	r2, [r2, #26]
 800641a:	9202      	str	r2, [sp, #8]
 800641c:	2202      	movs	r2, #2
 800641e:	9201      	str	r2, [sp, #4]
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	4623      	mov	r3, r4
 8006424:	4602      	mov	r2, r0
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 fc16 	bl	8007c58 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	7b5b      	ldrb	r3, [r3, #13]
 8006438:	2200      	movs	r2, #0
 800643a:	4619      	mov	r1, r3
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f002 fccb 	bl	8008dd8 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	7b1b      	ldrb	r3, [r3, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	4619      	mov	r1, r3
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f002 fcc4 	bl	8008dd8 <USBH_LL_SetToggle>
      status = USBH_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8006454:	7bfb      	ldrb	r3, [r7, #15]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	bd90      	pop	{r4, r7, pc}

0800645e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00e      	beq.n	8006496 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	4619      	mov	r1, r3
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f001 fc09 	bl	8007c96 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	4619      	mov	r1, r3
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f001 fc31 	bl	8007cf2 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	7b1b      	ldrb	r3, [r3, #12]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00e      	beq.n	80064bc <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	7b1b      	ldrb	r3, [r3, #12]
 80064a2:	4619      	mov	r1, r3
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f001 fbf6 	bl	8007c96 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	7b1b      	ldrb	r3, [r3, #12]
 80064ae:	4619      	mov	r1, r3
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f001 fc1e 	bl	8007cf2 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	7b5b      	ldrb	r3, [r3, #13]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00e      	beq.n	80064e2 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	7b5b      	ldrb	r3, [r3, #13]
 80064c8:	4619      	mov	r1, r3
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f001 fbe3 	bl	8007c96 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	7b5b      	ldrb	r3, [r3, #13]
 80064d4:	4619      	mov	r1, r3
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f001 fc0b 	bl	8007cf2 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80064e8:	69db      	ldr	r3, [r3, #28]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00b      	beq.n	8006506 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f002 fd50 	bl	8008f9c <free>
    phost->pActiveClass->pData = 0U;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006502:	2200      	movs	r2, #0
 8006504:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8006518:	2302      	movs	r3, #2
 800651a:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	3340      	adds	r3, #64	; 0x40
 800652a:	4619      	mov	r1, r3
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f8b2 	bl	8006696 <GetLineCoding>
 8006532:	4603      	mov	r3, r0
 8006534:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8006536:	7bfb      	ldrb	r3, [r7, #15]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d105      	bne.n	8006548 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006542:	2102      	movs	r1, #2
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	4798      	blx	r3
  }
  return status;
 8006548:	7bfb      	ldrb	r3, [r7, #15]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800655c:	2301      	movs	r3, #1
 800655e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006560:	2300      	movs	r3, #0
 8006562:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800656a:	69db      	ldr	r3, [r3, #28]
 800656c:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006574:	2b04      	cmp	r3, #4
 8006576:	d877      	bhi.n	8006668 <USBH_CDC_Process+0x114>
 8006578:	a201      	add	r2, pc, #4	; (adr r2, 8006580 <USBH_CDC_Process+0x2c>)
 800657a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657e:	bf00      	nop
 8006580:	08006595 	.word	0x08006595
 8006584:	0800659b 	.word	0x0800659b
 8006588:	080065cb 	.word	0x080065cb
 800658c:	0800663f 	.word	0x0800663f
 8006590:	0800664d 	.word	0x0800664d
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8006594:	2300      	movs	r3, #0
 8006596:	73fb      	strb	r3, [r7, #15]
    break;
 8006598:	e06d      	b.n	8006676 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800659e:	4619      	mov	r1, r3
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f897 	bl	80066d4 <SetLineCoding>
 80065a6:	4603      	mov	r3, r0
 80065a8:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80065aa:	7bbb      	ldrb	r3, [r7, #14]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d104      	bne.n	80065ba <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2202      	movs	r2, #2
 80065b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80065b8:	e058      	b.n	800666c <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 80065ba:	7bbb      	ldrb	r3, [r7, #14]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d055      	beq.n	800666c <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2204      	movs	r2, #4
 80065c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80065c8:	e050      	b.n	800666c <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	3340      	adds	r3, #64	; 0x40
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f860 	bl	8006696 <GetLineCoding>
 80065d6:	4603      	mov	r3, r0
 80065d8:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80065da:	7bbb      	ldrb	r3, [r7, #14]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d126      	bne.n	800662e <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065f2:	791b      	ldrb	r3, [r3, #4]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d13b      	bne.n	8006670 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006602:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006604:	429a      	cmp	r2, r3
 8006606:	d133      	bne.n	8006670 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006612:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006614:	429a      	cmp	r2, r3
 8006616:	d12b      	bne.n	8006670 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006620:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006622:	429a      	cmp	r2, r3
 8006624:	d124      	bne.n	8006670 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f95a 	bl	80068e0 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800662c:	e020      	b.n	8006670 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800662e:	7bbb      	ldrb	r3, [r7, #14]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d01d      	beq.n	8006670 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	2204      	movs	r2, #4
 8006638:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800663c:	e018      	b.n	8006670 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f867 	bl	8006712 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f8dc 	bl	8006802 <CDC_ProcessReception>
    break;
 800664a:	e014      	b.n	8006676 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 800664c:	2100      	movs	r1, #0
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fece 	bl	80073f0 <USBH_ClrFeature>
 8006654:	4603      	mov	r3, r0
 8006656:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8006658:	7bbb      	ldrb	r3, [r7, #14]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10a      	bne.n	8006674 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8006666:	e005      	b.n	8006674 <USBH_CDC_Process+0x120>

  default:
    break;
 8006668:	bf00      	nop
 800666a:	e004      	b.n	8006676 <USBH_CDC_Process+0x122>
    break;
 800666c:	bf00      	nop
 800666e:	e002      	b.n	8006676 <USBH_CDC_Process+0x122>
    break;
 8006670:	bf00      	nop
 8006672:	e000      	b.n	8006676 <USBH_CDC_Process+0x122>
    break;
 8006674:	bf00      	nop

  }

  return status;
 8006676:	7bfb      	ldrb	r3, [r7, #15]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr

08006696 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b082      	sub	sp, #8
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
 800669e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	22a1      	movs	r2, #161	; 0xa1
 80066a4:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2221      	movs	r2, #33	; 0x21
 80066aa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2207      	movs	r2, #7
 80066bc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	2207      	movs	r2, #7
 80066c2:	4619      	mov	r1, r3
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f001 f873 	bl	80077b0 <USBH_CtlReq>
 80066ca:	4603      	mov	r3, r0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2221      	movs	r2, #33	; 0x21
 80066e2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2220      	movs	r2, #32
 80066e8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2207      	movs	r2, #7
 80066fa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	2207      	movs	r2, #7
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f001 f854 	bl	80077b0 <USBH_CtlReq>
 8006708:	4603      	mov	r3, r0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b086      	sub	sp, #24
 8006716:	af02      	add	r7, sp, #8
 8006718:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006724:	2300      	movs	r3, #0
 8006726:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800672e:	2b01      	cmp	r3, #1
 8006730:	d002      	beq.n	8006738 <CDC_ProcessTransmission+0x26>
 8006732:	2b02      	cmp	r3, #2
 8006734:	d025      	beq.n	8006782 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8006736:	e060      	b.n	80067fa <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	8b12      	ldrh	r2, [r2, #24]
 8006740:	4293      	cmp	r3, r2
 8006742:	d90c      	bls.n	800675e <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	69d9      	ldr	r1, [r3, #28]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8b1a      	ldrh	r2, [r3, #24]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	7b58      	ldrb	r0, [r3, #13]
 8006750:	2301      	movs	r3, #1
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	4603      	mov	r3, r0
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f001 fa3b 	bl	8007bd2 <USBH_BulkSendData>
 800675c:	e00c      	b.n	8006778 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8006766:	b29a      	uxth	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	7b58      	ldrb	r0, [r3, #13]
 800676c:	2301      	movs	r3, #1
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	4603      	mov	r3, r0
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f001 fa2d 	bl	8007bd2 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2202      	movs	r2, #2
 800677c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006780:	e03b      	b.n	80067fa <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	7b5b      	ldrb	r3, [r3, #13]
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f002 fafb 	bl	8008d84 <USBH_LL_GetURBState>
 800678e:	4603      	mov	r3, r0
 8006790:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8006792:	7afb      	ldrb	r3, [r7, #11]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d128      	bne.n	80067ea <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	8b12      	ldrh	r2, [r2, #24]
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d90e      	bls.n	80067c2 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	8b12      	ldrh	r2, [r2, #24]
 80067ac:	1a9a      	subs	r2, r3, r2
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	8b12      	ldrh	r2, [r2, #24]
 80067ba:	441a      	add	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	61da      	str	r2, [r3, #28]
 80067c0:	e002      	b.n	80067c8 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d004      	beq.n	80067da <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80067d8:	e00e      	b.n	80067f8 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f868 	bl	80068b8 <USBH_CDC_TransmitCallback>
    break;
 80067e8:	e006      	b.n	80067f8 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 80067ea:	7afb      	ldrb	r3, [r7, #11]
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d103      	bne.n	80067f8 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80067f8:	bf00      	nop
  }
}
 80067fa:	bf00      	nop
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b086      	sub	sp, #24
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006814:	2300      	movs	r3, #0
 8006816:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800681e:	2b03      	cmp	r3, #3
 8006820:	d002      	beq.n	8006828 <CDC_ProcessReception+0x26>
 8006822:	2b04      	cmp	r3, #4
 8006824:	d00e      	beq.n	8006844 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8006826:	e043      	b.n	80068b0 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	6a19      	ldr	r1, [r3, #32]
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	8b5a      	ldrh	r2, [r3, #26]
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	7b1b      	ldrb	r3, [r3, #12]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f001 f9f1 	bl	8007c1c <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	2204      	movs	r2, #4
 800683e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006842:	e035      	b.n	80068b0 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	7b1b      	ldrb	r3, [r3, #12]
 8006848:	4619      	mov	r1, r3
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f002 fa9a 	bl	8008d84 <USBH_LL_GetURBState>
 8006850:	4603      	mov	r3, r0
 8006852:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8006854:	7cfb      	ldrb	r3, [r7, #19]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d129      	bne.n	80068ae <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	7b1b      	ldrb	r3, [r3, #12]
 800685e:	4619      	mov	r1, r3
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f002 f9fd 	bl	8008c60 <USBH_LL_GetLastXferSize>
 8006866:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	429a      	cmp	r2, r3
 8006870:	d016      	beq.n	80068a0 <CDC_ProcessReception+0x9e>
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	8b5b      	ldrh	r3, [r3, #26]
 8006876:	461a      	mov	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4293      	cmp	r3, r2
 800687c:	d910      	bls.n	80068a0 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	1ad2      	subs	r2, r2, r3
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	6a1a      	ldr	r2, [r3, #32]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	441a      	add	r2, r3
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	2203      	movs	r2, #3
 800689a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800689e:	e006      	b.n	80068ae <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f80f 	bl	80068cc <USBH_CDC_ReceiveCallback>
    break;
 80068ae:	bf00      	nop
  }
}
 80068b0:	bf00      	nop
 80068b2:	3718      	adds	r7, #24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]

}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]

}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]

}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	4613      	mov	r3, r2
 8006900:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006908:	2302      	movs	r3, #2
 800690a:	e019      	b.n	8006940 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	79fa      	ldrb	r2, [r7, #7]
 8006910:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 f80f 	bl	8006948 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d003      	beq.n	8006938 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f002 f8df 	bl	8008afc <USBH_LL_Init>

  return USBH_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006950:	2300      	movs	r3, #0
 8006952:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006954:	e008      	b.n	8006968 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	32e0      	adds	r2, #224	; 0xe0
 800695c:	2100      	movs	r1, #0
 800695e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3301      	adds	r3, #1
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2b0e      	cmp	r3, #14
 800696c:	d9f3      	bls.n	8006956 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800696e:	2300      	movs	r3, #0
 8006970:	60fb      	str	r3, [r7, #12]
 8006972:	e009      	b.n	8006988 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	4413      	add	r3, r2
 800697a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800697e:	2200      	movs	r2, #0
 8006980:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	3301      	adds	r3, #1
 8006986:	60fb      	str	r3, [r7, #12]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800698e:	d3f1      	bcc.n	8006974 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2240      	movs	r2, #64	; 0x40
 80069b4:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80069da:	b480      	push	{r7}
 80069dc:	b085      	sub	sp, #20
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d017      	beq.n	8006a1e <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10f      	bne.n	8006a18 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069fe:	1c59      	adds	r1, r3, #1
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	33dc      	adds	r3, #220	; 0xdc
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	683a      	ldr	r2, [r7, #0]
 8006a10:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	73fb      	strb	r3, [r7, #15]
 8006a16:	e004      	b.n	8006a22 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006a18:	2302      	movs	r3, #2
 8006a1a:	73fb      	strb	r3, [r7, #15]
 8006a1c:	e001      	b.n	8006a22 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006a1e:	2302      	movs	r3, #2
 8006a20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8006a46:	78fa      	ldrb	r2, [r7, #3]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d204      	bcs.n	8006a56 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	78fa      	ldrb	r2, [r7, #3]
 8006a50:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8006a54:	e001      	b.n	8006a5a <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006a56:	2302      	movs	r3, #2
 8006a58:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3714      	adds	r7, #20
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	4608      	mov	r0, r1
 8006a72:	4611      	mov	r1, r2
 8006a74:	461a      	mov	r2, r3
 8006a76:	4603      	mov	r3, r0
 8006a78:	70fb      	strb	r3, [r7, #3]
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	70bb      	strb	r3, [r7, #2]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006a86:	2300      	movs	r3, #0
 8006a88:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006a90:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006a92:	e025      	b.n	8006ae0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006a94:	7dfb      	ldrb	r3, [r7, #23]
 8006a96:	221a      	movs	r2, #26
 8006a98:	fb02 f303 	mul.w	r3, r2, r3
 8006a9c:	3308      	adds	r3, #8
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	3302      	adds	r3, #2
 8006aa4:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	795b      	ldrb	r3, [r3, #5]
 8006aaa:	78fa      	ldrb	r2, [r7, #3]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d002      	beq.n	8006ab6 <USBH_FindInterface+0x4e>
 8006ab0:	78fb      	ldrb	r3, [r7, #3]
 8006ab2:	2bff      	cmp	r3, #255	; 0xff
 8006ab4:	d111      	bne.n	8006ada <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006aba:	78ba      	ldrb	r2, [r7, #2]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d002      	beq.n	8006ac6 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006ac0:	78bb      	ldrb	r3, [r7, #2]
 8006ac2:	2bff      	cmp	r3, #255	; 0xff
 8006ac4:	d109      	bne.n	8006ada <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006aca:	787a      	ldrb	r2, [r7, #1]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d002      	beq.n	8006ad6 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006ad0:	787b      	ldrb	r3, [r7, #1]
 8006ad2:	2bff      	cmp	r3, #255	; 0xff
 8006ad4:	d101      	bne.n	8006ada <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006ad6:	7dfb      	ldrb	r3, [r7, #23]
 8006ad8:	e006      	b.n	8006ae8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006ada:	7dfb      	ldrb	r3, [r7, #23]
 8006adc:	3301      	adds	r3, #1
 8006ade:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006ae0:	7dfb      	ldrb	r3, [r7, #23]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d9d6      	bls.n	8006a94 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006ae6:	23ff      	movs	r3, #255	; 0xff
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	371c      	adds	r7, #28
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f002 f839 	bl	8008b74 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8006b02:	2101      	movs	r1, #1
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f002 f950 	bl	8008daa <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b088      	sub	sp, #32
 8006b18:	af04      	add	r7, sp, #16
 8006b1a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 faec 	bl	8007102 <USBH_IsPortEnabled>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10c      	bne.n	8006b4a <USBH_Process+0x36>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d007      	beq.n	8006b4a <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b03      	cmp	r3, #3
 8006b42:	d002      	beq.n	8006b4a <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2203      	movs	r2, #3
 8006b48:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b0b      	cmp	r3, #11
 8006b52:	f200 814c 	bhi.w	8006dee <USBH_Process+0x2da>
 8006b56:	a201      	add	r2, pc, #4	; (adr r2, 8006b5c <USBH_Process+0x48>)
 8006b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5c:	08006b8d 	.word	0x08006b8d
 8006b60:	08006baf 	.word	0x08006baf
 8006b64:	08006bc3 	.word	0x08006bc3
 8006b68:	08006dc9 	.word	0x08006dc9
 8006b6c:	08006def 	.word	0x08006def
 8006b70:	08006c51 	.word	0x08006c51
 8006b74:	08006d7f 	.word	0x08006d7f
 8006b78:	08006c81 	.word	0x08006c81
 8006b7c:	08006ca1 	.word	0x08006ca1
 8006b80:	08006cc1 	.word	0x08006cc1
 8006b84:	08006cef 	.word	0x08006cef
 8006b88:	08006db1 	.word	0x08006db1
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 812c 	beq.w	8006df2 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8006ba0:	20c8      	movs	r0, #200	; 0xc8
 8006ba2:	f002 f94c 	bl	8008e3e <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f002 f83f 	bl	8008c2a <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006bac:	e121      	b.n	8006df2 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	f040 811e 	bne.w	8006df6 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006bc0:	e119      	b.n	8006df6 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8006bc2:	2064      	movs	r0, #100	; 0x64
 8006bc4:	f002 f93b 	bl	8008e3e <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f002 f809 	bl	8008be0 <USBH_LL_GetSpeed>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2205      	movs	r2, #5
 8006bdc:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8006bde:	2100      	movs	r1, #0
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f001 f868 	bl	8007cb6 <USBH_AllocPipe>
 8006be6:	4603      	mov	r3, r0
 8006be8:	461a      	mov	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8006bee:	2180      	movs	r1, #128	; 0x80
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f001 f860 	bl	8007cb6 <USBH_AllocPipe>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	7919      	ldrb	r1, [r3, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006c12:	b292      	uxth	r2, r2
 8006c14:	9202      	str	r2, [sp, #8]
 8006c16:	2200      	movs	r2, #0
 8006c18:	9201      	str	r2, [sp, #4]
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2280      	movs	r2, #128	; 0x80
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 f819 	bl	8007c58 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	7959      	ldrb	r1, [r3, #5]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006c3a:	b292      	uxth	r2, r2
 8006c3c:	9202      	str	r2, [sp, #8]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	9201      	str	r2, [sp, #4]
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	4603      	mov	r3, r0
 8006c46:	2200      	movs	r2, #0
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f001 f805 	bl	8007c58 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006c4e:	e0e3      	b.n	8006e18 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f8e7 	bl	8006e24 <USBH_HandleEnum>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f040 80ce 	bne.w	8006dfa <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d103      	bne.n	8006c78 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2208      	movs	r2, #8
 8006c74:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8006c76:	e0c0      	b.n	8006dfa <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2207      	movs	r2, #7
 8006c7c:	701a      	strb	r2, [r3, #0]
    break;
 8006c7e:	e0bc      	b.n	8006dfa <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f000 80b9 	beq.w	8006dfe <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006c92:	2101      	movs	r1, #1
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2208      	movs	r2, #8
 8006c9c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006c9e:	e0ae      	b.n	8006dfe <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	4619      	mov	r1, r3
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fb59 	bl	8007362 <USBH_SetCfg>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f040 80a5 	bne.w	8006e02 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2209      	movs	r2, #9
 8006cbc:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006cbe:	e0a0      	b.n	8006e02 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8006cc6:	f003 0320 	and.w	r3, r3, #32
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00b      	beq.n	8006ce6 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006cce:	2101      	movs	r1, #1
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fb69 	bl	80073a8 <USBH_SetFeature>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f040 8094 	bne.w	8006e06 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	220a      	movs	r2, #10
 8006ce2:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006ce4:	e08f      	b.n	8006e06 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	220a      	movs	r2, #10
 8006cea:	701a      	strb	r2, [r3, #0]
    break;
 8006cec:	e08b      	b.n	8006e06 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 8088 	beq.w	8006e0a <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006d02:	2300      	movs	r3, #0
 8006d04:	73fb      	strb	r3, [r7, #15]
 8006d06:	e017      	b.n	8006d38 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	33dc      	adds	r3, #220	; 0xdc
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	791a      	ldrb	r2, [r3, #4]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d108      	bne.n	8006d32 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	33dc      	adds	r3, #220	; 0xdc
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006d32:	7bfb      	ldrb	r3, [r7, #15]
 8006d34:	3301      	adds	r3, #1
 8006d36:	73fb      	strb	r3, [r7, #15]
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d0e4      	beq.n	8006d08 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d016      	beq.n	8006d76 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	4798      	blx	r3
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d109      	bne.n	8006d6e <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2206      	movs	r2, #6
 8006d5e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006d66:	2103      	movs	r1, #3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006d6c:	e04d      	b.n	8006e0a <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	220d      	movs	r2, #13
 8006d72:	701a      	strb	r2, [r3, #0]
    break;
 8006d74:	e049      	b.n	8006e0a <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	220d      	movs	r2, #13
 8006d7a:	701a      	strb	r2, [r3, #0]
    break;
 8006d7c:	e045      	b.n	8006e0a <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00f      	beq.n	8006da8 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	4798      	blx	r3
 8006d94:	4603      	mov	r3, r0
 8006d96:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8006d98:	7bbb      	ldrb	r3, [r7, #14]
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d136      	bne.n	8006e0e <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	220b      	movs	r2, #11
 8006da4:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8006da6:	e032      	b.n	8006e0e <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	220d      	movs	r2, #13
 8006dac:	701a      	strb	r2, [r3, #0]
    break;
 8006dae:	e02e      	b.n	8006e0e <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d02b      	beq.n	8006e12 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	4798      	blx	r3
    }
    break;
 8006dc6:	e024      	b.n	8006e12 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f7ff fdbd 	bl	8006948 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d01e      	beq.n	8006e16 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8006dec:	e013      	b.n	8006e16 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8006dee:	bf00      	nop
 8006df0:	e012      	b.n	8006e18 <USBH_Process+0x304>
    break;
 8006df2:	bf00      	nop
 8006df4:	e010      	b.n	8006e18 <USBH_Process+0x304>
    break;
 8006df6:	bf00      	nop
 8006df8:	e00e      	b.n	8006e18 <USBH_Process+0x304>
    break;
 8006dfa:	bf00      	nop
 8006dfc:	e00c      	b.n	8006e18 <USBH_Process+0x304>
    break;
 8006dfe:	bf00      	nop
 8006e00:	e00a      	b.n	8006e18 <USBH_Process+0x304>
    break;
 8006e02:	bf00      	nop
 8006e04:	e008      	b.n	8006e18 <USBH_Process+0x304>
    break;
 8006e06:	bf00      	nop
 8006e08:	e006      	b.n	8006e18 <USBH_Process+0x304>
    break;
 8006e0a:	bf00      	nop
 8006e0c:	e004      	b.n	8006e18 <USBH_Process+0x304>
    break;
 8006e0e:	bf00      	nop
 8006e10:	e002      	b.n	8006e18 <USBH_Process+0x304>
    break;
 8006e12:	bf00      	nop
 8006e14:	e000      	b.n	8006e18 <USBH_Process+0x304>
    break;
 8006e16:	bf00      	nop
  }
 return USBH_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop

08006e24 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b088      	sub	sp, #32
 8006e28:	af04      	add	r7, sp, #16
 8006e2a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	785b      	ldrb	r3, [r3, #1]
 8006e34:	2b07      	cmp	r3, #7
 8006e36:	f200 80f8 	bhi.w	800702a <USBH_HandleEnum+0x206>
 8006e3a:	a201      	add	r2, pc, #4	; (adr r2, 8006e40 <USBH_HandleEnum+0x1c>)
 8006e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e40:	08006e61 	.word	0x08006e61
 8006e44:	08006ed3 	.word	0x08006ed3
 8006e48:	08006eeb 	.word	0x08006eeb
 8006e4c:	08006f61 	.word	0x08006f61
 8006e50:	08006f77 	.word	0x08006f77
 8006e54:	08006f93 	.word	0x08006f93
 8006e58:	08006fc7 	.word	0x08006fc7
 8006e5c:	08006ffb 	.word	0x08006ffb
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8006e60:	2108      	movs	r1, #8
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f9ad 	bl	80071c2 <USBH_Get_DevDesc>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f040 80df 	bne.w	800702e <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	7919      	ldrb	r1, [r3, #4]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006e94:	b292      	uxth	r2, r2
 8006e96:	9202      	str	r2, [sp, #8]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	9201      	str	r2, [sp, #4]
 8006e9c:	9300      	str	r3, [sp, #0]
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2280      	movs	r2, #128	; 0x80
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fed8 	bl	8007c58 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	7959      	ldrb	r1, [r3, #5]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006ebc:	b292      	uxth	r2, r2
 8006ebe:	9202      	str	r2, [sp, #8]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	9201      	str	r2, [sp, #4]
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2200      	movs	r2, #0
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fec4 	bl	8007c58 <USBH_OpenPipe>

    }
    break;
 8006ed0:	e0ad      	b.n	800702e <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8006ed2:	2112      	movs	r1, #18
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f974 	bl	80071c2 <USBH_Get_DevDesc>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f040 80a8 	bne.w	8007032 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	705a      	strb	r2, [r3, #1]

    }
    break;
 8006ee8:	e0a3      	b.n	8007032 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8006eea:	2101      	movs	r1, #1
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fa14 	bl	800731a <USBH_SetAddress>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f040 809e 	bne.w	8007036 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8006efa:	2002      	movs	r0, #2
 8006efc:	f001 ff9f 	bl	8008e3e <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2203      	movs	r2, #3
 8006f0c:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	7919      	ldrb	r1, [r3, #4]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006f22:	b292      	uxth	r2, r2
 8006f24:	9202      	str	r2, [sp, #8]
 8006f26:	2200      	movs	r2, #0
 8006f28:	9201      	str	r2, [sp, #4]
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2280      	movs	r2, #128	; 0x80
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fe91 	bl	8007c58 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	7959      	ldrb	r1, [r3, #5]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006f4a:	b292      	uxth	r2, r2
 8006f4c:	9202      	str	r2, [sp, #8]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	9201      	str	r2, [sp, #4]
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	4603      	mov	r3, r0
 8006f56:	2200      	movs	r2, #0
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 fe7d 	bl	8007c58 <USBH_OpenPipe>
    }
    break;
 8006f5e:	e06a      	b.n	8007036 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8006f60:	2109      	movs	r1, #9
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f955 	bl	8007212 <USBH_Get_CfgDesc>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d165      	bne.n	800703a <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2204      	movs	r2, #4
 8006f72:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006f74:	e061      	b.n	800703a <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f947 	bl	8007212 <USBH_Get_CfgDesc>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d159      	bne.n	800703e <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2205      	movs	r2, #5
 8006f8e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006f90:	e055      	b.n	800703e <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d010      	beq.n	8006fbe <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006fa8:	23ff      	movs	r3, #255	; 0xff
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f955 	bl	800725a <USBH_Get_StringDesc>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d145      	bne.n	8007042 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2206      	movs	r2, #6
 8006fba:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006fbc:	e041      	b.n	8007042 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2206      	movs	r2, #6
 8006fc2:	705a      	strb	r2, [r3, #1]
    break;
 8006fc4:	e03d      	b.n	8007042 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d010      	beq.n	8006ff2 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006fdc:	23ff      	movs	r3, #255	; 0xff
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f93b 	bl	800725a <USBH_Get_StringDesc>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d12d      	bne.n	8007046 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2207      	movs	r2, #7
 8006fee:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006ff0:	e029      	b.n	8007046 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2207      	movs	r2, #7
 8006ff6:	705a      	strb	r2, [r3, #1]
    break;
 8006ff8:	e025      	b.n	8007046 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00f      	beq.n	8007024 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007010:	23ff      	movs	r3, #255	; 0xff
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f921 	bl	800725a <USBH_Get_StringDesc>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d115      	bne.n	800704a <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800701e:	2300      	movs	r3, #0
 8007020:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007022:	e012      	b.n	800704a <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8007024:	2300      	movs	r3, #0
 8007026:	73fb      	strb	r3, [r7, #15]
    break;
 8007028:	e00f      	b.n	800704a <USBH_HandleEnum+0x226>

  default:
    break;
 800702a:	bf00      	nop
 800702c:	e00e      	b.n	800704c <USBH_HandleEnum+0x228>
    break;
 800702e:	bf00      	nop
 8007030:	e00c      	b.n	800704c <USBH_HandleEnum+0x228>
    break;
 8007032:	bf00      	nop
 8007034:	e00a      	b.n	800704c <USBH_HandleEnum+0x228>
    break;
 8007036:	bf00      	nop
 8007038:	e008      	b.n	800704c <USBH_HandleEnum+0x228>
    break;
 800703a:	bf00      	nop
 800703c:	e006      	b.n	800704c <USBH_HandleEnum+0x228>
    break;
 800703e:	bf00      	nop
 8007040:	e004      	b.n	800704c <USBH_HandleEnum+0x228>
    break;
 8007042:	bf00      	nop
 8007044:	e002      	b.n	800704c <USBH_HandleEnum+0x228>
    break;
 8007046:	bf00      	nop
 8007048:	e000      	b.n	800704c <USBH_HandleEnum+0x228>
    break;
 800704a:	bf00      	nop
  }
  return Status;
 800704c:	7bfb      	ldrb	r3, [r7, #15]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop

08007058 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	683a      	ldr	r2, [r7, #0]
 8007066:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800706a:	bf00      	nop
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b082      	sub	sp, #8
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007084:	1c5a      	adds	r2, r3, #1
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f804 	bl	800709a <USBH_HandleSof>
}
 8007092:	bf00      	nop
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b082      	sub	sp, #8
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b0b      	cmp	r3, #11
 80070aa:	d10a      	bne.n	80070c2 <USBH_HandleSof+0x28>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d005      	beq.n	80070c2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	4798      	blx	r3
  }
}
 80070c2:	bf00      	nop
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b083      	sub	sp, #12
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80070da:	bf00      	nop
}
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b083      	sub	sp, #12
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80070f6:	bf00      	nop
}
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr

08007102 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8007102:	b480      	push	{r7}
 8007104:	b083      	sub	sp, #12
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8007110:	4618      	mov	r0, r3
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10f      	bne.n	800714e <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00e      	beq.n	800715e <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007146:	2104      	movs	r1, #4
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	4798      	blx	r3
 800714c:	e007      	b.n	800715e <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007154:	2b01      	cmp	r3, #1
 8007156:	d102      	bne.n	800715e <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2202      	movs	r2, #2
 800715c:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f001 fd1a 	bl	8008baa <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	791b      	ldrb	r3, [r3, #4]
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fdb8 	bl	8007cf2 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	795b      	ldrb	r3, [r3, #5]
 8007186:	4619      	mov	r1, r3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 fdb2 	bl	8007cf2 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800719c:	2b00      	cmp	r3, #0
 800719e:	d005      	beq.n	80071ac <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80071a6:	2105      	movs	r1, #5
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 fce1 	bl	8008b74 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2203      	movs	r2, #3
 80071b6:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b086      	sub	sp, #24
 80071c6:	af02      	add	r7, sp, #8
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	460b      	mov	r3, r1
 80071cc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80071d4:	78fb      	ldrb	r3, [r7, #3]
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	4613      	mov	r3, r2
 80071dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071e0:	2100      	movs	r1, #0
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f864 	bl	80072b0 <USBH_GetDescriptor>
 80071e8:	4603      	mov	r3, r0
 80071ea:	73fb      	strb	r3, [r7, #15]
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10a      	bne.n	8007208 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f203 3022 	addw	r0, r3, #802	; 0x322
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80071fe:	78fa      	ldrb	r2, [r7, #3]
 8007200:	b292      	uxth	r2, r2
 8007202:	4619      	mov	r1, r3
 8007204:	f000 f918 	bl	8007438 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8007208:	7bfb      	ldrb	r3, [r7, #15]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8007212:	b580      	push	{r7, lr}
 8007214:	b086      	sub	sp, #24
 8007216:	af02      	add	r7, sp, #8
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	460b      	mov	r3, r1
 800721c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	331c      	adds	r3, #28
 8007222:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8007224:	887b      	ldrh	r3, [r7, #2]
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800722e:	2100      	movs	r1, #0
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f83d 	bl	80072b0 <USBH_GetDescriptor>
 8007236:	4603      	mov	r3, r0
 8007238:	72fb      	strb	r3, [r7, #11]
 800723a:	7afb      	ldrb	r3, [r7, #11]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d107      	bne.n	8007250 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007246:	887a      	ldrh	r2, [r7, #2]
 8007248:	68f9      	ldr	r1, [r7, #12]
 800724a:	4618      	mov	r0, r3
 800724c:	f000 f964 	bl	8007518 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8007250:	7afb      	ldrb	r3, [r7, #11]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b088      	sub	sp, #32
 800725e:	af02      	add	r7, sp, #8
 8007260:	60f8      	str	r0, [r7, #12]
 8007262:	607a      	str	r2, [r7, #4]
 8007264:	461a      	mov	r2, r3
 8007266:	460b      	mov	r3, r1
 8007268:	72fb      	strb	r3, [r7, #11]
 800726a:	4613      	mov	r3, r2
 800726c:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800726e:	7afb      	ldrb	r3, [r7, #11]
 8007270:	b29b      	uxth	r3, r3
 8007272:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007276:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800727e:	893b      	ldrh	r3, [r7, #8]
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	460b      	mov	r3, r1
 8007284:	2100      	movs	r1, #0
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f000 f812 	bl	80072b0 <USBH_GetDescriptor>
 800728c:	4603      	mov	r3, r0
 800728e:	75fb      	strb	r3, [r7, #23]
 8007290:	7dfb      	ldrb	r3, [r7, #23]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d107      	bne.n	80072a6 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800729c:	893a      	ldrh	r2, [r7, #8]
 800729e:	6879      	ldr	r1, [r7, #4]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 fa37 	bl	8007714 <USBH_ParseStringDesc>
  }
  return status;
 80072a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3718      	adds	r7, #24
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	607b      	str	r3, [r7, #4]
 80072ba:	460b      	mov	r3, r1
 80072bc:	72fb      	strb	r3, [r7, #11]
 80072be:	4613      	mov	r3, r2
 80072c0:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	789b      	ldrb	r3, [r3, #2]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d11c      	bne.n	8007304 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80072ca:	7afb      	ldrb	r3, [r7, #11]
 80072cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80072d0:	b2da      	uxtb	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2206      	movs	r2, #6
 80072da:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	893a      	ldrh	r2, [r7, #8]
 80072e0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80072e2:	893b      	ldrh	r3, [r7, #8]
 80072e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80072e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072ec:	d104      	bne.n	80072f8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f240 4209 	movw	r2, #1033	; 0x409
 80072f4:	829a      	strh	r2, [r3, #20]
 80072f6:	e002      	b.n	80072fe <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	8b3a      	ldrh	r2, [r7, #24]
 8007302:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8007304:	8b3b      	ldrh	r3, [r7, #24]
 8007306:	461a      	mov	r2, r3
 8007308:	6879      	ldr	r1, [r7, #4]
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f000 fa50 	bl	80077b0 <USBH_CtlReq>
 8007310:	4603      	mov	r3, r0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b082      	sub	sp, #8
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	460b      	mov	r3, r1
 8007324:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	789b      	ldrb	r3, [r3, #2]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d10f      	bne.n	800734e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2205      	movs	r2, #5
 8007338:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800733a:	78fb      	ldrb	r3, [r7, #3]
 800733c:	b29a      	uxth	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800734e:	2200      	movs	r2, #0
 8007350:	2100      	movs	r1, #0
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fa2c 	bl	80077b0 <USBH_CtlReq>
 8007358:	4603      	mov	r3, r0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b082      	sub	sp, #8
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	460b      	mov	r3, r1
 800736c:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	789b      	ldrb	r3, [r3, #2]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d10e      	bne.n	8007394 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2209      	movs	r2, #9
 8007380:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	887a      	ldrh	r2, [r7, #2]
 8007386:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8007394:	2200      	movs	r2, #0
 8007396:	2100      	movs	r1, #0
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fa09 	bl	80077b0 <USBH_CtlReq>
 800739e:	4603      	mov	r3, r0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	460b      	mov	r3, r1
 80073b2:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	789b      	ldrb	r3, [r3, #2]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d10f      	bne.n	80073dc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2203      	movs	r2, #3
 80073c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80073c8:	78fb      	ldrb	r3, [r7, #3]
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80073dc:	2200      	movs	r2, #0
 80073de:	2100      	movs	r1, #0
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f9e5 	bl	80077b0 <USBH_CtlReq>
 80073e6:	4603      	mov	r3, r0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	460b      	mov	r3, r1
 80073fa:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	789b      	ldrb	r3, [r3, #2]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d10f      	bne.n	8007424 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2202      	movs	r2, #2
 8007408:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007416:	78fb      	ldrb	r3, [r7, #3]
 8007418:	b29a      	uxth	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8007424:	2200      	movs	r2, #0
 8007426:	2100      	movs	r1, #0
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f9c1 	bl	80077b0 <USBH_CtlReq>
 800742e:	4603      	mov	r3, r0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	4613      	mov	r3, r2
 8007444:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	781a      	ldrb	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	785a      	ldrb	r2, [r3, #1]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	3302      	adds	r3, #2
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	b29a      	uxth	r2, r3
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	3303      	adds	r3, #3
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	b29b      	uxth	r3, r3
 8007466:	021b      	lsls	r3, r3, #8
 8007468:	b29b      	uxth	r3, r3
 800746a:	4313      	orrs	r3, r2
 800746c:	b29a      	uxth	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	791a      	ldrb	r2, [r3, #4]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	795a      	ldrb	r2, [r3, #5]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	799a      	ldrb	r2, [r3, #6]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	79da      	ldrb	r2, [r3, #7]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007492:	88fb      	ldrh	r3, [r7, #6]
 8007494:	2b08      	cmp	r3, #8
 8007496:	d939      	bls.n	800750c <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	3308      	adds	r3, #8
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	b29a      	uxth	r2, r3
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	3309      	adds	r3, #9
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	021b      	lsls	r3, r3, #8
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	4313      	orrs	r3, r2
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	330a      	adds	r3, #10
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	330b      	adds	r3, #11
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	021b      	lsls	r3, r3, #8
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	4313      	orrs	r3, r2
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	330c      	adds	r3, #12
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	330d      	adds	r3, #13
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	b29b      	uxth	r3, r3
 80074e0:	021b      	lsls	r3, r3, #8
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	4313      	orrs	r3, r2
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	7b9a      	ldrb	r2, [r3, #14]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	7bda      	ldrb	r2, [r3, #15]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	7c1a      	ldrb	r2, [r3, #16]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	7c5a      	ldrb	r2, [r3, #17]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	745a      	strb	r2, [r3, #17]
  }
}
 800750c:	bf00      	nop
 800750e:	3714      	adds	r7, #20
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b08a      	sub	sp, #40	; 0x28
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	4613      	mov	r3, r2
 8007524:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	781a      	ldrb	r2, [r3, #0]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	785a      	ldrb	r2, [r3, #1]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	3302      	adds	r3, #2
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	b29a      	uxth	r2, r3
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	3303      	adds	r3, #3
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	b29b      	uxth	r3, r3
 800755a:	021b      	lsls	r3, r3, #8
 800755c:	b29b      	uxth	r3, r3
 800755e:	4313      	orrs	r3, r2
 8007560:	b29a      	uxth	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	791a      	ldrb	r2, [r3, #4]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	795a      	ldrb	r2, [r3, #5]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	799a      	ldrb	r2, [r3, #6]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	79da      	ldrb	r2, [r3, #7]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	7a1a      	ldrb	r2, [r3, #8]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800758e:	88fb      	ldrh	r3, [r7, #6]
 8007590:	2b09      	cmp	r3, #9
 8007592:	d95f      	bls.n	8007654 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007594:	2309      	movs	r3, #9
 8007596:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007598:	2300      	movs	r3, #0
 800759a:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800759c:	e051      	b.n	8007642 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800759e:	f107 0316 	add.w	r3, r7, #22
 80075a2:	4619      	mov	r1, r3
 80075a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075a6:	f000 f8e8 	bl	800777a <USBH_GetNextDesc>
 80075aa:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80075ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ae:	785b      	ldrb	r3, [r3, #1]
 80075b0:	2b04      	cmp	r3, #4
 80075b2:	d146      	bne.n	8007642 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80075b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075b8:	221a      	movs	r2, #26
 80075ba:	fb02 f303 	mul.w	r3, r2, r3
 80075be:	3308      	adds	r3, #8
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	4413      	add	r3, r2
 80075c4:	3302      	adds	r3, #2
 80075c6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 80075c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075ca:	69f8      	ldr	r0, [r7, #28]
 80075cc:	f000 f846 	bl	800765c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80075d0:	2300      	movs	r3, #0
 80075d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80075d6:	2300      	movs	r3, #0
 80075d8:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80075da:	e022      	b.n	8007622 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 80075dc:	f107 0316 	add.w	r3, r7, #22
 80075e0:	4619      	mov	r1, r3
 80075e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075e4:	f000 f8c9 	bl	800777a <USBH_GetNextDesc>
 80075e8:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	785b      	ldrb	r3, [r3, #1]
 80075ee:	2b05      	cmp	r3, #5
 80075f0:	d117      	bne.n	8007622 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80075f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075f6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80075fa:	3201      	adds	r2, #1
 80075fc:	00d2      	lsls	r2, r2, #3
 80075fe:	211a      	movs	r1, #26
 8007600:	fb01 f303 	mul.w	r3, r1, r3
 8007604:	4413      	add	r3, r2
 8007606:	3308      	adds	r3, #8
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	4413      	add	r3, r2
 800760c:	3304      	adds	r3, #4
 800760e:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8007610:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007612:	69b8      	ldr	r0, [r7, #24]
 8007614:	f000 f851 	bl	80076ba <USBH_ParseEPDesc>
            ep_ix++;
 8007618:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800761c:	3301      	adds	r3, #1
 800761e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	791b      	ldrb	r3, [r3, #4]
 8007626:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800762a:	429a      	cmp	r2, r3
 800762c:	d204      	bcs.n	8007638 <USBH_ParseCfgDesc+0x120>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	885a      	ldrh	r2, [r3, #2]
 8007632:	8afb      	ldrh	r3, [r7, #22]
 8007634:	429a      	cmp	r2, r3
 8007636:	d8d1      	bhi.n	80075dc <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007638:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800763c:	3301      	adds	r3, #1
 800763e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007642:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007646:	2b01      	cmp	r3, #1
 8007648:	d804      	bhi.n	8007654 <USBH_ParseCfgDesc+0x13c>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	885a      	ldrh	r2, [r3, #2]
 800764e:	8afb      	ldrh	r3, [r7, #22]
 8007650:	429a      	cmp	r2, r3
 8007652:	d8a4      	bhi.n	800759e <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007654:	bf00      	nop
 8007656:	3728      	adds	r7, #40	; 0x28
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	781a      	ldrb	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	785a      	ldrb	r2, [r3, #1]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	789a      	ldrb	r2, [r3, #2]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	78da      	ldrb	r2, [r3, #3]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	791a      	ldrb	r2, [r3, #4]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	795a      	ldrb	r2, [r3, #5]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	799a      	ldrb	r2, [r3, #6]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	79da      	ldrb	r2, [r3, #7]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	7a1a      	ldrb	r2, [r3, #8]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	721a      	strb	r2, [r3, #8]
}
 80076ae:	bf00      	nop
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b083      	sub	sp, #12
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	781a      	ldrb	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	785a      	ldrb	r2, [r3, #1]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	789a      	ldrb	r2, [r3, #2]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	78da      	ldrb	r2, [r3, #3]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	3304      	adds	r3, #4
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	3305      	adds	r3, #5
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	021b      	lsls	r3, r3, #8
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	4313      	orrs	r3, r2
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	799a      	ldrb	r2, [r3, #6]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	719a      	strb	r2, [r3, #6]
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8007714:	b480      	push	{r7}
 8007716:	b087      	sub	sp, #28
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	4613      	mov	r3, r2
 8007720:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	3301      	adds	r3, #1
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	2b03      	cmp	r3, #3
 800772a:	d120      	bne.n	800776e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	1e9a      	subs	r2, r3, #2
 8007732:	88fb      	ldrh	r3, [r7, #6]
 8007734:	4293      	cmp	r3, r2
 8007736:	bf28      	it	cs
 8007738:	4613      	movcs	r3, r2
 800773a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	3302      	adds	r3, #2
 8007740:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007742:	2300      	movs	r3, #0
 8007744:	82fb      	strh	r3, [r7, #22]
 8007746:	e00b      	b.n	8007760 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007748:	8afb      	ldrh	r3, [r7, #22]
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	4413      	add	r3, r2
 800774e:	781a      	ldrb	r2, [r3, #0]
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	3301      	adds	r3, #1
 8007758:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800775a:	8afb      	ldrh	r3, [r7, #22]
 800775c:	3302      	adds	r3, #2
 800775e:	82fb      	strh	r3, [r7, #22]
 8007760:	8afa      	ldrh	r2, [r7, #22]
 8007762:	8abb      	ldrh	r3, [r7, #20]
 8007764:	429a      	cmp	r2, r3
 8007766:	d3ef      	bcc.n	8007748 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	2200      	movs	r2, #0
 800776c:	701a      	strb	r2, [r3, #0]
  }
}
 800776e:	bf00      	nop
 8007770:	371c      	adds	r7, #28
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr

0800777a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800777a:	b480      	push	{r7}
 800777c:	b085      	sub	sp, #20
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	881a      	ldrh	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	b29b      	uxth	r3, r3
 800778e:	4413      	add	r3, r2
 8007790:	b29a      	uxth	r2, r3
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4413      	add	r3, r2
 80077a0:	60fb      	str	r3, [r7, #12]

  return(pnext);
 80077a2:	68fb      	ldr	r3, [r7, #12]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	4613      	mov	r3, r2
 80077bc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80077be:	2301      	movs	r3, #1
 80077c0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	789b      	ldrb	r3, [r3, #2]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d002      	beq.n	80077d0 <USBH_CtlReq+0x20>
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d00f      	beq.n	80077ee <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 80077ce:	e034      	b.n	800783a <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	88fa      	ldrh	r2, [r7, #6]
 80077da:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2201      	movs	r2, #1
 80077e0:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2202      	movs	r2, #2
 80077e6:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 80077e8:	2301      	movs	r3, #1
 80077ea:	75fb      	strb	r3, [r7, #23]
    break;
 80077ec:	e025      	b.n	800783a <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f000 f828 	bl	8007844 <USBH_HandleControl>
 80077f4:	4603      	mov	r3, r0
 80077f6:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 80077f8:	7dfb      	ldrb	r3, [r7, #23]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d108      	bne.n	8007810 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2201      	movs	r2, #1
 8007802:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800780a:	2300      	movs	r3, #0
 800780c:	75fb      	strb	r3, [r7, #23]
    break;
 800780e:	e013      	b.n	8007838 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8007810:	7dfb      	ldrb	r3, [r7, #23]
 8007812:	2b03      	cmp	r3, #3
 8007814:	d108      	bne.n	8007828 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2201      	movs	r2, #1
 800781a:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007822:	2303      	movs	r3, #3
 8007824:	75fb      	strb	r3, [r7, #23]
    break;
 8007826:	e007      	b.n	8007838 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8007828:	7dfb      	ldrb	r3, [r7, #23]
 800782a:	2b02      	cmp	r3, #2
 800782c:	d104      	bne.n	8007838 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2201      	movs	r2, #1
 8007832:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8007834:	2302      	movs	r3, #2
 8007836:	75fb      	strb	r3, [r7, #23]
    break;
 8007838:	bf00      	nop
  }
  return status;
 800783a:	7dfb      	ldrb	r3, [r7, #23]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3718      	adds	r7, #24
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af02      	add	r7, sp, #8
 800784a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800784c:	2301      	movs	r3, #1
 800784e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007850:	2300      	movs	r3, #0
 8007852:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	7e1b      	ldrb	r3, [r3, #24]
 8007858:	3b01      	subs	r3, #1
 800785a:	2b0a      	cmp	r3, #10
 800785c:	f200 814c 	bhi.w	8007af8 <USBH_HandleControl+0x2b4>
 8007860:	a201      	add	r2, pc, #4	; (adr r2, 8007868 <USBH_HandleControl+0x24>)
 8007862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007866:	bf00      	nop
 8007868:	08007895 	.word	0x08007895
 800786c:	080078af 	.word	0x080078af
 8007870:	08007919 	.word	0x08007919
 8007874:	0800793f 	.word	0x0800793f
 8007878:	08007977 	.word	0x08007977
 800787c:	080079a3 	.word	0x080079a3
 8007880:	080079f5 	.word	0x080079f5
 8007884:	08007a17 	.word	0x08007a17
 8007888:	08007a53 	.word	0x08007a53
 800788c:	08007a7b 	.word	0x08007a7b
 8007890:	08007ab9 	.word	0x08007ab9
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f103 0110 	add.w	r1, r3, #16
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	795b      	ldrb	r3, [r3, #5]
 800789e:	461a      	mov	r2, r3
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f939 	bl	8007b18 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2202      	movs	r2, #2
 80078aa:	761a      	strb	r2, [r3, #24]
    break;
 80078ac:	e12f      	b.n	8007b0e <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	795b      	ldrb	r3, [r3, #5]
 80078b2:	4619      	mov	r1, r3
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f001 fa65 	bl	8008d84 <USBH_LL_GetURBState>
 80078ba:	4603      	mov	r3, r0
 80078bc:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 80078be:	7bbb      	ldrb	r3, [r7, #14]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d11e      	bne.n	8007902 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	7c1b      	ldrb	r3, [r3, #16]
 80078c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078cc:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	8adb      	ldrh	r3, [r3, #22]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00a      	beq.n	80078ec <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 80078d6:	7b7b      	ldrb	r3, [r7, #13]
 80078d8:	2b80      	cmp	r3, #128	; 0x80
 80078da:	d103      	bne.n	80078e4 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2203      	movs	r2, #3
 80078e0:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80078e2:	e10b      	b.n	8007afc <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2205      	movs	r2, #5
 80078e8:	761a      	strb	r2, [r3, #24]
    break;
 80078ea:	e107      	b.n	8007afc <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 80078ec:	7b7b      	ldrb	r3, [r7, #13]
 80078ee:	2b80      	cmp	r3, #128	; 0x80
 80078f0:	d103      	bne.n	80078fa <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2209      	movs	r2, #9
 80078f6:	761a      	strb	r2, [r3, #24]
    break;
 80078f8:	e100      	b.n	8007afc <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2207      	movs	r2, #7
 80078fe:	761a      	strb	r2, [r3, #24]
    break;
 8007900:	e0fc      	b.n	8007afc <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007902:	7bbb      	ldrb	r3, [r7, #14]
 8007904:	2b04      	cmp	r3, #4
 8007906:	d003      	beq.n	8007910 <USBH_HandleControl+0xcc>
 8007908:	7bbb      	ldrb	r3, [r7, #14]
 800790a:	2b02      	cmp	r3, #2
 800790c:	f040 80f6 	bne.w	8007afc <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	220b      	movs	r2, #11
 8007914:	761a      	strb	r2, [r3, #24]
    break;
 8007916:	e0f1      	b.n	8007afc <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800791e:	b29a      	uxth	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6899      	ldr	r1, [r3, #8]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	899a      	ldrh	r2, [r3, #12]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	791b      	ldrb	r3, [r3, #4]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f930 	bl	8007b96 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2204      	movs	r2, #4
 800793a:	761a      	strb	r2, [r3, #24]
    break;
 800793c:	e0e7      	b.n	8007b0e <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	791b      	ldrb	r3, [r3, #4]
 8007942:	4619      	mov	r1, r3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f001 fa1d 	bl	8008d84 <USBH_LL_GetURBState>
 800794a:	4603      	mov	r3, r0
 800794c:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d102      	bne.n	800795a <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2209      	movs	r2, #9
 8007958:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800795a:	7bbb      	ldrb	r3, [r7, #14]
 800795c:	2b05      	cmp	r3, #5
 800795e:	d102      	bne.n	8007966 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8007960:	2303      	movs	r3, #3
 8007962:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007964:	e0cc      	b.n	8007b00 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8007966:	7bbb      	ldrb	r3, [r7, #14]
 8007968:	2b04      	cmp	r3, #4
 800796a:	f040 80c9 	bne.w	8007b00 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	220b      	movs	r2, #11
 8007972:	761a      	strb	r2, [r3, #24]
    break;
 8007974:	e0c4      	b.n	8007b00 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6899      	ldr	r1, [r3, #8]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	899a      	ldrh	r2, [r3, #12]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	7958      	ldrb	r0, [r3, #5]
 8007982:	2301      	movs	r3, #1
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	4603      	mov	r3, r0
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f8df 	bl	8007b4c <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007994:	b29a      	uxth	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2206      	movs	r2, #6
 800799e:	761a      	strb	r2, [r3, #24]
    break;
 80079a0:	e0b5      	b.n	8007b0e <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	795b      	ldrb	r3, [r3, #5]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 f9eb 	bl	8008d84 <USBH_LL_GetURBState>
 80079ae:	4603      	mov	r3, r0
 80079b0:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 80079b2:	7bbb      	ldrb	r3, [r7, #14]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d103      	bne.n	80079c0 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2207      	movs	r2, #7
 80079bc:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80079be:	e0a1      	b.n	8007b04 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 80079c0:	7bbb      	ldrb	r3, [r7, #14]
 80079c2:	2b05      	cmp	r3, #5
 80079c4:	d105      	bne.n	80079d2 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	220c      	movs	r2, #12
 80079ca:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80079cc:	2303      	movs	r3, #3
 80079ce:	73fb      	strb	r3, [r7, #15]
    break;
 80079d0:	e098      	b.n	8007b04 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80079d2:	7bbb      	ldrb	r3, [r7, #14]
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d103      	bne.n	80079e0 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2205      	movs	r2, #5
 80079dc:	761a      	strb	r2, [r3, #24]
    break;
 80079de:	e091      	b.n	8007b04 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	f040 808e 	bne.w	8007b04 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	220b      	movs	r2, #11
 80079ec:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 80079ee:	2302      	movs	r3, #2
 80079f0:	73fb      	strb	r3, [r7, #15]
    break;
 80079f2:	e087      	b.n	8007b04 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	791b      	ldrb	r3, [r3, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	2100      	movs	r1, #0
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f8ca 	bl	8007b96 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2208      	movs	r2, #8
 8007a12:	761a      	strb	r2, [r3, #24]

    break;
 8007a14:	e07b      	b.n	8007b0e <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	791b      	ldrb	r3, [r3, #4]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f001 f9b1 	bl	8008d84 <USBH_LL_GetURBState>
 8007a22:	4603      	mov	r3, r0
 8007a24:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d105      	bne.n	8007a38 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	220d      	movs	r2, #13
 8007a30:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007a36:	e067      	b.n	8007b08 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	2b04      	cmp	r3, #4
 8007a3c:	d103      	bne.n	8007a46 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	220b      	movs	r2, #11
 8007a42:	761a      	strb	r2, [r3, #24]
    break;
 8007a44:	e060      	b.n	8007b08 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8007a46:	7bbb      	ldrb	r3, [r7, #14]
 8007a48:	2b05      	cmp	r3, #5
 8007a4a:	d15d      	bne.n	8007b08 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a50:	e05a      	b.n	8007b08 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	795a      	ldrb	r2, [r3, #5]
 8007a56:	2301      	movs	r3, #1
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	2100      	movs	r1, #0
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f873 	bl	8007b4c <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	220a      	movs	r2, #10
 8007a76:	761a      	strb	r2, [r3, #24]
    break;
 8007a78:	e049      	b.n	8007b0e <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	795b      	ldrb	r3, [r3, #5]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f001 f97f 	bl	8008d84 <USBH_LL_GetURBState>
 8007a86:	4603      	mov	r3, r0
 8007a88:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d105      	bne.n	8007a9c <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	220d      	movs	r2, #13
 8007a98:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8007a9a:	e037      	b.n	8007b0c <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007a9c:	7bbb      	ldrb	r3, [r7, #14]
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d103      	bne.n	8007aaa <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2209      	movs	r2, #9
 8007aa6:	761a      	strb	r2, [r3, #24]
    break;
 8007aa8:	e030      	b.n	8007b0c <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	2b04      	cmp	r3, #4
 8007aae:	d12d      	bne.n	8007b0c <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	220b      	movs	r2, #11
 8007ab4:	761a      	strb	r2, [r3, #24]
    break;
 8007ab6:	e029      	b.n	8007b0c <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	7e5b      	ldrb	r3, [r3, #25]
 8007abc:	3301      	adds	r3, #1
 8007abe:	b2da      	uxtb	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	765a      	strb	r2, [r3, #25]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	7e5b      	ldrb	r3, [r3, #25]
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d809      	bhi.n	8007ae0 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f001 f86c 	bl	8008baa <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8007ade:	e016      	b.n	8007b0e <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007ae6:	2106      	movs	r1, #6
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8007af2:	2302      	movs	r3, #2
 8007af4:	73fb      	strb	r3, [r7, #15]
    break;
 8007af6:	e00a      	b.n	8007b0e <USBH_HandleControl+0x2ca>

  default:
    break;
 8007af8:	bf00      	nop
 8007afa:	e008      	b.n	8007b0e <USBH_HandleControl+0x2ca>
    break;
 8007afc:	bf00      	nop
 8007afe:	e006      	b.n	8007b0e <USBH_HandleControl+0x2ca>
    break;
 8007b00:	bf00      	nop
 8007b02:	e004      	b.n	8007b0e <USBH_HandleControl+0x2ca>
    break;
 8007b04:	bf00      	nop
 8007b06:	e002      	b.n	8007b0e <USBH_HandleControl+0x2ca>
    break;
 8007b08:	bf00      	nop
 8007b0a:	e000      	b.n	8007b0e <USBH_HandleControl+0x2ca>
    break;
 8007b0c:	bf00      	nop
  }
  return status;
 8007b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b088      	sub	sp, #32
 8007b1c:	af04      	add	r7, sp, #16
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	4613      	mov	r3, r2
 8007b24:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007b26:	79f9      	ldrb	r1, [r7, #7]
 8007b28:	2300      	movs	r3, #0
 8007b2a:	9303      	str	r3, [sp, #12]
 8007b2c:	2308      	movs	r3, #8
 8007b2e:	9302      	str	r3, [sp, #8]
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	9301      	str	r3, [sp, #4]
 8007b34:	2300      	movs	r3, #0
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	2300      	movs	r3, #0
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f001 f8f0 	bl	8008d22 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3710      	adds	r7, #16
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b088      	sub	sp, #32
 8007b50:	af04      	add	r7, sp, #16
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	4611      	mov	r1, r2
 8007b58:	461a      	mov	r2, r3
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	80fb      	strh	r3, [r7, #6]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d001      	beq.n	8007b70 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007b70:	7979      	ldrb	r1, [r7, #5]
 8007b72:	7e3b      	ldrb	r3, [r7, #24]
 8007b74:	9303      	str	r3, [sp, #12]
 8007b76:	88fb      	ldrh	r3, [r7, #6]
 8007b78:	9302      	str	r3, [sp, #8]
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	9301      	str	r3, [sp, #4]
 8007b7e:	2301      	movs	r3, #1
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	2300      	movs	r3, #0
 8007b84:	2200      	movs	r2, #0
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f001 f8cb 	bl	8008d22 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b088      	sub	sp, #32
 8007b9a:	af04      	add	r7, sp, #16
 8007b9c:	60f8      	str	r0, [r7, #12]
 8007b9e:	60b9      	str	r1, [r7, #8]
 8007ba0:	4611      	mov	r1, r2
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	80fb      	strh	r3, [r7, #6]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007bac:	7979      	ldrb	r1, [r7, #5]
 8007bae:	2300      	movs	r3, #0
 8007bb0:	9303      	str	r3, [sp, #12]
 8007bb2:	88fb      	ldrh	r3, [r7, #6]
 8007bb4:	9302      	str	r3, [sp, #8]
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	9301      	str	r3, [sp, #4]
 8007bba:	2301      	movs	r3, #1
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f001 f8ad 	bl	8008d22 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007bc8:	2300      	movs	r3, #0

}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b088      	sub	sp, #32
 8007bd6:	af04      	add	r7, sp, #16
 8007bd8:	60f8      	str	r0, [r7, #12]
 8007bda:	60b9      	str	r1, [r7, #8]
 8007bdc:	4611      	mov	r1, r2
 8007bde:	461a      	mov	r2, r3
 8007be0:	460b      	mov	r3, r1
 8007be2:	80fb      	strh	r3, [r7, #6]
 8007be4:	4613      	mov	r3, r2
 8007be6:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007bf6:	7979      	ldrb	r1, [r7, #5]
 8007bf8:	7e3b      	ldrb	r3, [r7, #24]
 8007bfa:	9303      	str	r3, [sp, #12]
 8007bfc:	88fb      	ldrh	r3, [r7, #6]
 8007bfe:	9302      	str	r3, [sp, #8]
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	9301      	str	r3, [sp, #4]
 8007c04:	2301      	movs	r3, #1
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	2302      	movs	r3, #2
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f001 f888 	bl	8008d22 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b088      	sub	sp, #32
 8007c20:	af04      	add	r7, sp, #16
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	4611      	mov	r1, r2
 8007c28:	461a      	mov	r2, r3
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	80fb      	strh	r3, [r7, #6]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007c32:	7979      	ldrb	r1, [r7, #5]
 8007c34:	2300      	movs	r3, #0
 8007c36:	9303      	str	r3, [sp, #12]
 8007c38:	88fb      	ldrh	r3, [r7, #6]
 8007c3a:	9302      	str	r3, [sp, #8]
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	9301      	str	r3, [sp, #4]
 8007c40:	2301      	movs	r3, #1
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	2302      	movs	r3, #2
 8007c46:	2201      	movs	r2, #1
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f001 f86a 	bl	8008d22 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af04      	add	r7, sp, #16
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	4608      	mov	r0, r1
 8007c62:	4611      	mov	r1, r2
 8007c64:	461a      	mov	r2, r3
 8007c66:	4603      	mov	r3, r0
 8007c68:	70fb      	strb	r3, [r7, #3]
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	70bb      	strb	r3, [r7, #2]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8007c72:	7878      	ldrb	r0, [r7, #1]
 8007c74:	78ba      	ldrb	r2, [r7, #2]
 8007c76:	78f9      	ldrb	r1, [r7, #3]
 8007c78:	8b3b      	ldrh	r3, [r7, #24]
 8007c7a:	9302      	str	r3, [sp, #8]
 8007c7c:	7d3b      	ldrb	r3, [r7, #20]
 8007c7e:	9301      	str	r3, [sp, #4]
 8007c80:	7c3b      	ldrb	r3, [r7, #16]
 8007c82:	9300      	str	r3, [sp, #0]
 8007c84:	4603      	mov	r3, r0
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fffd 	bl	8008c86 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8007c8c:	2300      	movs	r3, #0

}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b082      	sub	sp, #8
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8007ca2:	78fb      	ldrb	r3, [r7, #3]
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f001 f81c 	bl	8008ce4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007cac:	2300      	movs	r3, #0

}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f831 	bl	8007d2a <USBH_GetFreePipe>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007ccc:	89fb      	ldrh	r3, [r7, #14]
 8007cce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d007      	beq.n	8007ce6 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8007cd6:	78fb      	ldrb	r3, [r7, #3]
 8007cd8:	89fa      	ldrh	r2, [r7, #14]
 8007cda:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	32e0      	adds	r2, #224	; 0xe0
 8007ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8007ce6:	89fb      	ldrh	r3, [r7, #14]
 8007ce8:	b2db      	uxtb	r3, r3
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b083      	sub	sp, #12
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8007cfe:	78fb      	ldrb	r3, [r7, #3]
 8007d00:	2b0a      	cmp	r3, #10
 8007d02:	d80b      	bhi.n	8007d1c <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8007d04:	78fa      	ldrb	r2, [r7, #3]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	32e0      	adds	r2, #224	; 0xe0
 8007d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d0e:	78fa      	ldrb	r2, [r7, #3]
 8007d10:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	32e0      	adds	r2, #224	; 0xe0
 8007d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr

08007d2a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	b085      	sub	sp, #20
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007d32:	2300      	movs	r3, #0
 8007d34:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007d36:	2300      	movs	r3, #0
 8007d38:	73fb      	strb	r3, [r7, #15]
 8007d3a:	e00e      	b.n	8007d5a <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007d3c:	7bfa      	ldrb	r2, [r7, #15]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	32e0      	adds	r2, #224	; 0xe0
 8007d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d102      	bne.n	8007d54 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	e007      	b.n	8007d64 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
 8007d56:	3301      	adds	r3, #1
 8007d58:	73fb      	strb	r3, [r7, #15]
 8007d5a:	7bfb      	ldrb	r3, [r7, #15]
 8007d5c:	2b0a      	cmp	r3, #10
 8007d5e:	d9ed      	bls.n	8007d3c <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8007d60:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3714      	adds	r7, #20
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007d76:	f7f8 fba7 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007d7a:	f000 f837 	bl	8007dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007d7e:	f000 fa39 	bl	80081f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8007d82:	f000 f8b5 	bl	8007ef0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8007d86:	f000 f8e1 	bl	8007f4c <MX_I2S3_Init>
  MX_SPI1_Init();
 8007d8a:	f000 f90f 	bl	8007fac <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8007d8e:	f000 fda1 	bl	80088d4 <MX_USB_HOST_Init>
  MX_TIM3_Init();
 8007d92:	f000 f941 	bl	8008018 <MX_TIM3_Init>
  MX_TIM4_Init();
 8007d96:	f000 f98d 	bl	80080b4 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8007d9a:	f000 fa01 	bl	80081a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8007d9e:	210c      	movs	r1, #12
 8007da0:	480e      	ldr	r0, [pc, #56]	; (8007ddc <main+0x6c>)
 8007da2:	f7fb ff8d 	bl	8003cc0 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8007da6:	f000 fdbb 	bl	8008920 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    //uint32_t sensor_time = hcsr04_read();
    //dist  = sensor_time * .034;
    HAL_Delay(200);
 8007daa:	20c8      	movs	r0, #200	; 0xc8
 8007dac:	f7f8 fbfe 	bl	80005ac <HAL_Delay>
    int i = sprintf(pData,"WORLD");
 8007db0:	4b0b      	ldr	r3, [pc, #44]	; (8007de0 <main+0x70>)
 8007db2:	4a0c      	ldr	r2, [pc, #48]	; (8007de4 <main+0x74>)
 8007db4:	6810      	ldr	r0, [r2, #0]
 8007db6:	6018      	str	r0, [r3, #0]
 8007db8:	8892      	ldrh	r2, [r2, #4]
 8007dba:	809a      	strh	r2, [r3, #4]
 8007dbc:	2305      	movs	r3, #5
 8007dbe:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart2, pData, i, 1000);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007dc8:	4905      	ldr	r1, [pc, #20]	; (8007de0 <main+0x70>)
 8007dca:	4807      	ldr	r0, [pc, #28]	; (8007de8 <main+0x78>)
 8007dcc:	f7fc fe5b 	bl	8004a86 <HAL_UART_Transmit>
    HAL_Delay(500);
 8007dd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007dd4:	f7f8 fbea 	bl	80005ac <HAL_Delay>
  {
 8007dd8:	e7e5      	b.n	8007da6 <main+0x36>
 8007dda:	bf00      	nop
 8007ddc:	200000c4 	.word	0x200000c4
 8007de0:	20000158 	.word	0x20000158
 8007de4:	0800914c 	.word	0x0800914c
 8007de8:	20000210 	.word	0x20000210

08007dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b098      	sub	sp, #96	; 0x60
 8007df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007df2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007df6:	2230      	movs	r2, #48	; 0x30
 8007df8:	2100      	movs	r1, #0
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f001 f8d6 	bl	8008fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007e00:	f107 031c 	add.w	r3, r7, #28
 8007e04:	2200      	movs	r2, #0
 8007e06:	601a      	str	r2, [r3, #0]
 8007e08:	605a      	str	r2, [r3, #4]
 8007e0a:	609a      	str	r2, [r3, #8]
 8007e0c:	60da      	str	r2, [r3, #12]
 8007e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007e10:	f107 030c 	add.w	r3, r7, #12
 8007e14:	2200      	movs	r2, #0
 8007e16:	601a      	str	r2, [r3, #0]
 8007e18:	605a      	str	r2, [r3, #4]
 8007e1a:	609a      	str	r2, [r3, #8]
 8007e1c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007e1e:	2300      	movs	r3, #0
 8007e20:	60bb      	str	r3, [r7, #8]
 8007e22:	4b31      	ldr	r3, [pc, #196]	; (8007ee8 <SystemClock_Config+0xfc>)
 8007e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e26:	4a30      	ldr	r2, [pc, #192]	; (8007ee8 <SystemClock_Config+0xfc>)
 8007e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8007e2e:	4b2e      	ldr	r3, [pc, #184]	; (8007ee8 <SystemClock_Config+0xfc>)
 8007e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e36:	60bb      	str	r3, [r7, #8]
 8007e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	607b      	str	r3, [r7, #4]
 8007e3e:	4b2b      	ldr	r3, [pc, #172]	; (8007eec <SystemClock_Config+0x100>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a2a      	ldr	r2, [pc, #168]	; (8007eec <SystemClock_Config+0x100>)
 8007e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e48:	6013      	str	r3, [r2, #0]
 8007e4a:	4b28      	ldr	r3, [pc, #160]	; (8007eec <SystemClock_Config+0x100>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e52:	607b      	str	r3, [r7, #4]
 8007e54:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007e56:	2301      	movs	r3, #1
 8007e58:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007e5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007e60:	2302      	movs	r3, #2
 8007e62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007e64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007e68:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007e6a:	2308      	movs	r3, #8
 8007e6c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8007e6e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8007e72:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007e74:	2302      	movs	r3, #2
 8007e76:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007e78:	2307      	movs	r3, #7
 8007e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007e7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7fb f8b9 	bl	8002ff8 <HAL_RCC_OscConfig>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d001      	beq.n	8007e90 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8007e8c:	f000 fab6 	bl	80083fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007e90:	230f      	movs	r3, #15
 8007e92:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007e94:	2302      	movs	r3, #2
 8007e96:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007e9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ea6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007ea8:	f107 031c 	add.w	r3, r7, #28
 8007eac:	2105      	movs	r1, #5
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fb fb12 	bl	80034d8 <HAL_RCC_ClockConfig>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d001      	beq.n	8007ebe <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8007eba:	f000 fa9f 	bl	80083fc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8007ec2:	23c0      	movs	r3, #192	; 0xc0
 8007ec4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8007ec6:	2302      	movs	r3, #2
 8007ec8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007eca:	f107 030c 	add.w	r3, r7, #12
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fb fcf4 	bl	80038bc <HAL_RCCEx_PeriphCLKConfig>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8007eda:	f000 fa8f 	bl	80083fc <Error_Handler>
  }
}
 8007ede:	bf00      	nop
 8007ee0:	3760      	adds	r7, #96	; 0x60
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	40023800 	.word	0x40023800
 8007eec:	40007000 	.word	0x40007000

08007ef0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007ef4:	4b12      	ldr	r3, [pc, #72]	; (8007f40 <MX_I2C1_Init+0x50>)
 8007ef6:	4a13      	ldr	r2, [pc, #76]	; (8007f44 <MX_I2C1_Init+0x54>)
 8007ef8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007efa:	4b11      	ldr	r3, [pc, #68]	; (8007f40 <MX_I2C1_Init+0x50>)
 8007efc:	4a12      	ldr	r2, [pc, #72]	; (8007f48 <MX_I2C1_Init+0x58>)
 8007efe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007f00:	4b0f      	ldr	r3, [pc, #60]	; (8007f40 <MX_I2C1_Init+0x50>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007f06:	4b0e      	ldr	r3, [pc, #56]	; (8007f40 <MX_I2C1_Init+0x50>)
 8007f08:	2200      	movs	r2, #0
 8007f0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007f0c:	4b0c      	ldr	r3, [pc, #48]	; (8007f40 <MX_I2C1_Init+0x50>)
 8007f0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007f12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007f14:	4b0a      	ldr	r3, [pc, #40]	; (8007f40 <MX_I2C1_Init+0x50>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007f1a:	4b09      	ldr	r3, [pc, #36]	; (8007f40 <MX_I2C1_Init+0x50>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007f20:	4b07      	ldr	r3, [pc, #28]	; (8007f40 <MX_I2C1_Init+0x50>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007f26:	4b06      	ldr	r3, [pc, #24]	; (8007f40 <MX_I2C1_Init+0x50>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007f2c:	4804      	ldr	r0, [pc, #16]	; (8007f40 <MX_I2C1_Init+0x50>)
 8007f2e:	f7fa fa8b 	bl	8002448 <HAL_I2C_Init>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007f38:	f000 fa60 	bl	80083fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007f3c:	bf00      	nop
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	20000104 	.word	0x20000104
 8007f44:	40005400 	.word	0x40005400
 8007f48:	000186a0 	.word	0x000186a0

08007f4c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8007f50:	4b13      	ldr	r3, [pc, #76]	; (8007fa0 <MX_I2S3_Init+0x54>)
 8007f52:	4a14      	ldr	r2, [pc, #80]	; (8007fa4 <MX_I2S3_Init+0x58>)
 8007f54:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8007f56:	4b12      	ldr	r3, [pc, #72]	; (8007fa0 <MX_I2S3_Init+0x54>)
 8007f58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f5c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8007f5e:	4b10      	ldr	r3, [pc, #64]	; (8007fa0 <MX_I2S3_Init+0x54>)
 8007f60:	2200      	movs	r2, #0
 8007f62:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8007f64:	4b0e      	ldr	r3, [pc, #56]	; (8007fa0 <MX_I2S3_Init+0x54>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8007f6a:	4b0d      	ldr	r3, [pc, #52]	; (8007fa0 <MX_I2S3_Init+0x54>)
 8007f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f70:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8007f72:	4b0b      	ldr	r3, [pc, #44]	; (8007fa0 <MX_I2S3_Init+0x54>)
 8007f74:	4a0c      	ldr	r2, [pc, #48]	; (8007fa8 <MX_I2S3_Init+0x5c>)
 8007f76:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8007f78:	4b09      	ldr	r3, [pc, #36]	; (8007fa0 <MX_I2S3_Init+0x54>)
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8007f7e:	4b08      	ldr	r3, [pc, #32]	; (8007fa0 <MX_I2S3_Init+0x54>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8007f84:	4b06      	ldr	r3, [pc, #24]	; (8007fa0 <MX_I2S3_Init+0x54>)
 8007f86:	2200      	movs	r2, #0
 8007f88:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8007f8a:	4805      	ldr	r0, [pc, #20]	; (8007fa0 <MX_I2S3_Init+0x54>)
 8007f8c:	f7fa fb94 	bl	80026b8 <HAL_I2S_Init>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d001      	beq.n	8007f9a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8007f96:	f000 fa31 	bl	80083fc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8007f9a:	bf00      	nop
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	20000250 	.word	0x20000250
 8007fa4:	40003c00 	.word	0x40003c00
 8007fa8:	00017700 	.word	0x00017700

08007fac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007fb0:	4b17      	ldr	r3, [pc, #92]	; (8008010 <MX_SPI1_Init+0x64>)
 8007fb2:	4a18      	ldr	r2, [pc, #96]	; (8008014 <MX_SPI1_Init+0x68>)
 8007fb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007fb6:	4b16      	ldr	r3, [pc, #88]	; (8008010 <MX_SPI1_Init+0x64>)
 8007fb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007fbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007fbe:	4b14      	ldr	r3, [pc, #80]	; (8008010 <MX_SPI1_Init+0x64>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007fc4:	4b12      	ldr	r3, [pc, #72]	; (8008010 <MX_SPI1_Init+0x64>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007fca:	4b11      	ldr	r3, [pc, #68]	; (8008010 <MX_SPI1_Init+0x64>)
 8007fcc:	2200      	movs	r2, #0
 8007fce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007fd0:	4b0f      	ldr	r3, [pc, #60]	; (8008010 <MX_SPI1_Init+0x64>)
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007fd6:	4b0e      	ldr	r3, [pc, #56]	; (8008010 <MX_SPI1_Init+0x64>)
 8007fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007fde:	4b0c      	ldr	r3, [pc, #48]	; (8008010 <MX_SPI1_Init+0x64>)
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007fe4:	4b0a      	ldr	r3, [pc, #40]	; (8008010 <MX_SPI1_Init+0x64>)
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007fea:	4b09      	ldr	r3, [pc, #36]	; (8008010 <MX_SPI1_Init+0x64>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ff0:	4b07      	ldr	r3, [pc, #28]	; (8008010 <MX_SPI1_Init+0x64>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8007ff6:	4b06      	ldr	r3, [pc, #24]	; (8008010 <MX_SPI1_Init+0x64>)
 8007ff8:	220a      	movs	r2, #10
 8007ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007ffc:	4804      	ldr	r0, [pc, #16]	; (8008010 <MX_SPI1_Init+0x64>)
 8007ffe:	f7fb fd9b 	bl	8003b38 <HAL_SPI_Init>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d001      	beq.n	800800c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8008008:	f000 f9f8 	bl	80083fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800800c:	bf00      	nop
 800800e:	bd80      	pop	{r7, pc}
 8008010:	200001b8 	.word	0x200001b8
 8008014:	40013000 	.word	0x40013000

08008018 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b086      	sub	sp, #24
 800801c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800801e:	f107 0308 	add.w	r3, r7, #8
 8008022:	2200      	movs	r2, #0
 8008024:	601a      	str	r2, [r3, #0]
 8008026:	605a      	str	r2, [r3, #4]
 8008028:	609a      	str	r2, [r3, #8]
 800802a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800802c:	463b      	mov	r3, r7
 800802e:	2200      	movs	r2, #0
 8008030:	601a      	str	r2, [r3, #0]
 8008032:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008034:	4b1d      	ldr	r3, [pc, #116]	; (80080ac <MX_TIM3_Init+0x94>)
 8008036:	4a1e      	ldr	r2, [pc, #120]	; (80080b0 <MX_TIM3_Init+0x98>)
 8008038:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 800803a:	4b1c      	ldr	r3, [pc, #112]	; (80080ac <MX_TIM3_Init+0x94>)
 800803c:	22a7      	movs	r2, #167	; 0xa7
 800803e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008040:	4b1a      	ldr	r3, [pc, #104]	; (80080ac <MX_TIM3_Init+0x94>)
 8008042:	2200      	movs	r2, #0
 8008044:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8008046:	4b19      	ldr	r3, [pc, #100]	; (80080ac <MX_TIM3_Init+0x94>)
 8008048:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800804c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800804e:	4b17      	ldr	r3, [pc, #92]	; (80080ac <MX_TIM3_Init+0x94>)
 8008050:	2200      	movs	r2, #0
 8008052:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008054:	4b15      	ldr	r3, [pc, #84]	; (80080ac <MX_TIM3_Init+0x94>)
 8008056:	2280      	movs	r2, #128	; 0x80
 8008058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800805a:	4814      	ldr	r0, [pc, #80]	; (80080ac <MX_TIM3_Init+0x94>)
 800805c:	f7fb fdd0 	bl	8003c00 <HAL_TIM_Base_Init>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8008066:	f000 f9c9 	bl	80083fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800806a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800806e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008070:	f107 0308 	add.w	r3, r7, #8
 8008074:	4619      	mov	r1, r3
 8008076:	480d      	ldr	r0, [pc, #52]	; (80080ac <MX_TIM3_Init+0x94>)
 8008078:	f7fc f82e 	bl	80040d8 <HAL_TIM_ConfigClockSource>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8008082:	f000 f9bb 	bl	80083fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008086:	2300      	movs	r3, #0
 8008088:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800808a:	2300      	movs	r3, #0
 800808c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800808e:	463b      	mov	r3, r7
 8008090:	4619      	mov	r1, r3
 8008092:	4806      	ldr	r0, [pc, #24]	; (80080ac <MX_TIM3_Init+0x94>)
 8008094:	f7fc fc1a 	bl	80048cc <HAL_TIMEx_MasterConfigSynchronization>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800809e:	f000 f9ad 	bl	80083fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80080a2:	bf00      	nop
 80080a4:	3718      	adds	r7, #24
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	20000178 	.word	0x20000178
 80080b0:	40000400 	.word	0x40000400

080080b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b08e      	sub	sp, #56	; 0x38
 80080b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80080ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80080be:	2200      	movs	r2, #0
 80080c0:	601a      	str	r2, [r3, #0]
 80080c2:	605a      	str	r2, [r3, #4]
 80080c4:	609a      	str	r2, [r3, #8]
 80080c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80080c8:	f107 0320 	add.w	r3, r7, #32
 80080cc:	2200      	movs	r2, #0
 80080ce:	601a      	str	r2, [r3, #0]
 80080d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80080d2:	1d3b      	adds	r3, r7, #4
 80080d4:	2200      	movs	r2, #0
 80080d6:	601a      	str	r2, [r3, #0]
 80080d8:	605a      	str	r2, [r3, #4]
 80080da:	609a      	str	r2, [r3, #8]
 80080dc:	60da      	str	r2, [r3, #12]
 80080de:	611a      	str	r2, [r3, #16]
 80080e0:	615a      	str	r2, [r3, #20]
 80080e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80080e4:	4b2c      	ldr	r3, [pc, #176]	; (8008198 <MX_TIM4_Init+0xe4>)
 80080e6:	4a2d      	ldr	r2, [pc, #180]	; (800819c <MX_TIM4_Init+0xe8>)
 80080e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 167;
 80080ea:	4b2b      	ldr	r3, [pc, #172]	; (8008198 <MX_TIM4_Init+0xe4>)
 80080ec:	22a7      	movs	r2, #167	; 0xa7
 80080ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080f0:	4b29      	ldr	r3, [pc, #164]	; (8008198 <MX_TIM4_Init+0xe4>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80080f6:	4b28      	ldr	r3, [pc, #160]	; (8008198 <MX_TIM4_Init+0xe4>)
 80080f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80080fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080fe:	4b26      	ldr	r3, [pc, #152]	; (8008198 <MX_TIM4_Init+0xe4>)
 8008100:	2200      	movs	r2, #0
 8008102:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008104:	4b24      	ldr	r3, [pc, #144]	; (8008198 <MX_TIM4_Init+0xe4>)
 8008106:	2280      	movs	r2, #128	; 0x80
 8008108:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800810a:	4823      	ldr	r0, [pc, #140]	; (8008198 <MX_TIM4_Init+0xe4>)
 800810c:	f7fb fd78 	bl	8003c00 <HAL_TIM_Base_Init>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d001      	beq.n	800811a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8008116:	f000 f971 	bl	80083fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800811a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800811e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8008120:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008124:	4619      	mov	r1, r3
 8008126:	481c      	ldr	r0, [pc, #112]	; (8008198 <MX_TIM4_Init+0xe4>)
 8008128:	f7fb ffd6 	bl	80040d8 <HAL_TIM_ConfigClockSource>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d001      	beq.n	8008136 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8008132:	f000 f963 	bl	80083fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8008136:	4818      	ldr	r0, [pc, #96]	; (8008198 <MX_TIM4_Init+0xe4>)
 8008138:	f7fb fd8d 	bl	8003c56 <HAL_TIM_PWM_Init>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8008142:	f000 f95b 	bl	80083fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008146:	2300      	movs	r3, #0
 8008148:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800814a:	2300      	movs	r3, #0
 800814c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800814e:	f107 0320 	add.w	r3, r7, #32
 8008152:	4619      	mov	r1, r3
 8008154:	4810      	ldr	r0, [pc, #64]	; (8008198 <MX_TIM4_Init+0xe4>)
 8008156:	f7fc fbb9 	bl	80048cc <HAL_TIMEx_MasterConfigSynchronization>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d001      	beq.n	8008164 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8008160:	f000 f94c 	bl	80083fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008164:	2360      	movs	r3, #96	; 0x60
 8008166:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008168:	2300      	movs	r3, #0
 800816a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800816c:	2300      	movs	r3, #0
 800816e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008170:	2300      	movs	r3, #0
 8008172:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008174:	1d3b      	adds	r3, r7, #4
 8008176:	220c      	movs	r2, #12
 8008178:	4619      	mov	r1, r3
 800817a:	4807      	ldr	r0, [pc, #28]	; (8008198 <MX_TIM4_Init+0xe4>)
 800817c:	f7fb fee6 	bl	8003f4c <HAL_TIM_PWM_ConfigChannel>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8008186:	f000 f939 	bl	80083fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800818a:	4803      	ldr	r0, [pc, #12]	; (8008198 <MX_TIM4_Init+0xe4>)
 800818c:	f000 fa9c 	bl	80086c8 <HAL_TIM_MspPostInit>

}
 8008190:	bf00      	nop
 8008192:	3738      	adds	r7, #56	; 0x38
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	200000c4 	.word	0x200000c4
 800819c:	40000800 	.word	0x40000800

080081a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80081a4:	4b11      	ldr	r3, [pc, #68]	; (80081ec <MX_USART2_UART_Init+0x4c>)
 80081a6:	4a12      	ldr	r2, [pc, #72]	; (80081f0 <MX_USART2_UART_Init+0x50>)
 80081a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80081aa:	4b10      	ldr	r3, [pc, #64]	; (80081ec <MX_USART2_UART_Init+0x4c>)
 80081ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80081b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80081b2:	4b0e      	ldr	r3, [pc, #56]	; (80081ec <MX_USART2_UART_Init+0x4c>)
 80081b4:	2200      	movs	r2, #0
 80081b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80081b8:	4b0c      	ldr	r3, [pc, #48]	; (80081ec <MX_USART2_UART_Init+0x4c>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80081be:	4b0b      	ldr	r3, [pc, #44]	; (80081ec <MX_USART2_UART_Init+0x4c>)
 80081c0:	2200      	movs	r2, #0
 80081c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80081c4:	4b09      	ldr	r3, [pc, #36]	; (80081ec <MX_USART2_UART_Init+0x4c>)
 80081c6:	220c      	movs	r2, #12
 80081c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80081ca:	4b08      	ldr	r3, [pc, #32]	; (80081ec <MX_USART2_UART_Init+0x4c>)
 80081cc:	2200      	movs	r2, #0
 80081ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80081d0:	4b06      	ldr	r3, [pc, #24]	; (80081ec <MX_USART2_UART_Init+0x4c>)
 80081d2:	2200      	movs	r2, #0
 80081d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80081d6:	4805      	ldr	r0, [pc, #20]	; (80081ec <MX_USART2_UART_Init+0x4c>)
 80081d8:	f7fc fc08 	bl	80049ec <HAL_UART_Init>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d001      	beq.n	80081e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80081e2:	f000 f90b 	bl	80083fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80081e6:	bf00      	nop
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	20000210 	.word	0x20000210
 80081f0:	40004400 	.word	0x40004400

080081f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b08c      	sub	sp, #48	; 0x30
 80081f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081fa:	f107 031c 	add.w	r3, r7, #28
 80081fe:	2200      	movs	r2, #0
 8008200:	601a      	str	r2, [r3, #0]
 8008202:	605a      	str	r2, [r3, #4]
 8008204:	609a      	str	r2, [r3, #8]
 8008206:	60da      	str	r2, [r3, #12]
 8008208:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800820a:	2300      	movs	r3, #0
 800820c:	61bb      	str	r3, [r7, #24]
 800820e:	4b74      	ldr	r3, [pc, #464]	; (80083e0 <MX_GPIO_Init+0x1ec>)
 8008210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008212:	4a73      	ldr	r2, [pc, #460]	; (80083e0 <MX_GPIO_Init+0x1ec>)
 8008214:	f043 0310 	orr.w	r3, r3, #16
 8008218:	6313      	str	r3, [r2, #48]	; 0x30
 800821a:	4b71      	ldr	r3, [pc, #452]	; (80083e0 <MX_GPIO_Init+0x1ec>)
 800821c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821e:	f003 0310 	and.w	r3, r3, #16
 8008222:	61bb      	str	r3, [r7, #24]
 8008224:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008226:	2300      	movs	r3, #0
 8008228:	617b      	str	r3, [r7, #20]
 800822a:	4b6d      	ldr	r3, [pc, #436]	; (80083e0 <MX_GPIO_Init+0x1ec>)
 800822c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800822e:	4a6c      	ldr	r2, [pc, #432]	; (80083e0 <MX_GPIO_Init+0x1ec>)
 8008230:	f043 0304 	orr.w	r3, r3, #4
 8008234:	6313      	str	r3, [r2, #48]	; 0x30
 8008236:	4b6a      	ldr	r3, [pc, #424]	; (80083e0 <MX_GPIO_Init+0x1ec>)
 8008238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823a:	f003 0304 	and.w	r3, r3, #4
 800823e:	617b      	str	r3, [r7, #20]
 8008240:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008242:	2300      	movs	r3, #0
 8008244:	613b      	str	r3, [r7, #16]
 8008246:	4b66      	ldr	r3, [pc, #408]	; (80083e0 <MX_GPIO_Init+0x1ec>)
 8008248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800824a:	4a65      	ldr	r2, [pc, #404]	; (80083e0 <MX_GPIO_Init+0x1ec>)
 800824c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008250:	6313      	str	r3, [r2, #48]	; 0x30
 8008252:	4b63      	ldr	r3, [pc, #396]	; (80083e0 <MX_GPIO_Init+0x1ec>)
 8008254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800825a:	613b      	str	r3, [r7, #16]
 800825c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800825e:	2300      	movs	r3, #0
 8008260:	60fb      	str	r3, [r7, #12]
 8008262:	4b5f      	ldr	r3, [pc, #380]	; (80083e0 <MX_GPIO_Init+0x1ec>)
 8008264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008266:	4a5e      	ldr	r2, [pc, #376]	; (80083e0 <MX_GPIO_Init+0x1ec>)
 8008268:	f043 0301 	orr.w	r3, r3, #1
 800826c:	6313      	str	r3, [r2, #48]	; 0x30
 800826e:	4b5c      	ldr	r3, [pc, #368]	; (80083e0 <MX_GPIO_Init+0x1ec>)
 8008270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008272:	f003 0301 	and.w	r3, r3, #1
 8008276:	60fb      	str	r3, [r7, #12]
 8008278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800827a:	2300      	movs	r3, #0
 800827c:	60bb      	str	r3, [r7, #8]
 800827e:	4b58      	ldr	r3, [pc, #352]	; (80083e0 <MX_GPIO_Init+0x1ec>)
 8008280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008282:	4a57      	ldr	r2, [pc, #348]	; (80083e0 <MX_GPIO_Init+0x1ec>)
 8008284:	f043 0302 	orr.w	r3, r3, #2
 8008288:	6313      	str	r3, [r2, #48]	; 0x30
 800828a:	4b55      	ldr	r3, [pc, #340]	; (80083e0 <MX_GPIO_Init+0x1ec>)
 800828c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828e:	f003 0302 	and.w	r3, r3, #2
 8008292:	60bb      	str	r3, [r7, #8]
 8008294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008296:	2300      	movs	r3, #0
 8008298:	607b      	str	r3, [r7, #4]
 800829a:	4b51      	ldr	r3, [pc, #324]	; (80083e0 <MX_GPIO_Init+0x1ec>)
 800829c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829e:	4a50      	ldr	r2, [pc, #320]	; (80083e0 <MX_GPIO_Init+0x1ec>)
 80082a0:	f043 0308 	orr.w	r3, r3, #8
 80082a4:	6313      	str	r3, [r2, #48]	; 0x30
 80082a6:	4b4e      	ldr	r3, [pc, #312]	; (80083e0 <MX_GPIO_Init+0x1ec>)
 80082a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082aa:	f003 0308 	and.w	r3, r3, #8
 80082ae:	607b      	str	r3, [r7, #4]
 80082b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80082b2:	2200      	movs	r2, #0
 80082b4:	2108      	movs	r1, #8
 80082b6:	484b      	ldr	r0, [pc, #300]	; (80083e4 <MX_GPIO_Init+0x1f0>)
 80082b8:	f7f8 fc46 	bl	8000b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80082bc:	2201      	movs	r2, #1
 80082be:	2101      	movs	r1, #1
 80082c0:	4849      	ldr	r0, [pc, #292]	; (80083e8 <MX_GPIO_Init+0x1f4>)
 80082c2:	f7f8 fc41 	bl	8000b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|Audio_RST_Pin, GPIO_PIN_RESET);
 80082c6:	2200      	movs	r2, #0
 80082c8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80082cc:	4847      	ldr	r0, [pc, #284]	; (80083ec <MX_GPIO_Init+0x1f8>)
 80082ce:	f7f8 fc3b 	bl	8000b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80082d2:	2200      	movs	r2, #0
 80082d4:	2140      	movs	r1, #64	; 0x40
 80082d6:	4844      	ldr	r0, [pc, #272]	; (80083e8 <MX_GPIO_Init+0x1f4>)
 80082d8:	f7f8 fc36 	bl	8000b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80082dc:	2308      	movs	r3, #8
 80082de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082e0:	2301      	movs	r3, #1
 80082e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082e4:	2300      	movs	r3, #0
 80082e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082e8:	2300      	movs	r3, #0
 80082ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80082ec:	f107 031c 	add.w	r3, r7, #28
 80082f0:	4619      	mov	r1, r3
 80082f2:	483c      	ldr	r0, [pc, #240]	; (80083e4 <MX_GPIO_Init+0x1f0>)
 80082f4:	f7f8 fa8e 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC6 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_6;
 80082f8:	2341      	movs	r3, #65	; 0x41
 80082fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082fc:	2301      	movs	r3, #1
 80082fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008300:	2300      	movs	r3, #0
 8008302:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008304:	2300      	movs	r3, #0
 8008306:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008308:	f107 031c 	add.w	r3, r7, #28
 800830c:	4619      	mov	r1, r3
 800830e:	4836      	ldr	r0, [pc, #216]	; (80083e8 <MX_GPIO_Init+0x1f4>)
 8008310:	f7f8 fa80 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8008314:	2308      	movs	r3, #8
 8008316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008318:	2302      	movs	r3, #2
 800831a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800831c:	2300      	movs	r3, #0
 800831e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008320:	2300      	movs	r3, #0
 8008322:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008324:	2305      	movs	r3, #5
 8008326:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8008328:	f107 031c 	add.w	r3, r7, #28
 800832c:	4619      	mov	r1, r3
 800832e:	482e      	ldr	r0, [pc, #184]	; (80083e8 <MX_GPIO_Init+0x1f4>)
 8008330:	f7f8 fa70 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8008334:	2301      	movs	r3, #1
 8008336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008338:	4b2d      	ldr	r3, [pc, #180]	; (80083f0 <MX_GPIO_Init+0x1fc>)
 800833a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800833c:	2300      	movs	r3, #0
 800833e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008340:	f107 031c 	add.w	r3, r7, #28
 8008344:	4619      	mov	r1, r3
 8008346:	482b      	ldr	r0, [pc, #172]	; (80083f4 <MX_GPIO_Init+0x200>)
 8008348:	f7f8 fa64 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800834c:	2304      	movs	r3, #4
 800834e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008350:	2300      	movs	r3, #0
 8008352:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008354:	2300      	movs	r3, #0
 8008356:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8008358:	f107 031c 	add.w	r3, r7, #28
 800835c:	4619      	mov	r1, r3
 800835e:	4826      	ldr	r0, [pc, #152]	; (80083f8 <MX_GPIO_Init+0x204>)
 8008360:	f7f8 fa58 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8008364:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800836a:	2302      	movs	r3, #2
 800836c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800836e:	2300      	movs	r3, #0
 8008370:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008372:	2300      	movs	r3, #0
 8008374:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008376:	2305      	movs	r3, #5
 8008378:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800837a:	f107 031c 	add.w	r3, r7, #28
 800837e:	4619      	mov	r1, r3
 8008380:	481d      	ldr	r0, [pc, #116]	; (80083f8 <MX_GPIO_Init+0x204>)
 8008382:	f7f8 fa47 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|OTG_FS_OverCurrent_Pin;
 8008386:	f44f 7390 	mov.w	r3, #288	; 0x120
 800838a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800838c:	2300      	movs	r3, #0
 800838e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008390:	2300      	movs	r3, #0
 8008392:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008394:	f107 031c 	add.w	r3, r7, #28
 8008398:	4619      	mov	r1, r3
 800839a:	4814      	ldr	r0, [pc, #80]	; (80083ec <MX_GPIO_Init+0x1f8>)
 800839c:	f7f8 fa3a 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|Audio_RST_Pin;
 80083a0:	f44f 7304 	mov.w	r3, #528	; 0x210
 80083a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80083a6:	2301      	movs	r3, #1
 80083a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083aa:	2300      	movs	r3, #0
 80083ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083ae:	2300      	movs	r3, #0
 80083b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80083b2:	f107 031c 	add.w	r3, r7, #28
 80083b6:	4619      	mov	r1, r3
 80083b8:	480c      	ldr	r0, [pc, #48]	; (80083ec <MX_GPIO_Init+0x1f8>)
 80083ba:	f7f8 fa2b 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80083be:	2302      	movs	r3, #2
 80083c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80083c2:	4b0b      	ldr	r3, [pc, #44]	; (80083f0 <MX_GPIO_Init+0x1fc>)
 80083c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083c6:	2300      	movs	r3, #0
 80083c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80083ca:	f107 031c 	add.w	r3, r7, #28
 80083ce:	4619      	mov	r1, r3
 80083d0:	4804      	ldr	r0, [pc, #16]	; (80083e4 <MX_GPIO_Init+0x1f0>)
 80083d2:	f7f8 fa1f 	bl	8000814 <HAL_GPIO_Init>

}
 80083d6:	bf00      	nop
 80083d8:	3730      	adds	r7, #48	; 0x30
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	40023800 	.word	0x40023800
 80083e4:	40021000 	.word	0x40021000
 80083e8:	40020800 	.word	0x40020800
 80083ec:	40020c00 	.word	0x40020c00
 80083f0:	10120000 	.word	0x10120000
 80083f4:	40020000 	.word	0x40020000
 80083f8:	40020400 	.word	0x40020400

080083fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80083fc:	b480      	push	{r7}
 80083fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008400:	bf00      	nop
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
	...

0800840c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008412:	2300      	movs	r3, #0
 8008414:	607b      	str	r3, [r7, #4]
 8008416:	4b10      	ldr	r3, [pc, #64]	; (8008458 <HAL_MspInit+0x4c>)
 8008418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800841a:	4a0f      	ldr	r2, [pc, #60]	; (8008458 <HAL_MspInit+0x4c>)
 800841c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008420:	6453      	str	r3, [r2, #68]	; 0x44
 8008422:	4b0d      	ldr	r3, [pc, #52]	; (8008458 <HAL_MspInit+0x4c>)
 8008424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800842a:	607b      	str	r3, [r7, #4]
 800842c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800842e:	2300      	movs	r3, #0
 8008430:	603b      	str	r3, [r7, #0]
 8008432:	4b09      	ldr	r3, [pc, #36]	; (8008458 <HAL_MspInit+0x4c>)
 8008434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008436:	4a08      	ldr	r2, [pc, #32]	; (8008458 <HAL_MspInit+0x4c>)
 8008438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800843c:	6413      	str	r3, [r2, #64]	; 0x40
 800843e:	4b06      	ldr	r3, [pc, #24]	; (8008458 <HAL_MspInit+0x4c>)
 8008440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008446:	603b      	str	r3, [r7, #0]
 8008448:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800844a:	2007      	movs	r0, #7
 800844c:	f7f8 f9a0 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008450:	bf00      	nop
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	40023800 	.word	0x40023800

0800845c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b08a      	sub	sp, #40	; 0x28
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008464:	f107 0314 	add.w	r3, r7, #20
 8008468:	2200      	movs	r2, #0
 800846a:	601a      	str	r2, [r3, #0]
 800846c:	605a      	str	r2, [r3, #4]
 800846e:	609a      	str	r2, [r3, #8]
 8008470:	60da      	str	r2, [r3, #12]
 8008472:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a19      	ldr	r2, [pc, #100]	; (80084e0 <HAL_I2C_MspInit+0x84>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d12c      	bne.n	80084d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800847e:	2300      	movs	r3, #0
 8008480:	613b      	str	r3, [r7, #16]
 8008482:	4b18      	ldr	r3, [pc, #96]	; (80084e4 <HAL_I2C_MspInit+0x88>)
 8008484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008486:	4a17      	ldr	r2, [pc, #92]	; (80084e4 <HAL_I2C_MspInit+0x88>)
 8008488:	f043 0302 	orr.w	r3, r3, #2
 800848c:	6313      	str	r3, [r2, #48]	; 0x30
 800848e:	4b15      	ldr	r3, [pc, #84]	; (80084e4 <HAL_I2C_MspInit+0x88>)
 8008490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008492:	f003 0302 	and.w	r3, r3, #2
 8008496:	613b      	str	r3, [r7, #16]
 8008498:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800849a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800849e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80084a0:	2312      	movs	r3, #18
 80084a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80084a4:	2301      	movs	r3, #1
 80084a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084a8:	2300      	movs	r3, #0
 80084aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80084ac:	2304      	movs	r3, #4
 80084ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084b0:	f107 0314 	add.w	r3, r7, #20
 80084b4:	4619      	mov	r1, r3
 80084b6:	480c      	ldr	r0, [pc, #48]	; (80084e8 <HAL_I2C_MspInit+0x8c>)
 80084b8:	f7f8 f9ac 	bl	8000814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80084bc:	2300      	movs	r3, #0
 80084be:	60fb      	str	r3, [r7, #12]
 80084c0:	4b08      	ldr	r3, [pc, #32]	; (80084e4 <HAL_I2C_MspInit+0x88>)
 80084c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c4:	4a07      	ldr	r2, [pc, #28]	; (80084e4 <HAL_I2C_MspInit+0x88>)
 80084c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084ca:	6413      	str	r3, [r2, #64]	; 0x40
 80084cc:	4b05      	ldr	r3, [pc, #20]	; (80084e4 <HAL_I2C_MspInit+0x88>)
 80084ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084d4:	60fb      	str	r3, [r7, #12]
 80084d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80084d8:	bf00      	nop
 80084da:	3728      	adds	r7, #40	; 0x28
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	40005400 	.word	0x40005400
 80084e4:	40023800 	.word	0x40023800
 80084e8:	40020400 	.word	0x40020400

080084ec <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b08a      	sub	sp, #40	; 0x28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084f4:	f107 0314 	add.w	r3, r7, #20
 80084f8:	2200      	movs	r2, #0
 80084fa:	601a      	str	r2, [r3, #0]
 80084fc:	605a      	str	r2, [r3, #4]
 80084fe:	609a      	str	r2, [r3, #8]
 8008500:	60da      	str	r2, [r3, #12]
 8008502:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a28      	ldr	r2, [pc, #160]	; (80085ac <HAL_I2S_MspInit+0xc0>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d14a      	bne.n	80085a4 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800850e:	2300      	movs	r3, #0
 8008510:	613b      	str	r3, [r7, #16]
 8008512:	4b27      	ldr	r3, [pc, #156]	; (80085b0 <HAL_I2S_MspInit+0xc4>)
 8008514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008516:	4a26      	ldr	r2, [pc, #152]	; (80085b0 <HAL_I2S_MspInit+0xc4>)
 8008518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800851c:	6413      	str	r3, [r2, #64]	; 0x40
 800851e:	4b24      	ldr	r3, [pc, #144]	; (80085b0 <HAL_I2S_MspInit+0xc4>)
 8008520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008522:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008526:	613b      	str	r3, [r7, #16]
 8008528:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800852a:	2300      	movs	r3, #0
 800852c:	60fb      	str	r3, [r7, #12]
 800852e:	4b20      	ldr	r3, [pc, #128]	; (80085b0 <HAL_I2S_MspInit+0xc4>)
 8008530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008532:	4a1f      	ldr	r2, [pc, #124]	; (80085b0 <HAL_I2S_MspInit+0xc4>)
 8008534:	f043 0301 	orr.w	r3, r3, #1
 8008538:	6313      	str	r3, [r2, #48]	; 0x30
 800853a:	4b1d      	ldr	r3, [pc, #116]	; (80085b0 <HAL_I2S_MspInit+0xc4>)
 800853c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853e:	f003 0301 	and.w	r3, r3, #1
 8008542:	60fb      	str	r3, [r7, #12]
 8008544:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008546:	2300      	movs	r3, #0
 8008548:	60bb      	str	r3, [r7, #8]
 800854a:	4b19      	ldr	r3, [pc, #100]	; (80085b0 <HAL_I2S_MspInit+0xc4>)
 800854c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800854e:	4a18      	ldr	r2, [pc, #96]	; (80085b0 <HAL_I2S_MspInit+0xc4>)
 8008550:	f043 0304 	orr.w	r3, r3, #4
 8008554:	6313      	str	r3, [r2, #48]	; 0x30
 8008556:	4b16      	ldr	r3, [pc, #88]	; (80085b0 <HAL_I2S_MspInit+0xc4>)
 8008558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855a:	f003 0304 	and.w	r3, r3, #4
 800855e:	60bb      	str	r3, [r7, #8]
 8008560:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8008562:	2310      	movs	r3, #16
 8008564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008566:	2302      	movs	r3, #2
 8008568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800856a:	2300      	movs	r3, #0
 800856c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800856e:	2300      	movs	r3, #0
 8008570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008572:	2306      	movs	r3, #6
 8008574:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8008576:	f107 0314 	add.w	r3, r7, #20
 800857a:	4619      	mov	r1, r3
 800857c:	480d      	ldr	r0, [pc, #52]	; (80085b4 <HAL_I2S_MspInit+0xc8>)
 800857e:	f7f8 f949 	bl	8000814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8008582:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8008586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008588:	2302      	movs	r3, #2
 800858a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800858c:	2300      	movs	r3, #0
 800858e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008590:	2300      	movs	r3, #0
 8008592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008594:	2306      	movs	r3, #6
 8008596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008598:	f107 0314 	add.w	r3, r7, #20
 800859c:	4619      	mov	r1, r3
 800859e:	4806      	ldr	r0, [pc, #24]	; (80085b8 <HAL_I2S_MspInit+0xcc>)
 80085a0:	f7f8 f938 	bl	8000814 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80085a4:	bf00      	nop
 80085a6:	3728      	adds	r7, #40	; 0x28
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	40003c00 	.word	0x40003c00
 80085b0:	40023800 	.word	0x40023800
 80085b4:	40020000 	.word	0x40020000
 80085b8:	40020800 	.word	0x40020800

080085bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b08a      	sub	sp, #40	; 0x28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085c4:	f107 0314 	add.w	r3, r7, #20
 80085c8:	2200      	movs	r2, #0
 80085ca:	601a      	str	r2, [r3, #0]
 80085cc:	605a      	str	r2, [r3, #4]
 80085ce:	609a      	str	r2, [r3, #8]
 80085d0:	60da      	str	r2, [r3, #12]
 80085d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a19      	ldr	r2, [pc, #100]	; (8008640 <HAL_SPI_MspInit+0x84>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d12b      	bne.n	8008636 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80085de:	2300      	movs	r3, #0
 80085e0:	613b      	str	r3, [r7, #16]
 80085e2:	4b18      	ldr	r3, [pc, #96]	; (8008644 <HAL_SPI_MspInit+0x88>)
 80085e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085e6:	4a17      	ldr	r2, [pc, #92]	; (8008644 <HAL_SPI_MspInit+0x88>)
 80085e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80085ec:	6453      	str	r3, [r2, #68]	; 0x44
 80085ee:	4b15      	ldr	r3, [pc, #84]	; (8008644 <HAL_SPI_MspInit+0x88>)
 80085f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80085f6:	613b      	str	r3, [r7, #16]
 80085f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085fa:	2300      	movs	r3, #0
 80085fc:	60fb      	str	r3, [r7, #12]
 80085fe:	4b11      	ldr	r3, [pc, #68]	; (8008644 <HAL_SPI_MspInit+0x88>)
 8008600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008602:	4a10      	ldr	r2, [pc, #64]	; (8008644 <HAL_SPI_MspInit+0x88>)
 8008604:	f043 0301 	orr.w	r3, r3, #1
 8008608:	6313      	str	r3, [r2, #48]	; 0x30
 800860a:	4b0e      	ldr	r3, [pc, #56]	; (8008644 <HAL_SPI_MspInit+0x88>)
 800860c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860e:	f003 0301 	and.w	r3, r3, #1
 8008612:	60fb      	str	r3, [r7, #12]
 8008614:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8008616:	23e0      	movs	r3, #224	; 0xe0
 8008618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800861a:	2302      	movs	r3, #2
 800861c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800861e:	2300      	movs	r3, #0
 8008620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008622:	2300      	movs	r3, #0
 8008624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008626:	2305      	movs	r3, #5
 8008628:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800862a:	f107 0314 	add.w	r3, r7, #20
 800862e:	4619      	mov	r1, r3
 8008630:	4805      	ldr	r0, [pc, #20]	; (8008648 <HAL_SPI_MspInit+0x8c>)
 8008632:	f7f8 f8ef 	bl	8000814 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008636:	bf00      	nop
 8008638:	3728      	adds	r7, #40	; 0x28
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	40013000 	.word	0x40013000
 8008644:	40023800 	.word	0x40023800
 8008648:	40020000 	.word	0x40020000

0800864c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a18      	ldr	r2, [pc, #96]	; (80086bc <HAL_TIM_Base_MspInit+0x70>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d10e      	bne.n	800867c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800865e:	2300      	movs	r3, #0
 8008660:	60fb      	str	r3, [r7, #12]
 8008662:	4b17      	ldr	r3, [pc, #92]	; (80086c0 <HAL_TIM_Base_MspInit+0x74>)
 8008664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008666:	4a16      	ldr	r2, [pc, #88]	; (80086c0 <HAL_TIM_Base_MspInit+0x74>)
 8008668:	f043 0302 	orr.w	r3, r3, #2
 800866c:	6413      	str	r3, [r2, #64]	; 0x40
 800866e:	4b14      	ldr	r3, [pc, #80]	; (80086c0 <HAL_TIM_Base_MspInit+0x74>)
 8008670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008672:	f003 0302 	and.w	r3, r3, #2
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800867a:	e01a      	b.n	80086b2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a10      	ldr	r2, [pc, #64]	; (80086c4 <HAL_TIM_Base_MspInit+0x78>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d115      	bne.n	80086b2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008686:	2300      	movs	r3, #0
 8008688:	60bb      	str	r3, [r7, #8]
 800868a:	4b0d      	ldr	r3, [pc, #52]	; (80086c0 <HAL_TIM_Base_MspInit+0x74>)
 800868c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868e:	4a0c      	ldr	r2, [pc, #48]	; (80086c0 <HAL_TIM_Base_MspInit+0x74>)
 8008690:	f043 0304 	orr.w	r3, r3, #4
 8008694:	6413      	str	r3, [r2, #64]	; 0x40
 8008696:	4b0a      	ldr	r3, [pc, #40]	; (80086c0 <HAL_TIM_Base_MspInit+0x74>)
 8008698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869a:	f003 0304 	and.w	r3, r3, #4
 800869e:	60bb      	str	r3, [r7, #8]
 80086a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80086a2:	2200      	movs	r2, #0
 80086a4:	2100      	movs	r1, #0
 80086a6:	201e      	movs	r0, #30
 80086a8:	f7f8 f87d 	bl	80007a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80086ac:	201e      	movs	r0, #30
 80086ae:	f7f8 f896 	bl	80007de <HAL_NVIC_EnableIRQ>
}
 80086b2:	bf00      	nop
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	40000400 	.word	0x40000400
 80086c0:	40023800 	.word	0x40023800
 80086c4:	40000800 	.word	0x40000800

080086c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b088      	sub	sp, #32
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086d0:	f107 030c 	add.w	r3, r7, #12
 80086d4:	2200      	movs	r2, #0
 80086d6:	601a      	str	r2, [r3, #0]
 80086d8:	605a      	str	r2, [r3, #4]
 80086da:	609a      	str	r2, [r3, #8]
 80086dc:	60da      	str	r2, [r3, #12]
 80086de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a12      	ldr	r2, [pc, #72]	; (8008730 <HAL_TIM_MspPostInit+0x68>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d11e      	bne.n	8008728 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80086ea:	2300      	movs	r3, #0
 80086ec:	60bb      	str	r3, [r7, #8]
 80086ee:	4b11      	ldr	r3, [pc, #68]	; (8008734 <HAL_TIM_MspPostInit+0x6c>)
 80086f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f2:	4a10      	ldr	r2, [pc, #64]	; (8008734 <HAL_TIM_MspPostInit+0x6c>)
 80086f4:	f043 0308 	orr.w	r3, r3, #8
 80086f8:	6313      	str	r3, [r2, #48]	; 0x30
 80086fa:	4b0e      	ldr	r3, [pc, #56]	; (8008734 <HAL_TIM_MspPostInit+0x6c>)
 80086fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fe:	f003 0308 	and.w	r3, r3, #8
 8008702:	60bb      	str	r3, [r7, #8]
 8008704:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8008706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800870a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800870c:	2302      	movs	r3, #2
 800870e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008710:	2300      	movs	r3, #0
 8008712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008714:	2300      	movs	r3, #0
 8008716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008718:	2302      	movs	r3, #2
 800871a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800871c:	f107 030c 	add.w	r3, r7, #12
 8008720:	4619      	mov	r1, r3
 8008722:	4805      	ldr	r0, [pc, #20]	; (8008738 <HAL_TIM_MspPostInit+0x70>)
 8008724:	f7f8 f876 	bl	8000814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8008728:	bf00      	nop
 800872a:	3720      	adds	r7, #32
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	40000800 	.word	0x40000800
 8008734:	40023800 	.word	0x40023800
 8008738:	40020c00 	.word	0x40020c00

0800873c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b08a      	sub	sp, #40	; 0x28
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008744:	f107 0314 	add.w	r3, r7, #20
 8008748:	2200      	movs	r2, #0
 800874a:	601a      	str	r2, [r3, #0]
 800874c:	605a      	str	r2, [r3, #4]
 800874e:	609a      	str	r2, [r3, #8]
 8008750:	60da      	str	r2, [r3, #12]
 8008752:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a19      	ldr	r2, [pc, #100]	; (80087c0 <HAL_UART_MspInit+0x84>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d12b      	bne.n	80087b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800875e:	2300      	movs	r3, #0
 8008760:	613b      	str	r3, [r7, #16]
 8008762:	4b18      	ldr	r3, [pc, #96]	; (80087c4 <HAL_UART_MspInit+0x88>)
 8008764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008766:	4a17      	ldr	r2, [pc, #92]	; (80087c4 <HAL_UART_MspInit+0x88>)
 8008768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800876c:	6413      	str	r3, [r2, #64]	; 0x40
 800876e:	4b15      	ldr	r3, [pc, #84]	; (80087c4 <HAL_UART_MspInit+0x88>)
 8008770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008776:	613b      	str	r3, [r7, #16]
 8008778:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800877a:	2300      	movs	r3, #0
 800877c:	60fb      	str	r3, [r7, #12]
 800877e:	4b11      	ldr	r3, [pc, #68]	; (80087c4 <HAL_UART_MspInit+0x88>)
 8008780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008782:	4a10      	ldr	r2, [pc, #64]	; (80087c4 <HAL_UART_MspInit+0x88>)
 8008784:	f043 0301 	orr.w	r3, r3, #1
 8008788:	6313      	str	r3, [r2, #48]	; 0x30
 800878a:	4b0e      	ldr	r3, [pc, #56]	; (80087c4 <HAL_UART_MspInit+0x88>)
 800878c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	60fb      	str	r3, [r7, #12]
 8008794:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008796:	230c      	movs	r3, #12
 8008798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800879a:	2302      	movs	r3, #2
 800879c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800879e:	2301      	movs	r3, #1
 80087a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087a2:	2303      	movs	r3, #3
 80087a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80087a6:	2307      	movs	r3, #7
 80087a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087aa:	f107 0314 	add.w	r3, r7, #20
 80087ae:	4619      	mov	r1, r3
 80087b0:	4805      	ldr	r0, [pc, #20]	; (80087c8 <HAL_UART_MspInit+0x8c>)
 80087b2:	f7f8 f82f 	bl	8000814 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80087b6:	bf00      	nop
 80087b8:	3728      	adds	r7, #40	; 0x28
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	40004400 	.word	0x40004400
 80087c4:	40023800 	.word	0x40023800
 80087c8:	40020000 	.word	0x40020000

080087cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80087cc:	b480      	push	{r7}
 80087ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80087d0:	bf00      	nop
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80087da:	b480      	push	{r7}
 80087dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80087de:	e7fe      	b.n	80087de <HardFault_Handler+0x4>

080087e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80087e0:	b480      	push	{r7}
 80087e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80087e4:	e7fe      	b.n	80087e4 <MemManage_Handler+0x4>

080087e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80087e6:	b480      	push	{r7}
 80087e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80087ea:	e7fe      	b.n	80087ea <BusFault_Handler+0x4>

080087ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80087ec:	b480      	push	{r7}
 80087ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80087f0:	e7fe      	b.n	80087f0 <UsageFault_Handler+0x4>

080087f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80087f2:	b480      	push	{r7}
 80087f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80087f6:	bf00      	nop
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008800:	b480      	push	{r7}
 8008802:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008804:	bf00      	nop
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800880e:	b480      	push	{r7}
 8008810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008812:	bf00      	nop
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008820:	f7f7 fea4 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008824:	bf00      	nop
 8008826:	bd80      	pop	{r7, pc}

08008828 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800882c:	4802      	ldr	r0, [pc, #8]	; (8008838 <TIM4_IRQHandler+0x10>)
 800882e:	f7fb fa85 	bl	8003d3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8008832:	bf00      	nop
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	200000c4 	.word	0x200000c4

0800883c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8008840:	4802      	ldr	r0, [pc, #8]	; (800884c <OTG_FS_IRQHandler+0x10>)
 8008842:	f7f8 fc1f 	bl	8001084 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008846:	bf00      	nop
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	20000664 	.word	0x20000664

08008850 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008858:	4b11      	ldr	r3, [pc, #68]	; (80088a0 <_sbrk+0x50>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d102      	bne.n	8008866 <_sbrk+0x16>
		heap_end = &end;
 8008860:	4b0f      	ldr	r3, [pc, #60]	; (80088a0 <_sbrk+0x50>)
 8008862:	4a10      	ldr	r2, [pc, #64]	; (80088a4 <_sbrk+0x54>)
 8008864:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008866:	4b0e      	ldr	r3, [pc, #56]	; (80088a0 <_sbrk+0x50>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800886c:	4b0c      	ldr	r3, [pc, #48]	; (80088a0 <_sbrk+0x50>)
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4413      	add	r3, r2
 8008874:	466a      	mov	r2, sp
 8008876:	4293      	cmp	r3, r2
 8008878:	d907      	bls.n	800888a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800887a:	f000 fb5d 	bl	8008f38 <__errno>
 800887e:	4602      	mov	r2, r0
 8008880:	230c      	movs	r3, #12
 8008882:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008888:	e006      	b.n	8008898 <_sbrk+0x48>
	}

	heap_end += incr;
 800888a:	4b05      	ldr	r3, [pc, #20]	; (80088a0 <_sbrk+0x50>)
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4413      	add	r3, r2
 8008892:	4a03      	ldr	r2, [pc, #12]	; (80088a0 <_sbrk+0x50>)
 8008894:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008896:	68fb      	ldr	r3, [r7, #12]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	200000b0 	.word	0x200000b0
 80088a4:	20000930 	.word	0x20000930

080088a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80088a8:	b480      	push	{r7}
 80088aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80088ac:	4b08      	ldr	r3, [pc, #32]	; (80088d0 <SystemInit+0x28>)
 80088ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088b2:	4a07      	ldr	r2, [pc, #28]	; (80088d0 <SystemInit+0x28>)
 80088b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80088b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80088bc:	4b04      	ldr	r3, [pc, #16]	; (80088d0 <SystemInit+0x28>)
 80088be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80088c2:	609a      	str	r2, [r3, #8]
#endif
}
 80088c4:	bf00      	nop
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	e000ed00 	.word	0xe000ed00

080088d4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80088d8:	2201      	movs	r2, #1
 80088da:	490e      	ldr	r1, [pc, #56]	; (8008914 <MX_USB_HOST_Init+0x40>)
 80088dc:	480e      	ldr	r0, [pc, #56]	; (8008918 <MX_USB_HOST_Init+0x44>)
 80088de:	f7fe f809 	bl	80068f4 <USBH_Init>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d001      	beq.n	80088ec <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80088e8:	f7ff fd88 	bl	80083fc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80088ec:	490b      	ldr	r1, [pc, #44]	; (800891c <MX_USB_HOST_Init+0x48>)
 80088ee:	480a      	ldr	r0, [pc, #40]	; (8008918 <MX_USB_HOST_Init+0x44>)
 80088f0:	f7fe f873 	bl	80069da <USBH_RegisterClass>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80088fa:	f7ff fd7f 	bl	80083fc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80088fe:	4806      	ldr	r0, [pc, #24]	; (8008918 <MX_USB_HOST_Init+0x44>)
 8008900:	f7fe f8f8 	bl	8006af4 <USBH_Start>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d001      	beq.n	800890e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800890a:	f7ff fd77 	bl	80083fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800890e:	bf00      	nop
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	08008935 	.word	0x08008935
 8008918:	20000298 	.word	0x20000298
 800891c:	20000008 	.word	0x20000008

08008920 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008924:	4802      	ldr	r0, [pc, #8]	; (8008930 <MX_USB_HOST_Process+0x10>)
 8008926:	f7fe f8f5 	bl	8006b14 <USBH_Process>
}
 800892a:	bf00      	nop
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	20000298 	.word	0x20000298

08008934 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	460b      	mov	r3, r1
 800893e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008940:	78fb      	ldrb	r3, [r7, #3]
 8008942:	3b01      	subs	r3, #1
 8008944:	2b04      	cmp	r3, #4
 8008946:	d819      	bhi.n	800897c <USBH_UserProcess+0x48>
 8008948:	a201      	add	r2, pc, #4	; (adr r2, 8008950 <USBH_UserProcess+0x1c>)
 800894a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894e:	bf00      	nop
 8008950:	0800897d 	.word	0x0800897d
 8008954:	0800896d 	.word	0x0800896d
 8008958:	0800897d 	.word	0x0800897d
 800895c:	08008975 	.word	0x08008975
 8008960:	08008965 	.word	0x08008965
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008964:	4b09      	ldr	r3, [pc, #36]	; (800898c <USBH_UserProcess+0x58>)
 8008966:	2203      	movs	r2, #3
 8008968:	701a      	strb	r2, [r3, #0]
  break;
 800896a:	e008      	b.n	800897e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800896c:	4b07      	ldr	r3, [pc, #28]	; (800898c <USBH_UserProcess+0x58>)
 800896e:	2202      	movs	r2, #2
 8008970:	701a      	strb	r2, [r3, #0]
  break;
 8008972:	e004      	b.n	800897e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008974:	4b05      	ldr	r3, [pc, #20]	; (800898c <USBH_UserProcess+0x58>)
 8008976:	2201      	movs	r2, #1
 8008978:	701a      	strb	r2, [r3, #0]
  break;
 800897a:	e000      	b.n	800897e <USBH_UserProcess+0x4a>

  default:
  break;
 800897c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800897e:	bf00      	nop
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	200000b4 	.word	0x200000b4

08008990 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b08a      	sub	sp, #40	; 0x28
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008998:	f107 0314 	add.w	r3, r7, #20
 800899c:	2200      	movs	r2, #0
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	605a      	str	r2, [r3, #4]
 80089a2:	609a      	str	r2, [r3, #8]
 80089a4:	60da      	str	r2, [r3, #12]
 80089a6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089b0:	d147      	bne.n	8008a42 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089b2:	2300      	movs	r3, #0
 80089b4:	613b      	str	r3, [r7, #16]
 80089b6:	4b25      	ldr	r3, [pc, #148]	; (8008a4c <HAL_HCD_MspInit+0xbc>)
 80089b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ba:	4a24      	ldr	r2, [pc, #144]	; (8008a4c <HAL_HCD_MspInit+0xbc>)
 80089bc:	f043 0301 	orr.w	r3, r3, #1
 80089c0:	6313      	str	r3, [r2, #48]	; 0x30
 80089c2:	4b22      	ldr	r3, [pc, #136]	; (8008a4c <HAL_HCD_MspInit+0xbc>)
 80089c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	613b      	str	r3, [r7, #16]
 80089cc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80089ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80089d4:	2300      	movs	r3, #0
 80089d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089d8:	2300      	movs	r3, #0
 80089da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80089dc:	f107 0314 	add.w	r3, r7, #20
 80089e0:	4619      	mov	r1, r3
 80089e2:	481b      	ldr	r0, [pc, #108]	; (8008a50 <HAL_HCD_MspInit+0xc0>)
 80089e4:	f7f7 ff16 	bl	8000814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80089e8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80089ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089ee:	2302      	movs	r3, #2
 80089f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089f2:	2300      	movs	r3, #0
 80089f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089f6:	2300      	movs	r3, #0
 80089f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80089fa:	230a      	movs	r3, #10
 80089fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089fe:	f107 0314 	add.w	r3, r7, #20
 8008a02:	4619      	mov	r1, r3
 8008a04:	4812      	ldr	r0, [pc, #72]	; (8008a50 <HAL_HCD_MspInit+0xc0>)
 8008a06:	f7f7 ff05 	bl	8000814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a0a:	4b10      	ldr	r3, [pc, #64]	; (8008a4c <HAL_HCD_MspInit+0xbc>)
 8008a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a0e:	4a0f      	ldr	r2, [pc, #60]	; (8008a4c <HAL_HCD_MspInit+0xbc>)
 8008a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a14:	6353      	str	r3, [r2, #52]	; 0x34
 8008a16:	2300      	movs	r3, #0
 8008a18:	60fb      	str	r3, [r7, #12]
 8008a1a:	4b0c      	ldr	r3, [pc, #48]	; (8008a4c <HAL_HCD_MspInit+0xbc>)
 8008a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a1e:	4a0b      	ldr	r2, [pc, #44]	; (8008a4c <HAL_HCD_MspInit+0xbc>)
 8008a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a24:	6453      	str	r3, [r2, #68]	; 0x44
 8008a26:	4b09      	ldr	r3, [pc, #36]	; (8008a4c <HAL_HCD_MspInit+0xbc>)
 8008a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a2e:	60fb      	str	r3, [r7, #12]
 8008a30:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a32:	2200      	movs	r2, #0
 8008a34:	2100      	movs	r1, #0
 8008a36:	2043      	movs	r0, #67	; 0x43
 8008a38:	f7f7 feb5 	bl	80007a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a3c:	2043      	movs	r0, #67	; 0x43
 8008a3e:	f7f7 fece 	bl	80007de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a42:	bf00      	nop
 8008a44:	3728      	adds	r7, #40	; 0x28
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	40023800 	.word	0x40023800
 8008a50:	40020000 	.word	0x40020000

08008a54 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fe fb07 	bl	8007076 <USBH_LL_IncTimer>
}
 8008a68:	bf00      	nop
 8008a6a:	3708      	adds	r7, #8
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fe fb4c 	bl	800711c <USBH_LL_Connect>
}
 8008a84:	bf00      	nop
 8008a86:	3708      	adds	r7, #8
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7fe fb64 	bl	8007168 <USBH_LL_Disconnect>
}
 8008aa0:	bf00      	nop
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	70fb      	strb	r3, [r7, #3]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008ab8:	bf00      	nop
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fe faf9 	bl	80070ca <USBH_LL_PortEnabled>
} 
 8008ad8:	bf00      	nop
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7fe faf9 	bl	80070e6 <USBH_LL_PortDisabled>
} 
 8008af4:	bf00      	nop
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d12a      	bne.n	8008b64 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008b0e:	4a18      	ldr	r2, [pc, #96]	; (8008b70 <USBH_LL_Init+0x74>)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a15      	ldr	r2, [pc, #84]	; (8008b70 <USBH_LL_Init+0x74>)
 8008b1a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008b1e:	4b14      	ldr	r3, [pc, #80]	; (8008b70 <USBH_LL_Init+0x74>)
 8008b20:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008b24:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008b26:	4b12      	ldr	r3, [pc, #72]	; (8008b70 <USBH_LL_Init+0x74>)
 8008b28:	2208      	movs	r2, #8
 8008b2a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008b2c:	4b10      	ldr	r3, [pc, #64]	; (8008b70 <USBH_LL_Init+0x74>)
 8008b2e:	2201      	movs	r2, #1
 8008b30:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008b32:	4b0f      	ldr	r3, [pc, #60]	; (8008b70 <USBH_LL_Init+0x74>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008b38:	4b0d      	ldr	r3, [pc, #52]	; (8008b70 <USBH_LL_Init+0x74>)
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b3e:	4b0c      	ldr	r3, [pc, #48]	; (8008b70 <USBH_LL_Init+0x74>)
 8008b40:	2200      	movs	r2, #0
 8008b42:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008b44:	480a      	ldr	r0, [pc, #40]	; (8008b70 <USBH_LL_Init+0x74>)
 8008b46:	f7f8 f818 	bl	8000b7a <HAL_HCD_Init>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d001      	beq.n	8008b54 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008b50:	f7ff fc54 	bl	80083fc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008b54:	4806      	ldr	r0, [pc, #24]	; (8008b70 <USBH_LL_Init+0x74>)
 8008b56:	f7f8 fc13 	bl	8001380 <HAL_HCD_GetCurrentFrame>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f7fe fa7a 	bl	8007058 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3708      	adds	r7, #8
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	20000664 	.word	0x20000664

08008b74 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b80:	2300      	movs	r3, #0
 8008b82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7f8 fb80 	bl	8001290 <HAL_HCD_Start>
 8008b90:	4603      	mov	r3, r0
 8008b92:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 f95c 	bl	8008e54 <USBH_Get_USB_Status>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008ba0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b084      	sub	sp, #16
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7f8 fb88 	bl	80012d6 <HAL_HCD_Stop>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f000 f941 	bl	8008e54 <USBH_Get_USB_Status>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8008bd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008be8:	2301      	movs	r3, #1
 8008bea:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7f8 fbd2 	bl	800139c <HAL_HCD_GetCurrentSpeed>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d007      	beq.n	8008c0e <USBH_LL_GetSpeed+0x2e>
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d302      	bcc.n	8008c08 <USBH_LL_GetSpeed+0x28>
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d006      	beq.n	8008c14 <USBH_LL_GetSpeed+0x34>
 8008c06:	e008      	b.n	8008c1a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c0c:	e008      	b.n	8008c20 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	73fb      	strb	r3, [r7, #15]
    break;
 8008c12:	e005      	b.n	8008c20 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008c14:	2302      	movs	r3, #2
 8008c16:	73fb      	strb	r3, [r7, #15]
    break;
 8008c18:	e002      	b.n	8008c20 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c1e:	bf00      	nop
  }
  return  speed;
 8008c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b084      	sub	sp, #16
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c36:	2300      	movs	r3, #0
 8008c38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7f8 fb65 	bl	8001310 <HAL_HCD_ResetPort>
 8008c46:	4603      	mov	r3, r0
 8008c48:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8008c4a:	7bfb      	ldrb	r3, [r7, #15]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 f901 	bl	8008e54 <USBH_Get_USB_Status>
 8008c52:	4603      	mov	r3, r0
 8008c54:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008c56:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	460b      	mov	r3, r1
 8008c6a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008c72:	78fa      	ldrb	r2, [r7, #3]
 8008c74:	4611      	mov	r1, r2
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7f8 fb6d 	bl	8001356 <HAL_HCD_HC_GetXferCount>
 8008c7c:	4603      	mov	r3, r0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3708      	adds	r7, #8
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}

08008c86 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008c86:	b590      	push	{r4, r7, lr}
 8008c88:	b089      	sub	sp, #36	; 0x24
 8008c8a:	af04      	add	r7, sp, #16
 8008c8c:	6078      	str	r0, [r7, #4]
 8008c8e:	4608      	mov	r0, r1
 8008c90:	4611      	mov	r1, r2
 8008c92:	461a      	mov	r2, r3
 8008c94:	4603      	mov	r3, r0
 8008c96:	70fb      	strb	r3, [r7, #3]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	70bb      	strb	r3, [r7, #2]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8008cae:	787c      	ldrb	r4, [r7, #1]
 8008cb0:	78ba      	ldrb	r2, [r7, #2]
 8008cb2:	78f9      	ldrb	r1, [r7, #3]
 8008cb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008cb6:	9302      	str	r3, [sp, #8]
 8008cb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008cbc:	9301      	str	r3, [sp, #4]
 8008cbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	4623      	mov	r3, r4
 8008cc6:	f7f7 ffba 	bl	8000c3e <HAL_HCD_HC_Init>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008cce:	7bfb      	ldrb	r3, [r7, #15]
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f000 f8bf 	bl	8008e54 <USBH_Get_USB_Status>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008cda:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3714      	adds	r7, #20
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd90      	pop	{r4, r7, pc}

08008ce4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	460b      	mov	r3, r1
 8008cee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008cfe:	78fa      	ldrb	r2, [r7, #3]
 8008d00:	4611      	mov	r1, r2
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7f8 f833 	bl	8000d6e <HAL_HCD_HC_Halt>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d0c:	7bfb      	ldrb	r3, [r7, #15]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 f8a0 	bl	8008e54 <USBH_Get_USB_Status>
 8008d14:	4603      	mov	r3, r0
 8008d16:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008d18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008d22:	b590      	push	{r4, r7, lr}
 8008d24:	b089      	sub	sp, #36	; 0x24
 8008d26:	af04      	add	r7, sp, #16
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	4608      	mov	r0, r1
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	461a      	mov	r2, r3
 8008d30:	4603      	mov	r3, r0
 8008d32:	70fb      	strb	r3, [r7, #3]
 8008d34:	460b      	mov	r3, r1
 8008d36:	70bb      	strb	r3, [r7, #2]
 8008d38:	4613      	mov	r3, r2
 8008d3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8008d4a:	787c      	ldrb	r4, [r7, #1]
 8008d4c:	78ba      	ldrb	r2, [r7, #2]
 8008d4e:	78f9      	ldrb	r1, [r7, #3]
 8008d50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008d54:	9303      	str	r3, [sp, #12]
 8008d56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008d58:	9302      	str	r3, [sp, #8]
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5c:	9301      	str	r3, [sp, #4]
 8008d5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008d62:	9300      	str	r3, [sp, #0]
 8008d64:	4623      	mov	r3, r4
 8008d66:	f7f8 f825 	bl	8000db4 <HAL_HCD_HC_SubmitRequest>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
 8008d70:	4618      	mov	r0, r3
 8008d72:	f000 f86f 	bl	8008e54 <USBH_Get_USB_Status>
 8008d76:	4603      	mov	r3, r0
 8008d78:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008d7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd90      	pop	{r4, r7, pc}

08008d84 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d96:	78fa      	ldrb	r2, [r7, #3]
 8008d98:	4611      	mov	r1, r2
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7f8 fac6 	bl	800132c <HAL_HCD_HC_GetURBState>
 8008da0:	4603      	mov	r3, r0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3708      	adds	r7, #8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b082      	sub	sp, #8
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	460b      	mov	r3, r1
 8008db4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d103      	bne.n	8008dc8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008dc0:	78fb      	ldrb	r3, [r7, #3]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f000 f872 	bl	8008eac <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008dc8:	20c8      	movs	r0, #200	; 0xc8
 8008dca:	f7f7 fbef 	bl	80005ac <HAL_Delay>
  return USBH_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	460b      	mov	r3, r1
 8008de2:	70fb      	strb	r3, [r7, #3]
 8008de4:	4613      	mov	r3, r2
 8008de6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008dee:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008df0:	78fa      	ldrb	r2, [r7, #3]
 8008df2:	68f9      	ldr	r1, [r7, #12]
 8008df4:	4613      	mov	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	4413      	add	r3, r2
 8008dfa:	00db      	lsls	r3, r3, #3
 8008dfc:	440b      	add	r3, r1
 8008dfe:	333b      	adds	r3, #59	; 0x3b
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d00a      	beq.n	8008e1c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008e06:	78fa      	ldrb	r2, [r7, #3]
 8008e08:	68f9      	ldr	r1, [r7, #12]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	00db      	lsls	r3, r3, #3
 8008e12:	440b      	add	r3, r1
 8008e14:	3350      	adds	r3, #80	; 0x50
 8008e16:	78ba      	ldrb	r2, [r7, #2]
 8008e18:	701a      	strb	r2, [r3, #0]
 8008e1a:	e009      	b.n	8008e30 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008e1c:	78fa      	ldrb	r2, [r7, #3]
 8008e1e:	68f9      	ldr	r1, [r7, #12]
 8008e20:	4613      	mov	r3, r2
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	4413      	add	r3, r2
 8008e26:	00db      	lsls	r3, r3, #3
 8008e28:	440b      	add	r3, r1
 8008e2a:	3351      	adds	r3, #81	; 0x51
 8008e2c:	78ba      	ldrb	r2, [r7, #2]
 8008e2e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3714      	adds	r7, #20
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr

08008e3e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b082      	sub	sp, #8
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7f7 fbb0 	bl	80005ac <HAL_Delay>
}
 8008e4c:	bf00      	nop
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e62:	79fb      	ldrb	r3, [r7, #7]
 8008e64:	2b03      	cmp	r3, #3
 8008e66:	d817      	bhi.n	8008e98 <USBH_Get_USB_Status+0x44>
 8008e68:	a201      	add	r2, pc, #4	; (adr r2, 8008e70 <USBH_Get_USB_Status+0x1c>)
 8008e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e6e:	bf00      	nop
 8008e70:	08008e81 	.word	0x08008e81
 8008e74:	08008e87 	.word	0x08008e87
 8008e78:	08008e8d 	.word	0x08008e8d
 8008e7c:	08008e93 	.word	0x08008e93
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	73fb      	strb	r3, [r7, #15]
    break;
 8008e84:	e00b      	b.n	8008e9e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008e86:	2302      	movs	r3, #2
 8008e88:	73fb      	strb	r3, [r7, #15]
    break;
 8008e8a:	e008      	b.n	8008e9e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e90:	e005      	b.n	8008e9e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008e92:	2302      	movs	r3, #2
 8008e94:	73fb      	strb	r3, [r7, #15]
    break;
 8008e96:	e002      	b.n	8008e9e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008e98:	2302      	movs	r3, #2
 8008e9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e9c:	bf00      	nop
  }
  return usb_status;
 8008e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3714      	adds	r7, #20
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8008eb6:	79fb      	ldrb	r3, [r7, #7]
 8008eb8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008eba:	79fb      	ldrb	r3, [r7, #7]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d102      	bne.n	8008ec6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	73fb      	strb	r3, [r7, #15]
 8008ec4:	e001      	b.n	8008eca <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008eca:	7bfb      	ldrb	r3, [r7, #15]
 8008ecc:	461a      	mov	r2, r3
 8008ece:	2101      	movs	r1, #1
 8008ed0:	4803      	ldr	r0, [pc, #12]	; (8008ee0 <MX_DriverVbusFS+0x34>)
 8008ed2:	f7f7 fe39 	bl	8000b48 <HAL_GPIO_WritePin>
}
 8008ed6:	bf00      	nop
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	40020800 	.word	0x40020800

08008ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008f1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008ee8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008eea:	e003      	b.n	8008ef4 <LoopCopyDataInit>

08008eec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008eec:	4b0c      	ldr	r3, [pc, #48]	; (8008f20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008eee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008ef0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008ef2:	3104      	adds	r1, #4

08008ef4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008ef4:	480b      	ldr	r0, [pc, #44]	; (8008f24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008ef6:	4b0c      	ldr	r3, [pc, #48]	; (8008f28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008ef8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008efa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008efc:	d3f6      	bcc.n	8008eec <CopyDataInit>
  ldr  r2, =_sbss
 8008efe:	4a0b      	ldr	r2, [pc, #44]	; (8008f2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008f00:	e002      	b.n	8008f08 <LoopFillZerobss>

08008f02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008f02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008f04:	f842 3b04 	str.w	r3, [r2], #4

08008f08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008f08:	4b09      	ldr	r3, [pc, #36]	; (8008f30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008f0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008f0c:	d3f9      	bcc.n	8008f02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008f0e:	f7ff fccb 	bl	80088a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008f12:	f000 f817 	bl	8008f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008f16:	f7fe ff2b 	bl	8007d70 <main>
  bx  lr    
 8008f1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008f1c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008f20:	0800917c 	.word	0x0800917c
  ldr  r0, =_sdata
 8008f24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008f28:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8008f2c:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8008f30:	2000092c 	.word	0x2000092c

08008f34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008f34:	e7fe      	b.n	8008f34 <ADC_IRQHandler>
	...

08008f38 <__errno>:
 8008f38:	4b01      	ldr	r3, [pc, #4]	; (8008f40 <__errno+0x8>)
 8008f3a:	6818      	ldr	r0, [r3, #0]
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	2000002c 	.word	0x2000002c

08008f44 <__libc_init_array>:
 8008f44:	b570      	push	{r4, r5, r6, lr}
 8008f46:	4e0d      	ldr	r6, [pc, #52]	; (8008f7c <__libc_init_array+0x38>)
 8008f48:	4c0d      	ldr	r4, [pc, #52]	; (8008f80 <__libc_init_array+0x3c>)
 8008f4a:	1ba4      	subs	r4, r4, r6
 8008f4c:	10a4      	asrs	r4, r4, #2
 8008f4e:	2500      	movs	r5, #0
 8008f50:	42a5      	cmp	r5, r4
 8008f52:	d109      	bne.n	8008f68 <__libc_init_array+0x24>
 8008f54:	4e0b      	ldr	r6, [pc, #44]	; (8008f84 <__libc_init_array+0x40>)
 8008f56:	4c0c      	ldr	r4, [pc, #48]	; (8008f88 <__libc_init_array+0x44>)
 8008f58:	f000 f8ea 	bl	8009130 <_init>
 8008f5c:	1ba4      	subs	r4, r4, r6
 8008f5e:	10a4      	asrs	r4, r4, #2
 8008f60:	2500      	movs	r5, #0
 8008f62:	42a5      	cmp	r5, r4
 8008f64:	d105      	bne.n	8008f72 <__libc_init_array+0x2e>
 8008f66:	bd70      	pop	{r4, r5, r6, pc}
 8008f68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008f6c:	4798      	blx	r3
 8008f6e:	3501      	adds	r5, #1
 8008f70:	e7ee      	b.n	8008f50 <__libc_init_array+0xc>
 8008f72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008f76:	4798      	blx	r3
 8008f78:	3501      	adds	r5, #1
 8008f7a:	e7f2      	b.n	8008f62 <__libc_init_array+0x1e>
 8008f7c:	08009174 	.word	0x08009174
 8008f80:	08009174 	.word	0x08009174
 8008f84:	08009174 	.word	0x08009174
 8008f88:	08009178 	.word	0x08009178

08008f8c <malloc>:
 8008f8c:	4b02      	ldr	r3, [pc, #8]	; (8008f98 <malloc+0xc>)
 8008f8e:	4601      	mov	r1, r0
 8008f90:	6818      	ldr	r0, [r3, #0]
 8008f92:	f000 b861 	b.w	8009058 <_malloc_r>
 8008f96:	bf00      	nop
 8008f98:	2000002c 	.word	0x2000002c

08008f9c <free>:
 8008f9c:	4b02      	ldr	r3, [pc, #8]	; (8008fa8 <free+0xc>)
 8008f9e:	4601      	mov	r1, r0
 8008fa0:	6818      	ldr	r0, [r3, #0]
 8008fa2:	f000 b80b 	b.w	8008fbc <_free_r>
 8008fa6:	bf00      	nop
 8008fa8:	2000002c 	.word	0x2000002c

08008fac <memset>:
 8008fac:	4402      	add	r2, r0
 8008fae:	4603      	mov	r3, r0
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d100      	bne.n	8008fb6 <memset+0xa>
 8008fb4:	4770      	bx	lr
 8008fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8008fba:	e7f9      	b.n	8008fb0 <memset+0x4>

08008fbc <_free_r>:
 8008fbc:	b538      	push	{r3, r4, r5, lr}
 8008fbe:	4605      	mov	r5, r0
 8008fc0:	2900      	cmp	r1, #0
 8008fc2:	d045      	beq.n	8009050 <_free_r+0x94>
 8008fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fc8:	1f0c      	subs	r4, r1, #4
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	bfb8      	it	lt
 8008fce:	18e4      	addlt	r4, r4, r3
 8008fd0:	f000 f8ac 	bl	800912c <__malloc_lock>
 8008fd4:	4a1f      	ldr	r2, [pc, #124]	; (8009054 <_free_r+0x98>)
 8008fd6:	6813      	ldr	r3, [r2, #0]
 8008fd8:	4610      	mov	r0, r2
 8008fda:	b933      	cbnz	r3, 8008fea <_free_r+0x2e>
 8008fdc:	6063      	str	r3, [r4, #4]
 8008fde:	6014      	str	r4, [r2, #0]
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fe6:	f000 b8a2 	b.w	800912e <__malloc_unlock>
 8008fea:	42a3      	cmp	r3, r4
 8008fec:	d90c      	bls.n	8009008 <_free_r+0x4c>
 8008fee:	6821      	ldr	r1, [r4, #0]
 8008ff0:	1862      	adds	r2, r4, r1
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	bf04      	itt	eq
 8008ff6:	681a      	ldreq	r2, [r3, #0]
 8008ff8:	685b      	ldreq	r3, [r3, #4]
 8008ffa:	6063      	str	r3, [r4, #4]
 8008ffc:	bf04      	itt	eq
 8008ffe:	1852      	addeq	r2, r2, r1
 8009000:	6022      	streq	r2, [r4, #0]
 8009002:	6004      	str	r4, [r0, #0]
 8009004:	e7ec      	b.n	8008fe0 <_free_r+0x24>
 8009006:	4613      	mov	r3, r2
 8009008:	685a      	ldr	r2, [r3, #4]
 800900a:	b10a      	cbz	r2, 8009010 <_free_r+0x54>
 800900c:	42a2      	cmp	r2, r4
 800900e:	d9fa      	bls.n	8009006 <_free_r+0x4a>
 8009010:	6819      	ldr	r1, [r3, #0]
 8009012:	1858      	adds	r0, r3, r1
 8009014:	42a0      	cmp	r0, r4
 8009016:	d10b      	bne.n	8009030 <_free_r+0x74>
 8009018:	6820      	ldr	r0, [r4, #0]
 800901a:	4401      	add	r1, r0
 800901c:	1858      	adds	r0, r3, r1
 800901e:	4282      	cmp	r2, r0
 8009020:	6019      	str	r1, [r3, #0]
 8009022:	d1dd      	bne.n	8008fe0 <_free_r+0x24>
 8009024:	6810      	ldr	r0, [r2, #0]
 8009026:	6852      	ldr	r2, [r2, #4]
 8009028:	605a      	str	r2, [r3, #4]
 800902a:	4401      	add	r1, r0
 800902c:	6019      	str	r1, [r3, #0]
 800902e:	e7d7      	b.n	8008fe0 <_free_r+0x24>
 8009030:	d902      	bls.n	8009038 <_free_r+0x7c>
 8009032:	230c      	movs	r3, #12
 8009034:	602b      	str	r3, [r5, #0]
 8009036:	e7d3      	b.n	8008fe0 <_free_r+0x24>
 8009038:	6820      	ldr	r0, [r4, #0]
 800903a:	1821      	adds	r1, r4, r0
 800903c:	428a      	cmp	r2, r1
 800903e:	bf04      	itt	eq
 8009040:	6811      	ldreq	r1, [r2, #0]
 8009042:	6852      	ldreq	r2, [r2, #4]
 8009044:	6062      	str	r2, [r4, #4]
 8009046:	bf04      	itt	eq
 8009048:	1809      	addeq	r1, r1, r0
 800904a:	6021      	streq	r1, [r4, #0]
 800904c:	605c      	str	r4, [r3, #4]
 800904e:	e7c7      	b.n	8008fe0 <_free_r+0x24>
 8009050:	bd38      	pop	{r3, r4, r5, pc}
 8009052:	bf00      	nop
 8009054:	200000b8 	.word	0x200000b8

08009058 <_malloc_r>:
 8009058:	b570      	push	{r4, r5, r6, lr}
 800905a:	1ccd      	adds	r5, r1, #3
 800905c:	f025 0503 	bic.w	r5, r5, #3
 8009060:	3508      	adds	r5, #8
 8009062:	2d0c      	cmp	r5, #12
 8009064:	bf38      	it	cc
 8009066:	250c      	movcc	r5, #12
 8009068:	2d00      	cmp	r5, #0
 800906a:	4606      	mov	r6, r0
 800906c:	db01      	blt.n	8009072 <_malloc_r+0x1a>
 800906e:	42a9      	cmp	r1, r5
 8009070:	d903      	bls.n	800907a <_malloc_r+0x22>
 8009072:	230c      	movs	r3, #12
 8009074:	6033      	str	r3, [r6, #0]
 8009076:	2000      	movs	r0, #0
 8009078:	bd70      	pop	{r4, r5, r6, pc}
 800907a:	f000 f857 	bl	800912c <__malloc_lock>
 800907e:	4a21      	ldr	r2, [pc, #132]	; (8009104 <_malloc_r+0xac>)
 8009080:	6814      	ldr	r4, [r2, #0]
 8009082:	4621      	mov	r1, r4
 8009084:	b991      	cbnz	r1, 80090ac <_malloc_r+0x54>
 8009086:	4c20      	ldr	r4, [pc, #128]	; (8009108 <_malloc_r+0xb0>)
 8009088:	6823      	ldr	r3, [r4, #0]
 800908a:	b91b      	cbnz	r3, 8009094 <_malloc_r+0x3c>
 800908c:	4630      	mov	r0, r6
 800908e:	f000 f83d 	bl	800910c <_sbrk_r>
 8009092:	6020      	str	r0, [r4, #0]
 8009094:	4629      	mov	r1, r5
 8009096:	4630      	mov	r0, r6
 8009098:	f000 f838 	bl	800910c <_sbrk_r>
 800909c:	1c43      	adds	r3, r0, #1
 800909e:	d124      	bne.n	80090ea <_malloc_r+0x92>
 80090a0:	230c      	movs	r3, #12
 80090a2:	6033      	str	r3, [r6, #0]
 80090a4:	4630      	mov	r0, r6
 80090a6:	f000 f842 	bl	800912e <__malloc_unlock>
 80090aa:	e7e4      	b.n	8009076 <_malloc_r+0x1e>
 80090ac:	680b      	ldr	r3, [r1, #0]
 80090ae:	1b5b      	subs	r3, r3, r5
 80090b0:	d418      	bmi.n	80090e4 <_malloc_r+0x8c>
 80090b2:	2b0b      	cmp	r3, #11
 80090b4:	d90f      	bls.n	80090d6 <_malloc_r+0x7e>
 80090b6:	600b      	str	r3, [r1, #0]
 80090b8:	50cd      	str	r5, [r1, r3]
 80090ba:	18cc      	adds	r4, r1, r3
 80090bc:	4630      	mov	r0, r6
 80090be:	f000 f836 	bl	800912e <__malloc_unlock>
 80090c2:	f104 000b 	add.w	r0, r4, #11
 80090c6:	1d23      	adds	r3, r4, #4
 80090c8:	f020 0007 	bic.w	r0, r0, #7
 80090cc:	1ac3      	subs	r3, r0, r3
 80090ce:	d0d3      	beq.n	8009078 <_malloc_r+0x20>
 80090d0:	425a      	negs	r2, r3
 80090d2:	50e2      	str	r2, [r4, r3]
 80090d4:	e7d0      	b.n	8009078 <_malloc_r+0x20>
 80090d6:	428c      	cmp	r4, r1
 80090d8:	684b      	ldr	r3, [r1, #4]
 80090da:	bf16      	itet	ne
 80090dc:	6063      	strne	r3, [r4, #4]
 80090de:	6013      	streq	r3, [r2, #0]
 80090e0:	460c      	movne	r4, r1
 80090e2:	e7eb      	b.n	80090bc <_malloc_r+0x64>
 80090e4:	460c      	mov	r4, r1
 80090e6:	6849      	ldr	r1, [r1, #4]
 80090e8:	e7cc      	b.n	8009084 <_malloc_r+0x2c>
 80090ea:	1cc4      	adds	r4, r0, #3
 80090ec:	f024 0403 	bic.w	r4, r4, #3
 80090f0:	42a0      	cmp	r0, r4
 80090f2:	d005      	beq.n	8009100 <_malloc_r+0xa8>
 80090f4:	1a21      	subs	r1, r4, r0
 80090f6:	4630      	mov	r0, r6
 80090f8:	f000 f808 	bl	800910c <_sbrk_r>
 80090fc:	3001      	adds	r0, #1
 80090fe:	d0cf      	beq.n	80090a0 <_malloc_r+0x48>
 8009100:	6025      	str	r5, [r4, #0]
 8009102:	e7db      	b.n	80090bc <_malloc_r+0x64>
 8009104:	200000b8 	.word	0x200000b8
 8009108:	200000bc 	.word	0x200000bc

0800910c <_sbrk_r>:
 800910c:	b538      	push	{r3, r4, r5, lr}
 800910e:	4c06      	ldr	r4, [pc, #24]	; (8009128 <_sbrk_r+0x1c>)
 8009110:	2300      	movs	r3, #0
 8009112:	4605      	mov	r5, r0
 8009114:	4608      	mov	r0, r1
 8009116:	6023      	str	r3, [r4, #0]
 8009118:	f7ff fb9a 	bl	8008850 <_sbrk>
 800911c:	1c43      	adds	r3, r0, #1
 800911e:	d102      	bne.n	8009126 <_sbrk_r+0x1a>
 8009120:	6823      	ldr	r3, [r4, #0]
 8009122:	b103      	cbz	r3, 8009126 <_sbrk_r+0x1a>
 8009124:	602b      	str	r3, [r5, #0]
 8009126:	bd38      	pop	{r3, r4, r5, pc}
 8009128:	20000928 	.word	0x20000928

0800912c <__malloc_lock>:
 800912c:	4770      	bx	lr

0800912e <__malloc_unlock>:
 800912e:	4770      	bx	lr

08009130 <_init>:
 8009130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009132:	bf00      	nop
 8009134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009136:	bc08      	pop	{r3}
 8009138:	469e      	mov	lr, r3
 800913a:	4770      	bx	lr

0800913c <_fini>:
 800913c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800913e:	bf00      	nop
 8009140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009142:	bc08      	pop	{r3}
 8009144:	469e      	mov	lr, r3
 8009146:	4770      	bx	lr
